<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/5.0.16" created="2022-05-05 02:16" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Jeffrey Wang的个人博客</title>
	<link>https://blog.wj2015.com</link>
	<description>业精于勤荒于嬉，行成于思毁于随。</description>
	<pubDate>Thu, 05 May 2022 02:16:45 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.wj2015.com/</wp:base_site_url>
	<wp:base_blog_url>https://blog.wj2015.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[Jie]]></wp:author_login><wp:author_email><![CDATA[admin@wj2015.com]]></wp:author_email><wp:author_display_name><![CDATA[Jie]]></wp:author_display_name><wp:author_first_name><![CDATA[Jeffrey]]></wp:author_first_name><wp:author_last_name><![CDATA[Wang]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>10</wp:term_id>
		<wp:category_nicename><![CDATA[linux]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Linux]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>23</wp:term_id>
		<wp:category_nicename><![CDATA[mysql]]></wp:category_nicename>
		<wp:category_parent><![CDATA[linux]]></wp:category_parent>
		<wp:cat_name><![CDATA[mysql]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>7</wp:term_id>
		<wp:category_nicename><![CDATA[web-front]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[前端开发]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>131</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%8c%ba%e5%9d%97%e9%93%be]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[区块链]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>8</wp:term_id>
		<wp:category_nicename><![CDATA[web-background]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[后端开发]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>136</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[基础知识]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>32</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%ae%89%e5%85%a8%e7%9b%b8%e5%85%b3]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[安全相关]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>6</wp:term_id>
		<wp:category_nicename><![CDATA[wechat]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[微信相关]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[未分类]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>68</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[机器学习]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>85</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[算法]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>46</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%9a%8f%e7%ac%94]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[随笔]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>121</wp:term_id>
		<wp:category_nicename><![CDATA[elasticsearch]]></wp:category_nicename>
		<wp:category_parent><![CDATA[linux]]></wp:category_parent>
		<wp:cat_name><![CDATA[ElasticSearch]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>116</wp:term_id>
		<wp:category_nicename><![CDATA[serverless]]></wp:category_nicename>
		<wp:category_parent><![CDATA[web-background]]></wp:category_parent>
		<wp:cat_name><![CDATA[Serverless]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>42</wp:term_id>
		<wp:category_nicename><![CDATA[vbot]]></wp:category_nicename>
		<wp:category_parent><![CDATA[wechat]]></wp:category_parent>
		<wp:cat_name><![CDATA[vbot]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[wechat]]></wp:category_parent>
		<wp:cat_name><![CDATA[微信小程序]]></wp:cat_name>
	</wp:category>
	<wp:tag>
		<wp:term_id>126</wp:term_id>
		<wp:tag_slug><![CDATA[2020]]></wp:tag_slug>
		<wp:tag_name><![CDATA[2020]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[apache]]></wp:tag_slug>
		<wp:tag_name><![CDATA[apache]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>49</wp:term_id>
		<wp:tag_slug><![CDATA[apply]]></wp:tag_slug>
		<wp:tag_name><![CDATA[apply]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>50</wp:term_id>
		<wp:tag_slug><![CDATA[array]]></wp:tag_slug>
		<wp:tag_name><![CDATA[array]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>120</wp:term_id>
		<wp:tag_slug><![CDATA[authorization]]></wp:tag_slug>
		<wp:tag_name><![CDATA[authorization]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>118</wp:term_id>
		<wp:tag_slug><![CDATA[aws]]></wp:tag_slug>
		<wp:tag_name><![CDATA[aws]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>53</wp:term_id>
		<wp:tag_slug><![CDATA[b-tree]]></wp:tag_slug>
		<wp:tag_name><![CDATA[B+ tree]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>100</wp:term_id>
		<wp:tag_slug><![CDATA[bp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[BP]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>106</wp:term_id>
		<wp:tag_slug><![CDATA[bp%e7%ae%97%e6%b3%95]]></wp:tag_slug>
		<wp:tag_name><![CDATA[BP算法]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>119</wp:term_id>
		<wp:tag_slug><![CDATA[cloudfront]]></wp:tag_slug>
		<wp:tag_name><![CDATA[cloudfront]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>95</wp:term_id>
		<wp:tag_slug><![CDATA[ctm]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ctm]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>13</wp:term_id>
		<wp:tag_slug><![CDATA[eth0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[eth0]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>55</wp:term_id>
		<wp:tag_slug><![CDATA[excel]]></wp:tag_slug>
		<wp:tag_name><![CDATA[excel]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[ffmpeg]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ffmpeg]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[fileupload]]></wp:tag_slug>
		<wp:tag_name><![CDATA[fileupload]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>134</wp:term_id>
		<wp:tag_slug><![CDATA[gasprice]]></wp:tag_slug>
		<wp:tag_name><![CDATA[gasPrice]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>60</wp:term_id>
		<wp:tag_slug><![CDATA[git]]></wp:tag_slug>
		<wp:tag_name><![CDATA[git]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>94</wp:term_id>
		<wp:tag_slug><![CDATA[gltf]]></wp:tag_slug>
		<wp:tag_name><![CDATA[gltf]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>87</wp:term_id>
		<wp:tag_slug><![CDATA[hash]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Hash]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>92</wp:term_id>
		<wp:tag_slug><![CDATA[iges]]></wp:tag_slug>
		<wp:tag_name><![CDATA[iges]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>25</wp:term_id>
		<wp:tag_slug><![CDATA[ios]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ios]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>64</wp:term_id>
		<wp:tag_slug><![CDATA[javascript]]></wp:tag_slug>
		<wp:tag_name><![CDATA[JavaScript]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>48</wp:term_id>
		<wp:tag_slug><![CDATA[js]]></wp:tag_slug>
		<wp:tag_name><![CDATA[js]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>56</wp:term_id>
		<wp:tag_slug><![CDATA[js-xlsx]]></wp:tag_slug>
		<wp:tag_name><![CDATA[js-xlsx]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>33</wp:term_id>
		<wp:tag_slug><![CDATA[kali]]></wp:tag_slug>
		<wp:tag_name><![CDATA[kali]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>122</wp:term_id>
		<wp:tag_slug><![CDATA[lambda]]></wp:tag_slug>
		<wp:tag_name><![CDATA[lambda]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>29</wp:term_id>
		<wp:tag_slug><![CDATA[layui]]></wp:tag_slug>
		<wp:tag_name><![CDATA[layui]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>31</wp:term_id>
		<wp:tag_slug><![CDATA[layuiadmin]]></wp:tag_slug>
		<wp:tag_name><![CDATA[layuiAdmin]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>21</wp:term_id>
		<wp:tag_slug><![CDATA[linux]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Linux]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>130</wp:term_id>
		<wp:tag_slug><![CDATA[markdown]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Markdown]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>22</wp:term_id>
		<wp:tag_slug><![CDATA[mysql]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mysql]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>113</wp:term_id>
		<wp:tag_slug><![CDATA[nextcloud]]></wp:tag_slug>
		<wp:tag_name><![CDATA[nextcloud]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>124</wp:term_id>
		<wp:tag_slug><![CDATA[nexttick]]></wp:tag_slug>
		<wp:tag_name><![CDATA[nextTick]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>16</wp:term_id>
		<wp:tag_slug><![CDATA[nginx]]></wp:tag_slug>
		<wp:tag_name><![CDATA[nginx]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>15</wp:term_id>
		<wp:tag_slug><![CDATA[php]]></wp:tag_slug>
		<wp:tag_name><![CDATA[php]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[php-fpm]]></wp:tag_slug>
		<wp:tag_name><![CDATA[php-fpm]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>45</wp:term_id>
		<wp:tag_slug><![CDATA[php7]]></wp:tag_slug>
		<wp:tag_name><![CDATA[php7]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>24</wp:term_id>
		<wp:tag_slug><![CDATA[phpmyadmin]]></wp:tag_slug>
		<wp:tag_name><![CDATA[phpMyAdmin]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>62</wp:term_id>
		<wp:tag_slug><![CDATA[phpunit]]></wp:tag_slug>
		<wp:tag_name><![CDATA[phpunit]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>135</wp:term_id>
		<wp:tag_slug><![CDATA[pow]]></wp:tag_slug>
		<wp:tag_name><![CDATA[POW]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>67</wp:term_id>
		<wp:tag_slug><![CDATA[python]]></wp:tag_slug>
		<wp:tag_name><![CDATA[python]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>97</wp:term_id>
		<wp:tag_slug><![CDATA[pythonocc]]></wp:tag_slug>
		<wp:tag_name><![CDATA[pythonocc]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>39</wp:term_id>
		<wp:tag_slug><![CDATA[reactjs]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ReactJS]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>111</wp:term_id>
		<wp:tag_slug><![CDATA[redis]]></wp:tag_slug>
		<wp:tag_name><![CDATA[redis]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>117</wp:term_id>
		<wp:tag_slug><![CDATA[serverless]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Serverless]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>93</wp:term_id>
		<wp:tag_slug><![CDATA[stl]]></wp:tag_slug>
		<wp:tag_name><![CDATA[stl]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>91</wp:term_id>
		<wp:tag_slug><![CDATA[stp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[stp]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>57</wp:term_id>
		<wp:tag_slug><![CDATA[style]]></wp:tag_slug>
		<wp:tag_name><![CDATA[style]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>40</wp:term_id>
		<wp:tag_slug><![CDATA[svn]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SVN]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>115</wp:term_id>
		<wp:tag_slug><![CDATA[syncting]]></wp:tag_slug>
		<wp:tag_name><![CDATA[syncting]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>108</wp:term_id>
		<wp:tag_slug><![CDATA[tensorflow]]></wp:tag_slug>
		<wp:tag_name><![CDATA[TensorFlow]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>96</wp:term_id>
		<wp:tag_slug><![CDATA[three-js]]></wp:tag_slug>
		<wp:tag_name><![CDATA[three.js]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>128</wp:term_id>
		<wp:tag_slug><![CDATA[utools]]></wp:tag_slug>
		<wp:tag_name><![CDATA[utools]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>44</wp:term_id>
		<wp:tag_slug><![CDATA[vbot]]></wp:tag_slug>
		<wp:tag_name><![CDATA[vbot]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>26</wp:term_id>
		<wp:tag_slug><![CDATA[video]]></wp:tag_slug>
		<wp:tag_name><![CDATA[video]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>66</wp:term_id>
		<wp:tag_slug><![CDATA[vim]]></wp:tag_slug>
		<wp:tag_name><![CDATA[vim]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[vmware]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Vmware]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>123</wp:term_id>
		<wp:tag_slug><![CDATA[vue]]></wp:tag_slug>
		<wp:tag_name><![CDATA[vue]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>133</wp:term_id>
		<wp:tag_slug><![CDATA[web3]]></wp:tag_slug>
		<wp:tag_name><![CDATA[web3]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>89</wp:term_id>
		<wp:tag_slug><![CDATA[web3d]]></wp:tag_slug>
		<wp:tag_name><![CDATA[web3d]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>47</wp:term_id>
		<wp:tag_slug><![CDATA[yum]]></wp:tag_slug>
		<wp:tag_name><![CDATA[yum]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>82</wp:term_id>
		<wp:tag_slug><![CDATA[%e4%bb%a3%e4%bb%b7%e5%87%bd%e6%95%b0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[代价函数]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>75</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%81%8f%e5%af%bc%e6%95%b0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[偏导数]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>83</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%85%b3%e7%b3%bb%e5%bc%8f]]></wp:tag_slug>
		<wp:tag_name><![CDATA[关系式]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>112</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%86%85%e5%ad%98%e5%8d%a0%e7%94%a8]]></wp:tag_slug>
		<wp:tag_name><![CDATA[内存占用]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>35</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%8a%a8%e6%80%81%e7%bb%91%e5%ae%9a]]></wp:tag_slug>
		<wp:tag_name><![CDATA[动态绑定]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>132</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%8c%ba%e5%9d%97%e9%93%be]]></wp:tag_slug>
		<wp:tag_name><![CDATA[区块链]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>63</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95]]></wp:tag_slug>
		<wp:tag_name><![CDATA[单元测试]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>102</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c]]></wp:tag_slug>
		<wp:tag_name><![CDATA[卷积神经网络]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>20</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%8f%82%e6%95%b0%e8%8e%b7%e5%8f%96]]></wp:tag_slug>
		<wp:tag_name><![CDATA[参数获取]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>107</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%8f%8d%e5%90%91%e9%80%92%e6%8e%a8%e5%85%b3%e7%b3%bb%e5%bc%8f]]></wp:tag_slug>
		<wp:tag_name><![CDATA[反向递推关系式]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>114</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%90%8c%e6%ad%a5]]></wp:tag_slug>
		<wp:tag_name><![CDATA[同步]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>72</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%90%91%e9%87%8f]]></wp:tag_slug>
		<wp:tag_name><![CDATA[向量]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>84</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%91%bd%e5%90%8d%e8%a7%84%e5%88%99]]></wp:tag_slug>
		<wp:tag_name><![CDATA[命名规则]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>80</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%a4%8d%e5%90%88%e5%87%bd%e6%95%b0%e6%b1%82%e5%af%bc]]></wp:tag_slug>
		<wp:tag_name><![CDATA[复合函数求导]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>61</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%a4%9a%e4%ba%ba%e5%8d%8f%e4%bd%9c]]></wp:tag_slug>
		<wp:tag_name><![CDATA[多人协作]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>78</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%a4%9a%e5%8f%98%e9%87%8f%e5%87%bd%e6%95%b0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[多变量函数]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>34</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%ae%89%e5%85%a8]]></wp:tag_slug>
		<wp:tag_name><![CDATA[安全]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>58</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%af%bc%e5%87%ba%e6%a0%b7%e5%bc%8f]]></wp:tag_slug>
		<wp:tag_name><![CDATA[导出样式]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>74</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%af%bc%e6%95%b0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[导数]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>3</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%b0%8f%e7%a8%8b%e5%ba%8f]]></wp:tag_slug>
		<wp:tag_name><![CDATA[小程序]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>70</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86]]></wp:tag_slug>
		<wp:tag_name><![CDATA[异常处理]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>43</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%be%ae%e4%bf%a1%e5%ae%a2%e6%9c%8d]]></wp:tag_slug>
		<wp:tag_name><![CDATA[微信客服]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>4</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%be%ae%e4%bf%a1%e5%bc%80%e5%8f%91]]></wp:tag_slug>
		<wp:tag_name><![CDATA[微信开发]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>125</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%80%bb%e7%bb%93]]></wp:tag_slug>
		<wp:tag_name><![CDATA[总结]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>110</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%89%8b%e5%86%99%e8%af%86%e5%88%ab]]></wp:tag_slug>
		<wp:tag_name><![CDATA[手写识别]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>76</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%8b%89%e6%a0%bc%e6%9c%97%e6%97%a5]]></wp:tag_slug>
		<wp:tag_name><![CDATA[拉格朗日]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>129</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%8f%92%e4%bb%b6]]></wp:tag_slug>
		<wp:tag_name><![CDATA[插件]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>138</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f]]></wp:tag_slug>
		<wp:tag_name><![CDATA[操作系统]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>59</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%94%b9%e9%80%a0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[改造]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>88</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%95%a3%e5%88%97%e8%a1%a8]]></wp:tag_slug>
		<wp:tag_name><![CDATA[散列表]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>140</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%95%b0%e6%8d%ae%e5%ba%93]]></wp:tag_slug>
		<wp:tag_name><![CDATA[数据库]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>65</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b]]></wp:tag_slug>
		<wp:tag_name><![CDATA[数据类型]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>86</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84]]></wp:tag_slug>
		<wp:tag_name><![CDATA[数据结构]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>14</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[文件上传]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>127</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%97%85%e8%a1%8c]]></wp:tag_slug>
		<wp:tag_name><![CDATA[旅行]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>41</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%97%a0%e9%99%90%e7%ba%a7%e5%88%86%e7%b1%bb]]></wp:tag_slug>
		<wp:tag_name><![CDATA[无限级分类]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>69</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[机器学习]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>77</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%9e%81%e5%80%bc]]></wp:tag_slug>
		<wp:tag_name><![CDATA[极值]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>90</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%a0%bc%e5%bc%8f%e8%bd%ac%e6%8d%a2]]></wp:tag_slug>
		<wp:tag_name><![CDATA[格式转换]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>79</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d]]></wp:tag_slug>
		<wp:tag_name><![CDATA[梯度下降]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>98</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%a8%a1%e5%9e%8b%e5%8e%8b%e7%bc%a9]]></wp:tag_slug>
		<wp:tag_name><![CDATA[模型压缩]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>104</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%b1%a0%e5%8c%96]]></wp:tag_slug>
		<wp:tag_name><![CDATA[池化]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>71</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[深度学习]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>105</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%89%b9%e5%be%81%e6%98%a0%e5%b0%84]]></wp:tag_slug>
		<wp:tag_name><![CDATA[特征映射]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>109</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%ae]]></wp:tag_slug>
		<wp:tag_name><![CDATA[环境配置]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>73</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%9f%a9%e9%98%b5]]></wp:tag_slug>
		<wp:tag_name><![CDATA[矩阵]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>99</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%a5%9e%e7%bb%8f%e5%8d%95%e5%85%83%e8%af%af%e5%b7%ae]]></wp:tag_slug>
		<wp:tag_name><![CDATA[神经单元误差]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>52</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%b4%a2%e5%bc%95]]></wp:tag_slug>
		<wp:tag_name><![CDATA[索引]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>54</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86]]></wp:tag_slug>
		<wp:tag_name><![CDATA[索引原理]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>12</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%bd%91%e5%8d%a1]]></wp:tag_slug>
		<wp:tag_name><![CDATA[网卡]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%a7%86%e9%a2%91%e6%b5%81]]></wp:tag_slug>
		<wp:tag_name><![CDATA[视频流]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>139</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bb%84%e6%88%90%e7%bb%93%e6%9e%84]]></wp:tag_slug>
		<wp:tag_name><![CDATA[计算机组成结构]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>101</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%af%af%e5%b7%ae%e5%8f%8d%e5%90%91%e4%bc%a0%e6%92%ad%e6%b3%95]]></wp:tag_slug>
		<wp:tag_name><![CDATA[误差反向传播法]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>36</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%b7%a8%e8%a1%a8]]></wp:tag_slug>
		<wp:tag_name><![CDATA[跨表]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>30</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%b8%a9%e5%9d%91]]></wp:tag_slug>
		<wp:tag_name><![CDATA[踩坑]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>137</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%bd%af%e8%80%83]]></wp:tag_slug>
		<wp:tag_name><![CDATA[软考]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>103</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%bf%87%e6%bb%a4%e5%99%a8]]></wp:tag_slug>
		<wp:tag_name><![CDATA[过滤器]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>81</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%bf%91%e4%bc%bc%e5%85%ac%e5%bc%8f]]></wp:tag_slug>
		<wp:tag_name><![CDATA[近似公式]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>51</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%bf%ad%e4%bb%a3%e5%99%a8]]></wp:tag_slug>
		<wp:tag_name><![CDATA[迭代器]]></wp:tag_name>
	</wp:tag>
	<wp:term>
		<wp:term_id><![CDATA[126]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[2020]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[2020]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[apache]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[apache]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[49]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[apply]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[apply]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[50]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[array]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[array]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[120]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[authorization]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[authorization]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[118]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[aws]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[aws]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[53]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[b-tree]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[B+ tree]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[100]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[BP]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[106]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bp%e7%ae%97%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[BP算法]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[119]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cloudfront]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[cloudfront]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[95]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ctm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ctm]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[eth0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[eth0]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[55]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[excel]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[excel]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ffmpeg]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ffmpeg]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[fileupload]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[fileupload]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[134]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[gasprice]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[gasPrice]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[60]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[git]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[git]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[94]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[gltf]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[gltf]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[87]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hash]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Hash]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[92]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[iges]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[iges]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ios]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ios]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[64]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[javascript]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[JavaScript]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[48]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[js]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[js]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[56]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[js-xlsx]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[js-xlsx]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[33]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[kali]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[kali]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[122]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[lambda]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[lambda]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[38]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[language-menu]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Language Menu]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[layui]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[layui]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[layuiadmin]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[layuiAdmin]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linux]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Linux]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linux]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Linux]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[37]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[main-menu]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Main Menu]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[130]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[markdown]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Markdown]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mysql]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mysql]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mysql]]></wp:term_slug>
		<wp:term_parent><![CDATA[linux]]></wp:term_parent>
		<wp:term_name><![CDATA[mysql]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[113]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[nextcloud]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[nextcloud]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[124]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[nexttick]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[nextTick]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[nginx]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[nginx]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[php]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[php]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[php-fpm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[php-fpm]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[45]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[php7]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[php7]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[phpmyadmin]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[phpMyAdmin]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[62]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[phpunit]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[phpunit]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[135]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pow]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[POW]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[67]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[python]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[97]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pythonocc]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[pythonocc]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[39]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[reactjs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ReactJS]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[111]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[redis]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[redis]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[117]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[serverless]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Serverless]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[93]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[stl]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[stl]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[91]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[stp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[stp]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[57]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[style]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[style]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[40]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[svn]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SVN]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[115]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[syncting]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[syncting]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[108]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tensorflow]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[TensorFlow]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[96]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[three-js]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[three.js]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[128]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[utools]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[utools]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[44]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vbot]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[vbot]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[video]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[video]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[66]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vim]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[vim]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vmware]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Vmware]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[123]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vue]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[vue]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[133]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[web3]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[web3]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[89]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[web3d]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[web3d]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[47]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[yum]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[yum]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[82]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e4%bb%a3%e4%bb%b7%e5%87%bd%e6%95%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[代价函数]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[75]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%81%8f%e5%af%bc%e6%95%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[偏导数]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[83]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%85%b3%e7%b3%bb%e5%bc%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[关系式]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[112]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%86%85%e5%ad%98%e5%8d%a0%e7%94%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[内存占用]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[web-front]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[前端开发]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[35]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8a%a8%e6%80%81%e7%bb%91%e5%ae%9a]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[动态绑定]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[131]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8c%ba%e5%9d%97%e9%93%be]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[区块链]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[132]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8c%ba%e5%9d%97%e9%93%be]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[区块链]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[63]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[单元测试]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[102]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[卷积神经网络]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8f%82%e6%95%b0%e8%8e%b7%e5%8f%96]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[参数获取]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[107]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8f%8d%e5%90%91%e9%80%92%e6%8e%a8%e5%85%b3%e7%b3%bb%e5%bc%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[反向递推关系式]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[114]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%90%8c%e6%ad%a5]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[同步]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[web-background]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[后端开发]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[72]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%90%91%e9%87%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[向量]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[84]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%91%bd%e5%90%8d%e8%a7%84%e5%88%99]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[命名规则]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[136]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[基础知识]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[80]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%a4%8d%e5%90%88%e5%87%bd%e6%95%b0%e6%b1%82%e5%af%bc]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[复合函数求导]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[61]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%a4%9a%e4%ba%ba%e5%8d%8f%e4%bd%9c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[多人协作]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[78]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%a4%9a%e5%8f%98%e9%87%8f%e5%87%bd%e6%95%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[多变量函数]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[34]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%ae%89%e5%85%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[安全]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[32]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%ae%89%e5%85%a8%e7%9b%b8%e5%85%b3]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[安全相关]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[58]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%af%bc%e5%87%ba%e6%a0%b7%e5%bc%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[导出样式]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[74]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%af%bc%e6%95%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[导数]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%b0%8f%e7%a8%8b%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[小程序]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[70]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[异常处理]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[43]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%be%ae%e4%bf%a1%e5%ae%a2%e6%9c%8d]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[微信客服]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%be%ae%e4%bf%a1%e5%bc%80%e5%8f%91]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[微信开发]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wechat]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[微信相关]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[125]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%80%bb%e7%bb%93]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[总结]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[110]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%89%8b%e5%86%99%e8%af%86%e5%88%ab]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[手写识别]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[76]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%8b%89%e6%a0%bc%e6%9c%97%e6%97%a5]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[拉格朗日]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[129]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%8f%92%e4%bb%b6]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[插件]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[138]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[操作系统]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[59]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%94%b9%e9%80%a0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[改造]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[88]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%a3%e5%88%97%e8%a1%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[散列表]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[140]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e6%8d%ae%e5%ba%93]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[数据库]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[65]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[数据类型]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[86]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[数据结构]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[文件上传]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[127]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%97%85%e8%a1%8c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[旅行]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[41]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%97%a0%e9%99%90%e7%ba%a7%e5%88%86%e7%b1%bb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[无限级分类]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[未分类]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[68]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[机器学习]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[69]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[机器学习]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[77]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9e%81%e5%80%bc]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[极值]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[90]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a0%bc%e5%bc%8f%e8%bd%ac%e6%8d%a2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[格式转换]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[79]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[梯度下降]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[98]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a8%a1%e5%9e%8b%e5%8e%8b%e7%bc%a9]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[模型压缩]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[104]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%b1%a0%e5%8c%96]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[池化]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[71]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[深度学习]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[105]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%89%b9%e5%be%81%e6%98%a0%e5%b0%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[特征映射]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[109]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%ae]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[环境配置]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[73]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%9f%a9%e9%98%b5]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[矩阵]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[99]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%a5%9e%e7%bb%8f%e5%8d%95%e5%85%83%e8%af%af%e5%b7%ae]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[神经单元误差]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[85]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[算法]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[52]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%b4%a2%e5%bc%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[索引]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[54]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[索引原理]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%bd%91%e5%8d%a1]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[网卡]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%a7%86%e9%a2%91%e6%b5%81]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[视频流]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[139]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bb%84%e6%88%90%e7%bb%93%e6%9e%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[计算机组成结构]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[101]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%af%af%e5%b7%ae%e5%8f%8d%e5%90%91%e4%bc%a0%e6%92%ad%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[误差反向传播法]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[36]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%b7%a8%e8%a1%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[跨表]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%b8%a9%e5%9d%91]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[踩坑]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[137]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%bd%af%e8%80%83]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[软考]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[103]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%bf%87%e6%bb%a4%e5%99%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[过滤器]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[81]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%bf%91%e4%bc%bc%e5%85%ac%e5%bc%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[近似公式]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[51]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%bf%ad%e4%bb%a3%e5%99%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[迭代器]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[46]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%9a%8f%e7%ac%94]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[随笔]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[顶部菜单]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95%ef%bc%882%ef%bc%89]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[顶部菜单（2）]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[121]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[elasticsearch]]></wp:term_slug>
		<wp:term_parent><![CDATA[linux]]></wp:term_parent>
		<wp:term_name><![CDATA[ElasticSearch]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[116]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[serverless]]></wp:term_slug>
		<wp:term_parent><![CDATA[web-background]]></wp:term_parent>
		<wp:term_name><![CDATA[Serverless]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[42]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vbot]]></wp:term_slug>
		<wp:term_parent><![CDATA[wechat]]></wp:term_parent>
		<wp:term_name><![CDATA[vbot]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[wechat]]></wp:term_parent>
		<wp:term_name><![CDATA[微信小程序]]></wp:term_name>
	</wp:term>
	<wp:term><wp:term_id>38</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[language-menu]]></wp:term_slug><wp:term_name><![CDATA[Language Menu]]></wp:term_name>
</wp:term>
	<wp:term><wp:term_id>37</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[main-menu]]></wp:term_slug><wp:term_name><![CDATA[Main Menu]]></wp:term_name>
</wp:term>
	<wp:term><wp:term_id>5</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95]]></wp:term_slug><wp:term_name><![CDATA[顶部菜单]]></wp:term_name>
</wp:term>
	<wp:term><wp:term_id>9</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95%ef%bc%882%ef%bc%89]]></wp:term_slug><wp:term_name><![CDATA[顶部菜单（2）]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=5.0.16</generator>

<image>
	<url>https://blog.wj2015.com/wp-content/uploads/2017/11/cropped-头像-1-32x32.jpg</url>
	<title>Jeffrey Wang的个人博客</title>
	<link>https://blog.wj2015.com</link>
	<width>32</width>
	<height>32</height>
</image> 

	<item>
		<title>头像</title>
		<link>https://blog.wj2015.com/%e5%a4%b4%e5%83%8f/</link>
		<pubDate>Thu, 30 Nov 2017 06:50:24 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/11/头像.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date><![CDATA[2017-11-30 14:50:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-30 06:50:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a4%b4%e5%83%8f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/11/头像.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/11/头像.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:18:"2017/11/头像.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"头像-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"头像-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"445a927db38e888276a96c16f8c13e94";a:2:{s:7:"expires";i:1582004628;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[22]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-头像.jpg</title>
		<link>https://blog.wj2015.com/cropped-%e5%a4%b4%e5%83%8f-jpg/</link>
		<pubDate>Thu, 30 Nov 2017 06:50:33 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/11/cropped-头像.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/11/cropped-头像.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date><![CDATA[2017-11-30 14:50:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-30 06:50:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-%e5%a4%b4%e5%83%8f-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/11/cropped-头像.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/11/cropped-头像.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:26:"2017/11/cropped-头像.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"cropped-头像-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"cropped-头像-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_5f87aaca7f2da028c29d0735207baaec]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"445a927db38e888276a96c16f8c13e94";a:2:{s:7:"expires";i:1573033869;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>注册页面</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e6%b3%a8%e5%86%8c%e9%a1%b5%e9%9d%a2/</link>
		<pubDate>Sat, 02 Dec 2017 02:29:21 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/注册页面.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[注册]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 10:29:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 02:29:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b3%a8%e5%86%8c%e9%a1%b5%e9%9d%a2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/注册页面.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/注册页面.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1904;s:6:"height";i:907;s:4:"file";s:24:"2017/12/注册页面.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"注册页面-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:24:"注册页面-300x143.jpg";s:5:"width";i:300;s:6:"height";i:143;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:24:"注册页面-768x366.jpg";s:5:"width";i:768;s:6:"height";i:366;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:25:"注册页面-1024x488.jpg";s:5:"width";i:1024;s:6:"height";i:488;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>扫码登陆</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e6%89%ab%e7%a0%81%e7%99%bb%e9%99%86/</link>
		<pubDate>Sat, 02 Dec 2017 02:36:16 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/扫码登陆.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 10:36:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 02:36:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%89%ab%e7%a0%81%e7%99%bb%e9%99%86]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/扫码登陆.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/扫码登陆.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1902;s:6:"height";i:910;s:4:"file";s:24:"2017/12/扫码登陆.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"扫码登陆-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"扫码登陆-300x144.png";s:5:"width";i:300;s:6:"height";i:144;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:24:"扫码登陆-768x367.png";s:5:"width";i:768;s:6:"height";i:367;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:25:"扫码登陆-1024x490.png";s:5:"width";i:1024;s:6:"height";i:490;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>登陆页面</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e7%99%bb%e9%99%86%e9%a1%b5%e9%9d%a2/</link>
		<pubDate>Sat, 02 Dec 2017 02:36:33 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/登陆页面.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[登陆页面]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 10:36:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 02:36:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%99%bb%e9%99%86%e9%a1%b5%e9%9d%a2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/登陆页面.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/登陆页面.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:907;s:4:"file";s:24:"2017/12/登陆页面.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"登陆页面-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:24:"登陆页面-300x142.jpg";s:5:"width";i:300;s:6:"height";i:142;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:24:"登陆页面-768x363.jpg";s:5:"width";i:768;s:6:"height";i:363;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:25:"登陆页面-1024x484.jpg";s:5:"width";i:1024;s:6:"height";i:484;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>开发设置</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%bc%80%e5%8f%91%e8%ae%be%e7%bd%ae/</link>
		<pubDate>Sat, 02 Dec 2017 02:41:01 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/开发设置.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[开发设置]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 10:41:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 02:41:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bc%80%e5%8f%91%e8%ae%be%e7%bd%ae]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/开发设置.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/开发设置.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1903;s:6:"height";i:908;s:4:"file";s:24:"2017/12/开发设置.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"开发设置-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"开发设置-300x143.png";s:5:"width";i:300;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:24:"开发设置-768x366.png";s:5:"width";i:768;s:6:"height";i:366;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:25:"开发设置-1024x489.png";s:5:"width";i:1024;s:6:"height";i:489;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>安装过程-1</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%ae%89%e8%a3%85%e8%bf%87%e7%a8%8b-1/</link>
		<pubDate>Sat, 02 Dec 2017 02:58:35 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 10:58:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 02:58:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%89%e8%a3%85%e8%bf%87%e7%a8%8b-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/安装过程-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:623;s:6:"height";i:450;s:4:"file";s:26:"2017/12/安装过程-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"安装过程-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"安装过程-1-300x217.png";s:5:"width";i:300;s:6:"height";i:217;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>安装过程-2</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%ae%89%e8%a3%85%e8%bf%87%e7%a8%8b-2/</link>
		<pubDate>Sat, 02 Dec 2017 02:58:36 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 10:58:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 02:58:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%89%e8%a3%85%e8%bf%87%e7%a8%8b-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/安装过程-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:623;s:6:"height";i:450;s:4:"file";s:26:"2017/12/安装过程-2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"安装过程-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"安装过程-2-300x217.png";s:5:"width";i:300;s:6:"height";i:217;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>安装过程-3</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%ae%89%e8%a3%85%e8%bf%87%e7%a8%8b-3/</link>
		<pubDate>Sat, 02 Dec 2017 02:58:36 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 10:58:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 02:58:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%89%e8%a3%85%e8%bf%87%e7%a8%8b-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/安装过程-3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:623;s:6:"height";i:450;s:4:"file";s:26:"2017/12/安装过程-3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"安装过程-3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"安装过程-3-300x217.png";s:5:"width";i:300;s:6:"height";i:217;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>安装过程-4</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%ae%89%e8%a3%85%e8%bf%87%e7%a8%8b-4/</link>
		<pubDate>Sat, 02 Dec 2017 02:58:37 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 10:58:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 02:58:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%89%e8%a3%85%e8%bf%87%e7%a8%8b-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/安装过程-4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:623;s:6:"height";i:450;s:4:"file";s:26:"2017/12/安装过程-4.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"安装过程-4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"安装过程-4-300x217.png";s:5:"width";i:300;s:6:"height";i:217;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>小程序开发工具-下载</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-%e4%b8%8b%e8%bd%bd/</link>
		<pubDate>Sat, 02 Dec 2017 03:00:17 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-下载.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 11:00:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 03:00:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-%e4%b8%8b%e8%bd%bd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-下载.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/小程序开发工具-下载.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1031;s:4:"file";s:40:"2017/12/小程序开发工具-下载.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"小程序开发工具-下载-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:40:"小程序开发工具-下载-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:40:"小程序开发工具-下载-768x412.png";s:5:"width";i:768;s:6:"height";i:412;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:41:"小程序开发工具-下载-1024x550.png";s:5:"width";i:1024;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>工具-登陆页</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b7%a5%e5%85%b7-%e7%99%bb%e9%99%86%e9%a1%b5/</link>
		<pubDate>Sat, 02 Dec 2017 03:05:14 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/工具-登陆页.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 11:05:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 03:05:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b7%a5%e5%85%b7-%e7%99%bb%e9%99%86%e9%a1%b5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/工具-登陆页.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/工具-登陆页.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:419;s:6:"height";i:593;s:4:"file";s:28:"2017/12/工具-登陆页.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"工具-登陆页-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"工具-登陆页-212x300.png";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>工具-配置小程序路径</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b7%a5%e5%85%b7-%e9%85%8d%e7%bd%ae%e5%b0%8f%e7%a8%8b%e5%ba%8f%e8%b7%af%e5%be%84/</link>
		<pubDate>Sat, 02 Dec 2017 03:05:15 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/工具-配置小程序路径.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 11:05:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 03:05:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b7%a5%e5%85%b7-%e9%85%8d%e7%bd%ae%e5%b0%8f%e7%a8%8b%e5%ba%8f%e8%b7%af%e5%be%84]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/工具-配置小程序路径.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/工具-配置小程序路径.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:515;s:6:"height";i:593;s:4:"file";s:40:"2017/12/工具-配置小程序路径.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"工具-配置小程序路径-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:40:"工具-配置小程序路径-261x300.png";s:5:"width";i:261;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>工具-新建小程序</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b7%a5%e5%85%b7-%e6%96%b0%e5%bb%ba%e5%b0%8f%e7%a8%8b%e5%ba%8f/</link>
		<pubDate>Sat, 02 Dec 2017 03:05:15 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/工具-新建小程序.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 11:05:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 03:05:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b7%a5%e5%85%b7-%e6%96%b0%e5%bb%ba%e5%b0%8f%e7%a8%8b%e5%ba%8f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/工具-新建小程序.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/工具-新建小程序.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:784;s:6:"height";i:593;s:4:"file";s:34:"2017/12/工具-新建小程序.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"工具-新建小程序-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"工具-新建小程序-300x227.png";s:5:"width";i:300;s:6:"height";i:227;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"工具-新建小程序-768x581.png";s:5:"width";i:768;s:6:"height";i:581;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>工具-选择小程序</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b7%a5%e5%85%b7-%e9%80%89%e6%8b%a9%e5%b0%8f%e7%a8%8b%e5%ba%8f/</link>
		<pubDate>Sat, 02 Dec 2017 03:05:16 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/工具-选择小程序.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 11:05:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 03:05:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b7%a5%e5%85%b7-%e9%80%89%e6%8b%a9%e5%b0%8f%e7%a8%8b%e5%ba%8f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/工具-选择小程序.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/工具-选择小程序.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:419;s:6:"height";i:593;s:4:"file";s:34:"2017/12/工具-选择小程序.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"工具-选择小程序-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"工具-选择小程序-212x300.png";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>小程序开发工具-首图</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-%e9%a6%96%e5%9b%be/</link>
		<pubDate>Sat, 02 Dec 2017 03:20:49 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-首图.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 11:20:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 03:20:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-%e9%a6%96%e5%9b%be]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-首图.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/小程序开发工具-首图.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1030;s:4:"file";s:40:"2017/12/小程序开发工具-首图.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"小程序开发工具-首图-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:40:"小程序开发工具-首图-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:40:"小程序开发工具-首图-768x412.png";s:5:"width";i:768;s:6:"height";i:412;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:41:"小程序开发工具-首图-1024x549.png";s:5:"width";i:1024;s:6:"height";i:549;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>小程序开发工具-ctrl+shift+c</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-ctrlshiftc/</link>
		<pubDate>Sat, 02 Dec 2017 03:32:39 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-ctrlshiftc.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 11:32:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 03:32:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-ctrlshiftc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-ctrlshiftc.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/小程序开发工具-ctrlshiftc.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1030;s:4:"file";s:44:"2017/12/小程序开发工具-ctrlshiftc.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"小程序开发工具-ctrlshiftc-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:44:"小程序开发工具-ctrlshiftc-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:44:"小程序开发工具-ctrlshiftc-768x412.png";s:5:"width";i:768;s:6:"height";i:412;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:45:"小程序开发工具-ctrlshiftc-1024x549.png";s:5:"width";i:1024;s:6:"height";i:549;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>小程序开发工具-编辑器区</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-%e7%bc%96%e8%be%91%e5%99%a8%e5%8c%ba/</link>
		<pubDate>Sat, 02 Dec 2017 03:34:55 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-编辑器区.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 11:34:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 03:34:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-%e7%bc%96%e8%be%91%e5%99%a8%e5%8c%ba]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-编辑器区.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/小程序开发工具-编辑器区.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1269;s:6:"height";i:638;s:4:"file";s:46:"2017/12/小程序开发工具-编辑器区.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:46:"小程序开发工具-编辑器区-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:46:"小程序开发工具-编辑器区-300x151.png";s:5:"width";i:300;s:6:"height";i:151;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:46:"小程序开发工具-编辑器区-768x386.png";s:5:"width";i:768;s:6:"height";i:386;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:47:"小程序开发工具-编辑器区-1024x515.png";s:5:"width";i:1024;s:6:"height";i:515;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>小程序开发工具-network-http报文</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-network-http%e6%8a%a5%e6%96%87/</link>
		<pubDate>Sat, 02 Dec 2017 03:35:32 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-network-http报文.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 11:35:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 03:35:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-network-http%e6%8a%a5%e6%96%87]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-network-http报文.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/小程序开发工具-network-http报文.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1276;s:6:"height";i:446;s:4:"file";s:52:"2017/12/小程序开发工具-network-http报文.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:52:"小程序开发工具-network-http报文-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:52:"小程序开发工具-network-http报文-300x105.png";s:5:"width";i:300;s:6:"height";i:105;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:52:"小程序开发工具-network-http报文-768x268.png";s:5:"width";i:768;s:6:"height";i:268;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:53:"小程序开发工具-network-http报文-1024x358.png";s:5:"width";i:1024;s:6:"height";i:358;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-头像-1.jpg</title>
		<link>https://blog.wj2015.com/cropped-%e5%a4%b4%e5%83%8f-1-jpg/</link>
		<pubDate>Sat, 02 Dec 2017 05:26:41 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/11/cropped-头像-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/11/cropped-头像-1.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 13:26:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 05:26:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-%e5%a4%b4%e5%83%8f-1-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/11/cropped-头像-1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/11/cropped-头像-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:28:"2017/11/cropped-头像-1.jpg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"cropped-头像-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:28:"cropped-头像-1-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-270";a:4:{s:4:"file";s:28:"cropped-头像-1-270x270.jpg";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-192";a:4:{s:4:"file";s:28:"cropped-头像-1-192x192.jpg";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-180";a:4:{s:4:"file";s:28:"cropped-头像-1-180x180.jpg";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:10:"image/jpeg";}s:12:"site_icon-32";a:4:{s:4:"file";s:26:"cropped-头像-1-32x32.jpg";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_9bd0429f7a5250d38f3cc079d7861b05]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"445a927db38e888276a96c16f8c13e94";a:2:{s:7:"expires";i:1573933955;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-头像-2.jpg</title>
		<link>https://blog.wj2015.com/cropped-%e5%a4%b4%e5%83%8f-2-jpg/</link>
		<pubDate>Sat, 02 Dec 2017 05:28:30 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/11/cropped-头像-2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/11/cropped-头像-2.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 13:28:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 05:28:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-%e5%a4%b4%e5%83%8f-2-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/11/cropped-头像-2.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/11/cropped-头像-2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:28:"2017/11/cropped-头像-2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"cropped-头像-2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:28:"cropped-头像-2-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_cd2a118311ffecffca62ce333aa70878]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"445a927db38e888276a96c16f8c13e94";a:2:{s:7:"expires";i:1580836759;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>工具-新建普通快速小程序</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b7%a5%e5%85%b7-%e6%96%b0%e5%bb%ba%e6%99%ae%e9%80%9a%e5%bf%ab%e9%80%9f%e5%b0%8f%e7%a8%8b%e5%ba%8f/</link>
		<pubDate>Sat, 02 Dec 2017 06:52:46 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/工具-新建普通快速小程序.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 14:52:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 06:52:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b7%a5%e5%85%b7-%e6%96%b0%e5%bb%ba%e6%99%ae%e9%80%9a%e5%bf%ab%e9%80%9f%e5%b0%8f%e7%a8%8b%e5%ba%8f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/工具-新建普通快速小程序.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/工具-新建普通快速小程序.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:528;s:6:"height";i:637;s:4:"file";s:46:"2017/12/工具-新建普通快速小程序.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:46:"工具-新建普通快速小程序-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:46:"工具-新建普通快速小程序-249x300.png";s:5:"width";i:249;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>小程序开发工具-首图-2</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-%e9%a6%96%e5%9b%be-2/</link>
		<pubDate>Sat, 02 Dec 2017 06:54:13 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-首图-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 14:54:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 06:54:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7-%e9%a6%96%e5%9b%be-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>10</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-首图-2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/小程序开发工具-首图-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1030;s:4:"file";s:42:"2017/12/小程序开发工具-首图-2.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"小程序开发工具-首图-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:42:"小程序开发工具-首图-2-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:42:"小程序开发工具-首图-2-768x412.png";s:5:"width";i:768;s:6:"height";i:412;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:43:"小程序开发工具-首图-2-1024x549.png";s:5:"width";i:1024;s:6:"height";i:549;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>基础结构图</title>
		<link>https://blog.wj2015.com/2017/12/03/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%872-%e6%b5%81%e7%a8%8b%e3%80%81%e6%a8%a1%e6%9d%bf%e3%80%81%e9%85%8d%e7%bd%ae/%e5%9f%ba%e7%a1%80%e7%bb%93%e6%9e%84%e5%9b%be/</link>
		<pubDate>Sat, 02 Dec 2017 07:10:50 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/基础结构图.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 15:10:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 07:10:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9f%ba%e7%a1%80%e7%bb%93%e6%9e%84%e5%9b%be]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>69</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/基础结构图.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/基础结构图.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1281;s:6:"height";i:642;s:4:"file";s:27:"2017/12/基础结构图.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"基础结构图-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"基础结构图-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:27:"基础结构图-768x385.png";s:5:"width";i:768;s:6:"height";i:385;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:28:"基础结构图-1024x513.png";s:5:"width";i:1024;s:6:"height";i:513;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tabbar</title>
		<link>https://blog.wj2015.com/2017/12/03/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%872-%e6%b5%81%e7%a8%8b%e3%80%81%e6%a8%a1%e6%9d%bf%e3%80%81%e9%85%8d%e7%bd%ae/tabbar/</link>
		<pubDate>Sat, 02 Dec 2017 07:38:26 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/tabbar.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 15:38:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 07:38:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tabbar]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>69</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/tabbar.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/tabbar.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2212;s:6:"height";i:1248;s:4:"file";s:18:"2017/12/tabbar.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"tabbar-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"tabbar-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:18:"tabbar-768x433.jpg";s:5:"width";i:768;s:6:"height";i:433;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:19:"tabbar-1024x578.jpg";s:5:"width";i:1024;s:6:"height";i:578;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>config</title>
		<link>https://blog.wj2015.com/2017/12/03/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%872-%e6%b5%81%e7%a8%8b%e3%80%81%e6%a8%a1%e6%9d%bf%e3%80%81%e9%85%8d%e7%bd%ae/config/</link>
		<pubDate>Sat, 02 Dec 2017 07:38:57 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/config.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 15:38:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 07:38:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[config]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>69</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/config.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/config.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2196;s:6:"height";i:2724;s:4:"file";s:18:"2017/12/config.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"config-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"config-242x300.jpg";s:5:"width";i:242;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:18:"config-768x953.jpg";s:5:"width";i:768;s:6:"height";i:953;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:19:"config-826x1024.jpg";s:5:"width";i:826;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>加载页面文件</title>
		<link>https://blog.wj2015.com/2017/12/03/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%872-%e6%b5%81%e7%a8%8b%e3%80%81%e6%a8%a1%e6%9d%bf%e3%80%81%e9%85%8d%e7%bd%ae/%e5%8a%a0%e8%bd%bd%e9%a1%b5%e9%9d%a2%e6%96%87%e4%bb%b6/</link>
		<pubDate>Sun, 03 Dec 2017 12:43:23 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/加载页面文件.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2017-12-03 20:43:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-03 12:43:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8a%a0%e8%bd%bd%e9%a1%b5%e9%9d%a2%e6%96%87%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>69</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/加载页面文件.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/加载页面文件.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1030;s:4:"file";s:30:"2017/12/加载页面文件.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"加载页面文件-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"加载页面文件-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:30:"加载页面文件-768x412.png";s:5:"width";i:768;s:6:"height";i:412;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:31:"加载页面文件-1024x549.png";s:5:"width";i:1024;s:6:"height";i:549;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>face</title>
		<link>https://blog.wj2015.com/2017/12/24/%e5%85%8b%e9%9a%86%e4%b8%bb%e6%9c%ba%e4%b9%8b%e5%90%8e%ef%bc%8clinux%e4%b8%8beth1%e5%a6%82%e4%bd%95%e6%94%b9%e4%b8%baeth0/face/</link>
		<pubDate>Sun, 24 Dec 2017 06:55:37 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2017/12/face.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2017-12-24 14:55:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-24 06:55:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[face]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>93</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2017/12/face-e1514101061532.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/12/face-e1514101061532.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:201;s:6:"height";i:217;s:4:"file";s:31:"2017/12/face-e1514101061532.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"face-e1514101061532-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"face-300x105.png";s:5:"width";i:300;s:6:"height";i:105;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:9:"full-orig";a:3:{s:5:"width";i:625;s:6:"height";i:218;s:4:"file";s:8:"face.png";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:16:"face-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:11:"medium-orig";a:4:{s:4:"file";s:16:"face-300x105.png";s:5:"width";i:300;s:6:"height";i:105;s:9:"mime-type";s:9:"image/png";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TIM截图20180307102409</title>
		<link>https://blog.wj2015.com/2018/03/07/nginxphp-fpm%e5%87%ba%e7%8e%b0%e6%97%a0%e6%b3%95%e8%8e%b7%e5%8f%96get%e5%8f%82%e6%95%b0%e9%97%ae%e9%a2%98%e7%9a%84%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95/tim%e6%88%aa%e5%9b%be20180307102409/</link>
		<pubDate>Wed, 07 Mar 2018 02:28:26 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/03/TIM截图20180307102409.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[faset_params正确配置]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date><![CDATA[2018-03-07 10:28:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-07 02:28:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tim%e6%88%aa%e5%9b%be20180307102409]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>121</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/03/TIM截图20180307102409.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:657;s:6:"height";i:543;s:4:"file";s:35:"2018/03/TIM截图20180307102409.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"TIM截图20180307102409-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:35:"TIM截图20180307102409-300x248.png";s:5:"width";i:300;s:6:"height";i:248;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/03/TIM截图20180307102409.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TIM截图20180307214117</title>
		<link>https://blog.wj2015.com/2018/03/07/mysql5-6%e9%83%a8%e5%88%86%e5%ad%97%e6%ae%b5%e6%97%a0%e9%bb%98%e8%ae%a4%e5%80%bc%e4%b8%8d%e8%83%bdinsert%e7%9a%84%e9%97%ae%e9%a2%98/tim%e6%88%aa%e5%9b%be20180307214117/</link>
		<pubDate>Wed, 07 Mar 2018 13:41:26 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/03/TIM截图20180307214117.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2018-03-07 21:41:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-07 13:41:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tim%e6%88%aa%e5%9b%be20180307214117]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>127</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/03/TIM截图20180307214117.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/03/TIM截图20180307214117.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:705;s:6:"height";i:614;s:4:"file";s:35:"2018/03/TIM截图20180307214117.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"TIM截图20180307214117-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:35:"TIM截图20180307214117-300x261.png";s:5:"width";i:300;s:6:"height";i:261;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TIM截图20180307211611</title>
		<link>https://blog.wj2015.com/2018/03/07/php5-6%e4%bd%bf%e7%94%a8utf8mb4%e6%8a%a5cant-initialize-character-set-utf8mb4/tim%e6%88%aa%e5%9b%be20180307211611/</link>
		<pubDate>Wed, 07 Mar 2018 13:41:50 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/03/TIM截图20180307211611.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date><![CDATA[2018-03-07 21:41:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-07 13:41:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tim%e6%88%aa%e5%9b%be20180307211611]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>125</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/03/TIM截图20180307211611.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/03/TIM截图20180307211611.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:938;s:6:"height";i:452;s:4:"file";s:35:"2018/03/TIM截图20180307211611.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"TIM截图20180307211611-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:35:"TIM截图20180307211611-300x145.png";s:5:"width";i:300;s:6:"height";i:145;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:35:"TIM截图20180307211611-768x370.png";s:5:"width";i:768;s:6:"height";i:370;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>f349197440ceed70b72a1276b3afa024</title>
		<link>https://blog.wj2015.com/2018/03/10/%e8%a7%a3%e5%86%b3phpmyadmin%e5%af%bc%e5%87%bacsv%e4%b9%b1%e7%a0%81%e9%97%ae%e9%a2%98/f349197440ceed70b72a1276b3afa024/</link>
		<pubDate>Sat, 10 Mar 2018 09:12:39 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/03/f349197440ceed70b72a1276b3afa024-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2018-03-10 17:12:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-10 09:12:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[f349197440ceed70b72a1276b3afa024]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>136</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/03/f349197440ceed70b72a1276b3afa024-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/03/f349197440ceed70b72a1276b3afa024-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1195;s:6:"height";i:812;s:4:"file";s:46:"2018/03/f349197440ceed70b72a1276b3afa024-1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:46:"f349197440ceed70b72a1276b3afa024-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:46:"f349197440ceed70b72a1276b3afa024-1-300x204.png";s:5:"width";i:300;s:6:"height";i:204;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:46:"f349197440ceed70b72a1276b3afa024-1-768x522.png";s:5:"width";i:768;s:6:"height";i:522;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:47:"f349197440ceed70b72a1276b3afa024-1-1024x696.png";s:5:"width";i:1024;s:6:"height";i:696;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>e908e64c4681a2ab6d0e9320a8a9bc2a</title>
		<link>https://blog.wj2015.com/2018/03/10/%e4%bd%bf%e7%94%a8php%e8%af%bb%e5%8f%96%e8%a7%86%e9%a2%91%e6%b5%81%ef%bc%8cios%e7%b3%bb%e7%bb%9f%e6%97%a0%e6%b3%95%e8%a7%82%e7%9c%8b%e7%9a%84%e9%97%ae%e9%a2%98%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95/e908e64c4681a2ab6d0e9320a8a9bc2a/</link>
		<pubDate>Sat, 10 Mar 2018 12:53:09 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/03/e908e64c4681a2ab6d0e9320a8a9bc2a-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2018-03-10 20:53:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-10 12:53:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[e908e64c4681a2ab6d0e9320a8a9bc2a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>131</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/03/e908e64c4681a2ab6d0e9320a8a9bc2a-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/03/e908e64c4681a2ab6d0e9320a8a9bc2a-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:923;s:6:"height";i:303;s:4:"file";s:46:"2018/03/e908e64c4681a2ab6d0e9320a8a9bc2a-1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:46:"e908e64c4681a2ab6d0e9320a8a9bc2a-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:45:"e908e64c4681a2ab6d0e9320a8a9bc2a-1-300x98.png";s:5:"width";i:300;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:46:"e908e64c4681a2ab6d0e9320a8a9bc2a-1-768x252.png";s:5:"width";i:768;s:6:"height";i:252;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>a91f301dceecf2d53e081b10db62a3c1</title>
		<link>https://blog.wj2015.com/2018/03/20/linux%e5%bf%ab%e9%80%9f%e5%ae%89%e8%a3%85ffmpeg%ef%bc%8c%e4%bb%a5%e5%8f%8a%e4%bd%bf%e7%94%a8php-ffmpeg%e5%ba%93%e8%b8%a9%e7%9a%84%e4%b8%80%e4%ba%9b%e5%9d%91/a91f301dceecf2d53e081b10db62a3c1/</link>
		<pubDate>Mon, 19 Mar 2018 16:36:23 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/03/a91f301dceecf2d53e081b10db62a3c1-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2018-03-20 00:36:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-19 16:36:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[a91f301dceecf2d53e081b10db62a3c1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>152</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/03/a91f301dceecf2d53e081b10db62a3c1-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/03/a91f301dceecf2d53e081b10db62a3c1-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1517;s:6:"height";i:291;s:4:"file";s:46:"2018/03/a91f301dceecf2d53e081b10db62a3c1-1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:46:"a91f301dceecf2d53e081b10db62a3c1-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:45:"a91f301dceecf2d53e081b10db62a3c1-1-300x58.png";s:5:"width";i:300;s:6:"height";i:58;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:46:"a91f301dceecf2d53e081b10db62a3c1-1-768x147.png";s:5:"width";i:768;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:47:"a91f301dceecf2d53e081b10db62a3c1-1-1024x196.png";s:5:"width";i:1024;s:6:"height";i:196;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TIM截图20180321022207</title>
		<link>https://blog.wj2015.com/2018/03/21/layuiadmin%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/tim%e6%88%aa%e5%9b%be20180321022207/</link>
		<pubDate>Tue, 20 Mar 2018 18:22:16 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/03/TIM截图20180321022207.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date><![CDATA[2018-03-21 02:22:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-20 18:22:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tim%e6%88%aa%e5%9b%be20180321022207]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>145</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/03/TIM截图20180321022207.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/03/TIM截图20180321022207.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1039;s:4:"file";s:35:"2018/03/TIM截图20180321022207.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"TIM截图20180321022207-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:35:"TIM截图20180321022207-300x162.png";s:5:"width";i:300;s:6:"height";i:162;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:35:"TIM截图20180321022207-768x416.png";s:5:"width";i:768;s:6:"height";i:416;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:36:"TIM截图20180321022207-1024x554.png";s:5:"width";i:1024;s:6:"height";i:554;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>封面</title>
		<link>https://blog.wj2015.com/2018/03/30/kali-linux%e5%ae%89%e8%a3%85%e4%bb%a5%e5%8f%8a%e5%88%9d%e6%ad%a5%e4%b8%8a%e6%89%8b/%e5%b0%81%e9%9d%a2/</link>
		<pubDate>Fri, 30 Mar 2018 15:58:56 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/03/封面.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date><![CDATA[2018-03-30 23:58:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-30 15:58:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%81%e9%9d%a2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>174</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/03/封面.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/03/封面.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:647;s:6:"height";i:498;s:4:"file";s:18:"2018/03/封面.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"封面-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"封面-300x231.png";s:5:"width";i:300;s:6:"height";i:231;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>face</title>
		<link>https://blog.wj2015.com/2018/04/08/jquery%e5%8a%a8%e6%80%81%e7%bb%91%e5%ae%9a%e5%9c%a8ios%e5%a4%b1%e6%95%88%e7%9a%84%e9%97%ae%e9%a2%98/face-2/</link>
		<pubDate>Sun, 08 Apr 2018 13:58:48 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/04/face.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2018-04-08 21:58:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-08 13:58:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[face-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>202</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/04/face.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/04/face.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:585;s:6:"height";i:539;s:4:"file";s:16:"2018/04/face.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"face-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"face-300x276.png";s:5:"width";i:300;s:6:"height";i:276;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>封面</title>
		<link>https://blog.wj2015.com/2018/04/09/%e6%95%b0%e6%8d%ae%e5%ba%93%e8%b7%a8%e8%a1%a8%e7%bb%9f%e8%ae%a1%e6%8e%92%e5%ba%8f%e5%8f%8a%e6%95%88%e7%8e%87%e4%bc%98%e5%8c%96/%e5%b0%81%e9%9d%a2-2/</link>
		<pubDate>Mon, 09 Apr 2018 10:46:09 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/04/封面.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2018-04-09 18:46:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-09 10:46:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%81%e9%9d%a2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>198</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/04/封面.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/04/封面.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1029;s:6:"height";i:859;s:4:"file";s:18:"2018/04/封面.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"封面-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"封面-300x250.png";s:5:"width";i:300;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"封面-768x641.png";s:5:"width";i:768;s:6:"height";i:641;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:19:"封面-1024x855.png";s:5:"width";i:1024;s:6:"height";i:855;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg</title>
		<link>https://blog.wj2015.com/2018/04/09/%e6%95%b0%e6%8d%ae%e5%ba%93%e8%b7%a8%e8%a1%a8%e7%bb%9f%e8%ae%a1%e6%8e%92%e5%ba%8f%e5%8f%8a%e6%95%88%e7%8e%87%e4%bc%98%e5%8c%96/timg/</link>
		<pubDate>Mon, 09 Apr 2018 11:34:57 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/04/timg.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date><![CDATA[2018-04-09 19:34:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-09 11:34:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>198</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/04/timg.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/04/timg.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:339;s:4:"file";s:16:"2018/04/timg.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"timg-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:16:"timg-300x170.jpg";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>22916f2bf8e955bfc9b30fbe9a2c2f49</title>
		<link>https://blog.wj2015.com/2018/05/12/reactjs%e5%ad%a6%e4%b9%a01-%e5%ae%89%e8%a3%85%e3%80%81jsx%e3%80%81%e7%bb%84%e4%bb%b6%e3%80%81%e7%8a%b6%e6%80%81%e5%92%8c%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f/22916f2bf8e955bfc9b30fbe9a2c2f49/</link>
		<pubDate>Sat, 12 May 2018 09:41:40 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/05/22916f2bf8e955bfc9b30fbe9a2c2f49.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2018-05-12 17:41:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-12 09:41:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[22916f2bf8e955bfc9b30fbe9a2c2f49]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>236</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/05/22916f2bf8e955bfc9b30fbe9a2c2f49.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:44:"2018/05/22916f2bf8e955bfc9b30fbe9a2c2f49.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"22916f2bf8e955bfc9b30fbe9a2c2f49-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:44:"22916f2bf8e955bfc9b30fbe9a2c2f49-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:44:"22916f2bf8e955bfc9b30fbe9a2c2f49-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:45:"22916f2bf8e955bfc9b30fbe9a2c2f49-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:44:"22916f2bf8e955bfc9b30fbe9a2c2f49-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:44:"22916f2bf8e955bfc9b30fbe9a2c2f49-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:45:"22916f2bf8e955bfc9b30fbe9a2c2f49-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/05/22916f2bf8e955bfc9b30fbe9a2c2f49.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>temp</title>
		<link>https://blog.wj2015.com/2018/05/26/%e4%bf%ae%e6%94%b9nginx%e3%80%81php-fpm%e8%bf%90%e8%a1%8c%e7%94%a8%e6%88%b7%e5%af%bc%e8%87%b4%e6%97%a0%e6%b3%95%e5%86%99%e5%85%a5session%e9%97%ae%e9%a2%98%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88/temp/</link>
		<pubDate>Sat, 26 May 2018 07:38:25 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/05/temp.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2018-05-26 15:38:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-26 07:38:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[temp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>250</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/05/temp.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/05/temp.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:16:"2018/05/temp.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"temp-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:16:"temp-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:16:"temp-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:17:"temp-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:16:"temp-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:16:"temp-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:17:"temp-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg</title>
		<link>https://blog.wj2015.com/2018/07/20/%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/timg-2/</link>
		<pubDate>Fri, 20 Jul 2018 01:56:19 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/07/timg.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date><![CDATA[2018-07-20 09:56:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-20 01:56:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/07/timg.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/timg.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:542;s:6:"height";i:250;s:4:"file";s:16:"2018/07/timg.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"timg-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:16:"timg-300x138.jpg";s:5:"width";i:300;s:6:"height";i:138;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:16:"timg-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:16:"timg-500x250.jpg";s:5:"width";i:500;s:6:"height";i:250;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg</title>
		<link>https://blog.wj2015.com/2018/07/20/%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/timg-3/</link>
		<pubDate>Fri, 20 Jul 2018 01:57:32 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/07/timg-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date><![CDATA[2018-07-20 09:57:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-20 01:57:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/07/timg-1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/timg-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:542;s:6:"height";i:250;s:4:"file";s:18:"2018/07/timg-1.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"timg-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"timg-1-300x138.jpg";s:5:"width";i:300;s:6:"height";i:138;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:18:"timg-1-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:18:"timg-1-500x250.jpg";s:5:"width";i:500;s:6:"height";i:250;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg (1)</title>
		<link>https://blog.wj2015.com/2018/07/20/%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/timg-1/</link>
		<pubDate>Fri, 20 Jul 2018 01:57:38 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/07/timg-1-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date><![CDATA[2018-07-20 09:57:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-20 01:57:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/07/timg-1-1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/timg-1-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:307;s:6:"height";i:264;s:4:"file";s:20:"2018/07/timg-1-1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"timg-1-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"timg-1-1-300x258.jpg";s:5:"width";i:300;s:6:"height";i:258;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:20:"timg-1-1-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg (2)</title>
		<link>https://blog.wj2015.com/2018/07/20/%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/timg-2-2/</link>
		<pubDate>Fri, 20 Jul 2018 01:59:31 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/07/timg-2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date><![CDATA[2018-07-20 09:59:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-20 01:59:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/07/timg-2.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/timg-2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:438;s:6:"height";i:273;s:4:"file";s:18:"2018/07/timg-2.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"timg-2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"timg-2-300x187.jpg";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:18:"timg-2-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg (4)</title>
		<link>https://blog.wj2015.com/2018/07/20/%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/timg-4/</link>
		<pubDate>Fri, 20 Jul 2018 02:02:19 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/07/timg-4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2018-07-20 10:02:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-20 02:02:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/07/timg-4.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/timg-4.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:300;s:4:"file";s:18:"2018/07/timg-4.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"timg-4-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:18:"timg-4-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:18:"timg-4-300x277.jpg";s:5:"width";i:300;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg (5)</title>
		<link>https://blog.wj2015.com/2018/07/20/%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/timg-5/</link>
		<pubDate>Fri, 20 Jul 2018 02:06:26 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/07/timg-5.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date><![CDATA[2018-07-20 10:06:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-20 02:06:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/07/timg-5.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/timg-5.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:514;s:6:"height";i:396;s:4:"file";s:18:"2018/07/timg-5.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"timg-5-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"timg-5-300x231.jpg";s:5:"width";i:300;s:6:"height";i:231;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:18:"timg-5-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:18:"timg-5-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg (6)</title>
		<link>https://blog.wj2015.com/2018/07/20/%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/timg-6/</link>
		<pubDate>Fri, 20 Jul 2018 02:12:31 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/07/timg-6.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2018-07-20 10:12:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-20 02:12:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/07/timg-6.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/timg-6.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:438;s:6:"height";i:320;s:4:"file";s:18:"2018/07/timg-6.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"timg-6-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"timg-6-300x219.jpg";s:5:"width";i:300;s:6:"height";i:219;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:18:"timg-6-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:18:"timg-6-438x277.jpg";s:5:"width";i:438;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg (7)</title>
		<link>https://blog.wj2015.com/2018/07/20/%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/timg-7/</link>
		<pubDate>Fri, 20 Jul 2018 02:23:40 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/07/timg-7.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date><![CDATA[2018-07-20 10:23:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-20 02:23:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/07/timg-7.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/timg-7.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:650;s:6:"height";i:359;s:4:"file";s:18:"2018/07/timg-7.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"timg-7-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"timg-7-300x166.jpg";s:5:"width";i:300;s:6:"height";i:166;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:18:"timg-7-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:18:"timg-7-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>9e18b6f2f0fbb72f8c8c374218f3436c</title>
		<link>https://blog.wj2015.com/2018/07/20/%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/9e18b6f2f0fbb72f8c8c374218f3436c/</link>
		<pubDate>Fri, 20 Jul 2018 02:30:56 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/07/9e18b6f2f0fbb72f8c8c374218f3436c.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date><![CDATA[2018-07-20 10:30:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-20 02:30:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[9e18b6f2f0fbb72f8c8c374218f3436c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/07/9e18b6f2f0fbb72f8c8c374218f3436c.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/9e18b6f2f0fbb72f8c8c374218f3436c.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:184;s:4:"file";s:44:"2018/07/9e18b6f2f0fbb72f8c8c374218f3436c.gif";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"9e18b6f2f0fbb72f8c8c374218f3436c-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:44:"9e18b6f2f0fbb72f8c8c374218f3436c-300x184.gif";s:5:"width";i:300;s:6:"height";i:184;s:9:"mime-type";s:9:"image/gif";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:44:"9e18b6f2f0fbb72f8c8c374218f3436c-272x150.gif";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>b21c8701a18b87d6232299000d0828381f30fd48</title>
		<link>https://blog.wj2015.com/2018/08/08/%e4%b8%80%e9%81%93%e5%85%b3%e4%ba%8e%e6%97%a0%e9%99%90%e7%ba%a7%e5%88%86%e7%b1%bb%e7%9a%84%e6%b5%8b%e8%af%95%e9%a2%98/b21c8701a18b87d6232299000d0828381f30fd48/</link>
		<pubDate>Wed, 08 Aug 2018 09:05:36 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/08/b21c8701a18b87d6232299000d0828381f30fd48.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date><![CDATA[2018-08-08 17:05:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-08 09:05:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[b21c8701a18b87d6232299000d0828381f30fd48]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>276</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/08/b21c8701a18b87d6232299000d0828381f30fd48.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:683;s:4:"file";s:52:"2018/08/b21c8701a18b87d6232299000d0828381f30fd48.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:52:"b21c8701a18b87d6232299000d0828381f30fd48-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:52:"b21c8701a18b87d6232299000d0828381f30fd48-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:52:"b21c8701a18b87d6232299000d0828381f30fd48-768x512.jpg";s:5:"width";i:768;s:6:"height";i:512;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:53:"b21c8701a18b87d6232299000d0828381f30fd48-1024x683.jpg";s:5:"width";i:1024;s:6:"height";i:683;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:52:"b21c8701a18b87d6232299000d0828381f30fd48-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:52:"b21c8701a18b87d6232299000d0828381f30fd48-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:53:"b21c8701a18b87d6232299000d0828381f30fd48-1024x661.jpg";s:5:"width";i:1024;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:2:"11";s:6:"credit";s:11:"liuxiaodong";s:6:"camera";s:12:"Canon EOS 6D";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1489818967";s:9:"copyright";s:24:"Prohibit copy forwarding";s:12:"focal_length";s:2:"16";s:3:"iso";s:3:"100";s:13:"shutter_speed";s:3:"0.1";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/08/b21c8701a18b87d6232299000d0828381f30fd48.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AI support centre</title>
		<link>https://blog.wj2015.com/2018/10/12/%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8vbot%e5%81%9a%e4%b8%80%e4%b8%aa%e8%87%aa%e5%8a%a8%e5%be%ae%e4%bf%a1%e5%ae%a2%e6%9c%8d%e7%b3%bb%e7%bb%9f%ef%bc%88%e4%b8%80%ef%bc%89%e7%8e%af%e5%a2%83%e3%80%81/ai-support-centre/</link>
		<pubDate>Fri, 12 Oct 2018 01:52:15 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/10/robot-customer-service.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Robots with headphones (done in 3d)]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date><![CDATA[2018-10-12 09:52:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-10-12 01:52:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ai-support-centre]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>287</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/10/robot-customer-service.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/10/robot-customer-service.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:34:"2018/10/robot-customer-service.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"robot-customer-service-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:34:"robot-customer-service-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:34:"robot-customer-service-768x576.jpg";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:35:"robot-customer-service-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:34:"robot-customer-service-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:34:"robot-customer-service-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:35:"robot-customer-service-1024x661.jpg";s:5:"width";i:1024;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:35:"Robots with headphones (done in 3d)";s:17:"created_timestamp";s:10:"1360767201";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:17:"AI support centre";s:11:"orientation";s:1:"1";s:8:"keywords";a:24:{i:0;s:4:"cans";i:1;s:10:"headphones";i:2;s:7:"support";i:3;s:5:"robot";i:4;s:8:"abstract";i:5;s:2:"3d";i:6;s:5:"white";i:7;s:6:"symbol";i:8;s:7:"robotic";i:9;s:6:"cyborg";i:10;s:6:"modern";i:11;s:4:"user";i:12;s:10:"employment";i:13;s:7:"service";i:14;s:7:"hotline";i:15;s:13:"communication";i:16;s:3:"man";i:17;s:13:"communicating";i:18;s:14:"communications";i:19;s:8:"helpdesk";i:20;s:2:"pc";i:21;s:8:"computer";i:22;s:9:"help-desk";i:23;s:4:"desk";}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bg</title>
		<link>https://blog.wj2015.com/2018/11/09/yum%e6%8a%a5%e9%94%99%ef%bc%8cerror-xz-compression-not-available/bg/</link>
		<pubDate>Fri, 09 Nov 2018 04:04:54 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/11/bg.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date><![CDATA[2018-11-09 12:04:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-09 04:04:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>305</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/11/bg.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/11/bg.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:533;s:6:"height";i:300;s:4:"file";s:14:"2018/11/bg.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:14:"bg-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:14:"bg-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:14:"bg-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:14:"bg-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bg</title>
		<link>https://blog.wj2015.com/2018/04/29/mysql%e6%8a%a5%e9%94%99%ef%bc%8cerror-fatal-error-cant-open-and-lock-privilege-tables-table-mysql-host-doesnt-exist/bg-2/</link>
		<pubDate>Mon, 12 Nov 2018 03:30:26 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/04/bg.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date><![CDATA[2018-11-12 11:30:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-12 03:30:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bg-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>232</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/04/bg.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/04/bg.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:14:"2018/04/bg.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:14:"bg-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:14:"bg-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:14:"bg-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:15:"bg-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:14:"bg-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:14:"bg-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:15:"bg-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg</title>
		<link>https://blog.wj2015.com/2018/11/20/js%e4%b8%adfunction-apply-%e7%9a%84%e9%aa%9a%e6%93%8d%e4%bd%9c/timg-8/</link>
		<pubDate>Tue, 20 Nov 2018 15:19:32 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/11/timg.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date><![CDATA[2018-11-20 23:19:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-20 15:19:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>311</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/11/timg.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/11/timg.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:658;s:4:"file";s:16:"2018/11/timg.jpg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"timg-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:16:"timg-300x193.jpg";s:5:"width";i:300;s:6:"height";i:193;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:16:"timg-768x494.jpg";s:5:"width";i:768;s:6:"height";i:494;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:17:"timg-1024x658.jpg";s:5:"width";i:1024;s:6:"height";i:658;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:16:"timg-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:16:"timg-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pic1</title>
		<link>https://blog.wj2015.com/2018/12/07/php%e4%b8%adarray_map%e3%80%81array_walk%e7%9a%84%e4%bd%bf%e7%94%a8%e6%80%bb%e7%bb%93/pic1/</link>
		<pubDate>Fri, 07 Dec 2018 02:12:56 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2018/12/pic1.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date><![CDATA[2018-12-07 10:12:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-07 02:12:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pic1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>321</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2018/12/pic1.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/12/pic1.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:525;s:6:"height";i:350;s:4:"file";s:17:"2018/12/pic1.jpeg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"pic1-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:17:"pic1-300x200.jpeg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:17:"pic1-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:17:"pic1-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>select</title>
		<link>https://blog.wj2015.com/select/</link>
		<pubDate>Wed, 09 Jan 2019 02:45:43 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/01/select.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date><![CDATA[2019-01-09 10:45:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-09 02:45:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[select]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/01/select.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/01/select.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2560;s:6:"height";i:1600;s:4:"file";s:18:"2019/01/select.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"select-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"select-300x188.jpg";s:5:"width";i:300;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:18:"select-768x480.jpg";s:5:"width";i:768;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:19:"select-1024x640.jpg";s:5:"width";i:1024;s:6:"height";i:640;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:18:"select-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:18:"select-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:19:"select-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"445a927db38e888276a96c16f8c13e94";a:2:{s:7:"expires";i:1582196222;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-select.jpg</title>
		<link>https://blog.wj2015.com/cropped-select-jpg/</link>
		<pubDate>Wed, 09 Jan 2019 02:46:04 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/01/cropped-select.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date><![CDATA[2019-01-09 10:46:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-09 02:46:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-select-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/01/cropped-select.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/01/cropped-select.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:714;s:4:"file";s:26:"2019/01/cropped-select.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"cropped-select-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"cropped-select-300x112.jpg";s:5:"width";i:300;s:6:"height";i:112;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:26:"cropped-select-768x286.jpg";s:5:"width";i:768;s:6:"height";i:286;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:27:"cropped-select-1024x381.jpg";s:5:"width";i:1024;s:6:"height";i:381;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:26:"cropped-select-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:26:"cropped-select-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:27:"cropped-select-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:339;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_charitas-lite]]></wp:meta_key>
			<wp:meta_value><![CDATA[1547001970]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
			<wp:meta_value><![CDATA[charitas-lite]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"445a927db38e888276a96c16f8c13e94";a:2:{s:7:"expires";i:1579169272;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TIM图片20190109105426</title>
		<link>https://blog.wj2015.com/tim%e5%9b%be%e7%89%8720190109105426/</link>
		<pubDate>Wed, 09 Jan 2019 02:58:05 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/01/TIM图片20190109105426.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date><![CDATA[2019-01-09 10:58:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-09 02:58:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tim%e5%9b%be%e7%89%8720190109105426]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/01/TIM图片20190109105426.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/01/TIM图片20190109105426.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4032;s:6:"height";i:2256;s:4:"file";s:35:"2019/01/TIM图片20190109105426.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"TIM图片20190109105426-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"TIM图片20190109105426-300x168.jpg";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:35:"TIM图片20190109105426-768x430.jpg";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:36:"TIM图片20190109105426-1024x573.jpg";s:5:"width";i:1024;s:6:"height";i:573;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:35:"TIM图片20190109105426-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:35:"TIM图片20190109105426-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:36:"TIM图片20190109105426-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"1.8";s:6:"credit";s:0:"";s:6:"camera";s:9:"16th Plus";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1542487365";s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"4.58";s:3:"iso";s:3:"746";s:13:"shutter_speed";s:4:"0.03";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[29]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"445a927db38e888276a96c16f8c13e94";a:2:{s:7:"expires";i:1578112355;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-TIM图片20190109105426.jpg</title>
		<link>https://blog.wj2015.com/cropped-tim%e5%9b%be%e7%89%8720190109105426-jpg/</link>
		<pubDate>Wed, 09 Jan 2019 02:59:04 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/01/cropped-TIM图片20190109105426.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date><![CDATA[2019-01-09 10:59:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-09 02:59:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-tim%e5%9b%be%e7%89%8720190109105426-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/01/cropped-TIM图片20190109105426.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/01/cropped-TIM图片20190109105426.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:714;s:4:"file";s:43:"2019/01/cropped-TIM图片20190109105426.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"cropped-TIM图片20190109105426-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:43:"cropped-TIM图片20190109105426-300x112.jpg";s:5:"width";i:300;s:6:"height";i:112;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:43:"cropped-TIM图片20190109105426-768x286.jpg";s:5:"width";i:768;s:6:"height";i:286;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:44:"cropped-TIM图片20190109105426-1024x381.jpg";s:5:"width";i:1024;s:6:"height";i:381;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:43:"cropped-TIM图片20190109105426-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:43:"cropped-TIM图片20190109105426-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:44:"cropped-TIM图片20190109105426-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:342;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_charitas-lite]]></wp:meta_key>
			<wp:meta_value><![CDATA[1547002754]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
			<wp:meta_value><![CDATA[charitas-lite]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"445a927db38e888276a96c16f8c13e94";a:2:{s:7:"expires";i:1579161647;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20180325001555181</title>
		<link>https://blog.wj2015.com/2019/03/22/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%b4%a2%e5%bc%95%e6%80%bb%e7%bb%93/attachment/20180325001555181/</link>
		<pubDate>Fri, 22 Mar 2019 13:28:39 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/03/20180325001555181.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>358</wp:post_id>
		<wp:post_date><![CDATA[2019-03-22 21:28:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-22 13:28:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20180325001555181]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>354</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/03/20180325001555181.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/20180325001555181.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:569;s:6:"height";i:345;s:4:"file";s:29:"2019/03/20180325001555181.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"20180325001555181-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:29:"20180325001555181-300x182.jpg";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:29:"20180325001555181-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:29:"20180325001555181-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>heart</title>
		<link>https://blog.wj2015.com/2019/05/01/js-xlsx%e6%94%af%e6%8c%81%e6%a0%b7%e5%bc%8f/heart/</link>
		<pubDate>Wed, 01 May 2019 07:18:48 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/05/heart.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>361</wp:post_id>
		<wp:post_date><![CDATA[2019-05-01 15:18:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-01 07:18:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[heart]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>360</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/05/heart.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/05/heart.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1241;s:6:"height";i:857;s:4:"file";s:17:"2019/05/heart.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"heart-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:17:"heart-300x207.jpg";s:5:"width";i:300;s:6:"height";i:207;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:17:"heart-768x530.jpg";s:5:"width";i:768;s:6:"height";i:530;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:18:"heart-1024x707.jpg";s:5:"width";i:1024;s:6:"height";i:707;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:17:"heart-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:17:"heart-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:18:"heart-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>flower</title>
		<link>https://blog.wj2015.com/2019/05/01/js-xlsx%e6%94%af%e6%8c%81%e6%a0%b7%e5%bc%8f/flower/</link>
		<pubDate>Wed, 01 May 2019 07:21:49 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/05/flower.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date><![CDATA[2019-05-01 15:21:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-01 07:21:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[flower]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>360</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/05/flower.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/05/flower.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:918;s:6:"height";i:319;s:4:"file";s:18:"2019/05/flower.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"flower-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"flower-300x104.jpg";s:5:"width";i:300;s:6:"height";i:104;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:18:"flower-768x267.jpg";s:5:"width";i:768;s:6:"height";i:267;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:18:"flower-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:18:"flower-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>git工作流</title>
		<link>https://blog.wj2015.com/2019/07/23/git%e5%b7%a5%e4%bd%9c%e6%b5%81%ef%bc%8c%e5%a6%82%e4%bd%95%e6%ad%a3%e7%a1%ae%e7%9a%84%e5%90%88%e5%b9%b6%e8%87%aa%e5%b7%b1%e7%9a%84%e4%bb%a3%e7%a0%81%e5%88%b0%e6%9f%90%e4%b8%aa%e5%88%86%e6%94%af/git%e5%b7%a5%e4%bd%9c%e6%b5%81/</link>
		<pubDate>Tue, 23 Jul 2019 13:46:58 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/07/git工作流.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>376</wp:post_id>
		<wp:post_date><![CDATA[2019-07-23 21:46:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-23 13:46:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[git%e5%b7%a5%e4%bd%9c%e6%b5%81]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>301</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/07/git工作流.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/07/git工作流.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:297;s:6:"height";i:170;s:4:"file";s:24:"2019/07/git工作流.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"git工作流-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:24:"git工作流-272x150.png";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dycs</title>
		<link>https://blog.wj2015.com/2019/07/31/php%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95%e5%9f%ba%e7%a1%80%e6%b1%87%e6%80%bb/dycs/</link>
		<pubDate>Wed, 31 Jul 2019 07:16:47 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/07/dycs.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>383</wp:post_id>
		<wp:post_date><![CDATA[2019-07-31 15:16:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-31 07:16:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dycs]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>379</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/07/dycs.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/07/dycs.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:347;s:6:"height";i:220;s:4:"file";s:16:"2019/07/dycs.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"dycs-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:16:"dycs-300x190.jpg";s:5:"width";i:300;s:6:"height";i:190;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:16:"dycs-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20161107111502_84</title>
		<link>https://blog.wj2015.com/2019/09/03/javascript%e5%9f%ba%e6%9c%ac%e7%b1%bb%e5%9e%8b%e6%80%bb%e7%bb%93/20161107111502_84/</link>
		<pubDate>Mon, 02 Sep 2019 16:23:18 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/09/20161107111502_84.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>418</wp:post_id>
		<wp:post_date><![CDATA[2019-09-03 00:23:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-02 16:23:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20161107111502_84]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>410</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/09/20161107111502_84.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/09/20161107111502_84.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1358;s:6:"height";i:826;s:4:"file";s:29:"2019/09/20161107111502_84.jpg";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"20161107111502_84-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:29:"20161107111502_84-300x182.jpg";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:29:"20161107111502_84-768x467.jpg";s:5:"width";i:768;s:6:"height";i:467;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:30:"20161107111502_84-1024x623.jpg";s:5:"width";i:1024;s:6:"height";i:623;s:9:"mime-type";s:10:"image/jpeg";}s:11:"wppr-widget";a:4:{s:4:"file";s:27:"20161107111502_84-50x30.jpg";s:5:"width";i:50;s:6:"height";i:30;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:29:"20161107111502_84-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:29:"20161107111502_84-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:30:"20161107111502_84-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>深度截图_选择区域_20191129103827</title>
		<link>https://blog.wj2015.com/2019/11/29/%e5%a6%82%e4%bd%95%e5%b0%86vim%e6%94%b9%e9%80%a0%e4%b8%bapython%e7%9a%84ide/%e6%b7%b1%e5%ba%a6%e6%88%aa%e5%9b%be_%e9%80%89%e6%8b%a9%e5%8c%ba%e5%9f%9f_20191129103827/</link>
		<pubDate>Fri, 29 Nov 2019 02:38:40 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/11/深度截图_选择区域_20191129103827.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>440</wp:post_id>
		<wp:post_date><![CDATA[2019-11-29 10:38:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-29 02:38:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e6%88%aa%e5%9b%be_%e9%80%89%e6%8b%a9%e5%8c%ba%e5%9f%9f_20191129103827]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>432</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/11/深度截图_选择区域_20191129103827.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/11/深度截图_选择区域_20191129103827.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1124;s:6:"height";i:794;s:4:"file";s:52:"2019/11/深度截图_选择区域_20191129103827.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:52:"深度截图_选择区域_20191129103827-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:52:"深度截图_选择区域_20191129103827-300x212.png";s:5:"width";i:300;s:6:"height";i:212;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:52:"深度截图_选择区域_20191129103827-768x543.png";s:5:"width";i:768;s:6:"height";i:543;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:53:"深度截图_选择区域_20191129103827-1024x723.png";s:5:"width";i:1024;s:6:"height";i:723;s:9:"mime-type";s:9:"image/png";}s:11:"wppr-widget";a:4:{s:4:"file";s:50:"深度截图_选择区域_20191129103827-50x35.png";s:5:"width";i:50;s:6:"height";i:35;s:9:"mime-type";s:9:"image/png";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:52:"深度截图_选择区域_20191129103827-272x150.png";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:52:"深度截图_选择区域_20191129103827-500x277.png";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:9:"image/png";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:53:"深度截图_选择区域_20191129103827-1124x661.png";s:5:"width";i:1124;s:6:"height";i:661;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>10-21-http-request</title>
		<link>https://blog.wj2015.com/2019/11/30/%e5%b8%b8%e8%a7%81web%e7%99%bb%e9%99%86%e6%8e%88%e6%9d%83%e6%96%b9%e5%bc%8f%e5%8f%8a%e5%8e%9f%e7%90%86/10-21-http-request/</link>
		<pubDate>Fri, 29 Nov 2019 03:59:59 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/11/10-21-http-request.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>443</wp:post_id>
		<wp:post_date><![CDATA[2019-11-29 11:59:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-29 03:59:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[10-21-http-request]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>442</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/11/10-21-http-request.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/11/10-21-http-request.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:356;s:4:"file";s:30:"2019/11/10-21-http-request.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"10-21-http-request-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"10-21-http-request-300x134.png";s:5:"width";i:300;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:30:"10-21-http-request-768x342.png";s:5:"width";i:768;s:6:"height";i:342;s:9:"mime-type";s:9:"image/png";}s:11:"wppr-widget";a:4:{s:4:"file";s:28:"10-21-http-request-50x22.png";s:5:"width";i:50;s:6:"height";i:22;s:9:"mime-type";s:9:"image/png";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:30:"10-21-http-request-272x150.png";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:30:"10-21-http-request-500x277.png";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>13263206-789acd89ebc8afef</title>
		<link>https://blog.wj2015.com/2019/11/30/%e5%b8%b8%e8%a7%81web%e7%99%bb%e9%99%86%e6%8e%88%e6%9d%83%e6%96%b9%e5%bc%8f%e5%8f%8a%e5%8e%9f%e7%90%86/13263206-789acd89ebc8afef/</link>
		<pubDate>Fri, 29 Nov 2019 07:15:21 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/11/13263206-789acd89ebc8afef.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>446</wp:post_id>
		<wp:post_date><![CDATA[2019-11-29 15:15:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-29 07:15:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[13263206-789acd89ebc8afef]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>442</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/11/13263206-789acd89ebc8afef.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/11/13263206-789acd89ebc8afef.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:596;s:6:"height";i:764;s:4:"file";s:38:"2019/11/13263206-789acd89ebc8afef.jpeg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"13263206-789acd89ebc8afef-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:38:"13263206-789acd89ebc8afef-234x300.jpeg";s:5:"width";i:234;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:11:"wppr-widget";a:4:{s:4:"file";s:36:"13263206-789acd89ebc8afef-39x50.jpeg";s:5:"width";i:39;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:38:"13263206-789acd89ebc8afef-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:38:"13263206-789acd89ebc8afef-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:38:"13263206-789acd89ebc8afef-596x661.jpeg";s:5:"width";i:596;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>13263206-dde2fc0423a9f861</title>
		<link>https://blog.wj2015.com/2019/11/30/%e5%b8%b8%e8%a7%81web%e7%99%bb%e9%99%86%e6%8e%88%e6%9d%83%e6%96%b9%e5%bc%8f%e5%8f%8a%e5%8e%9f%e7%90%86/13263206-dde2fc0423a9f861/</link>
		<pubDate>Fri, 29 Nov 2019 07:21:05 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/11/13263206-dde2fc0423a9f861.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>447</wp:post_id>
		<wp:post_date><![CDATA[2019-11-29 15:21:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-29 07:21:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[13263206-dde2fc0423a9f861]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>442</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/11/13263206-dde2fc0423a9f861.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/11/13263206-dde2fc0423a9f861.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:952;s:6:"height";i:654;s:4:"file";s:38:"2019/11/13263206-dde2fc0423a9f861.jpeg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"13263206-dde2fc0423a9f861-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:38:"13263206-dde2fc0423a9f861-300x206.jpeg";s:5:"width";i:300;s:6:"height";i:206;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:38:"13263206-dde2fc0423a9f861-768x528.jpeg";s:5:"width";i:768;s:6:"height";i:528;s:9:"mime-type";s:10:"image/jpeg";}s:11:"wppr-widget";a:4:{s:4:"file";s:36:"13263206-dde2fc0423a9f861-50x34.jpeg";s:5:"width";i:50;s:6:"height";i:34;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:38:"13263206-dde2fc0423a9f861-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:38:"13263206-dde2fc0423a9f861-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>13263206-af1aeca1688f4185</title>
		<link>https://blog.wj2015.com/2019/11/30/%e5%b8%b8%e8%a7%81web%e7%99%bb%e9%99%86%e6%8e%88%e6%9d%83%e6%96%b9%e5%bc%8f%e5%8f%8a%e5%8e%9f%e7%90%86/13263206-af1aeca1688f4185/</link>
		<pubDate>Fri, 29 Nov 2019 07:35:05 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2019/11/13263206-af1aeca1688f4185.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date><![CDATA[2019-11-29 15:35:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-29 07:35:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[13263206-af1aeca1688f4185]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>442</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2019/11/13263206-af1aeca1688f4185.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/11/13263206-af1aeca1688f4185.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:948;s:6:"height";i:650;s:4:"file";s:38:"2019/11/13263206-af1aeca1688f4185.jpeg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"13263206-af1aeca1688f4185-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:38:"13263206-af1aeca1688f4185-300x206.jpeg";s:5:"width";i:300;s:6:"height";i:206;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:38:"13263206-af1aeca1688f4185-768x527.jpeg";s:5:"width";i:768;s:6:"height";i:527;s:9:"mime-type";s:10:"image/jpeg";}s:11:"wppr-widget";a:4:{s:4:"file";s:36:"13263206-af1aeca1688f4185-50x34.jpeg";s:5:"width";i:50;s:6:"height";i:34;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:38:"13263206-af1aeca1688f4185-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:38:"13263206-af1aeca1688f4185-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zWPNti_1543055279031</title>
		<link>https://blog.wj2015.com/2020/02/16/%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a01-%e6%a6%82%e8%a7%88/zwpnti_1543055279031/</link>
		<pubDate>Sun, 16 Feb 2020 08:04:38 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2020/02/zWPNti_1543055279031.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>463</wp:post_id>
		<wp:post_date><![CDATA[2020-02-16 16:04:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-16 08:04:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zwpnti_1543055279031]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>461</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2020/02/zWPNti_1543055279031.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1080;s:6:"height";i:459;s:4:"file";s:33:"2020/02/zWPNti_1543055279031.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"zWPNti_1543055279031-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:33:"zWPNti_1543055279031-300x128.jpeg";s:5:"width";i:300;s:6:"height";i:128;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:33:"zWPNti_1543055279031-768x326.jpeg";s:5:"width";i:768;s:6:"height";i:326;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:34:"zWPNti_1543055279031-1024x435.jpeg";s:5:"width";i:1024;s:6:"height";i:435;s:9:"mime-type";s:10:"image/jpeg";}s:11:"wppr-widget";a:4:{s:4:"file";s:31:"zWPNti_1543055279031-50x21.jpeg";s:5:"width";i:50;s:6:"height";i:21;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:33:"zWPNti_1543055279031-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:33:"zWPNti_1543055279031-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/02/zWPNti_1543055279031.jpeg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>u=1583443940,3268442047&amp;fm=26&amp;gp=0</title>
		<link>https://blog.wj2015.com/2020/02/23/thinkphp5%e7%9a%84%e8%87%aa%e5%ae%9a%e4%b9%89%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86/u15834439403268442047fm26gp0/</link>
		<pubDate>Sun, 23 Feb 2020 09:55:03 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2020/02/u15834439403268442047fm26gp0.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date><![CDATA[2020-02-23 17:55:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-23 09:55:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[u15834439403268442047fm26gp0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>508</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2020/02/u15834439403268442047fm26gp0.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/02/u15834439403268442047fm26gp0.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:411;s:6:"height";i:193;s:4:"file";s:40:"2020/02/u15834439403268442047fm26gp0.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"u15834439403268442047fm26gp0-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:40:"u15834439403268442047fm26gp0-300x141.jpg";s:5:"width";i:300;s:6:"height";i:141;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:40:"u15834439403268442047fm26gp0-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>unnamed</title>
		<link>https://blog.wj2015.com/2020/03/03/%e7%ae%97%e6%b3%95%e5%9f%ba%e7%a1%80-%e6%95%a3%e5%88%97%e8%a1%a8%e7%9a%84%e5%8e%9f%e7%90%86%e5%8f%8a%e5%9f%ba%e7%a1%80%e6%93%8d%e4%bd%9c/unnamed/</link>
		<pubDate>Tue, 03 Mar 2020 10:30:47 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2020/03/unnamed.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>549</wp:post_id>
		<wp:post_date><![CDATA[2020-03-03 18:30:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-03 10:30:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[unnamed]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>548</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2020/03/unnamed.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:458;s:6:"height";i:310;s:4:"file";s:19:"2020/03/unnamed.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"unnamed-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"unnamed-300x203.png";s:5:"width";i:300;s:6:"height";i:203;s:9:"mime-type";s:9:"image/png";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:19:"unnamed-272x150.png";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:19:"unnamed-458x277.png";s:5:"width";i:458;s:6:"height";i:277;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/03/unnamed.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3d-maze-3-1208091</title>
		<link>https://blog.wj2015.com/2020/03/08/step%e5%92%8ciges%e6%a8%a1%e5%9e%8b%e8%bd%ac%e6%8d%a2%e4%b8%ba%e9%80%82%e7%94%a8web%e7%9a%84glb%e6%a0%bc%e5%bc%8f/3d-maze-3-1208091/</link>
		<pubDate>Sat, 07 Mar 2020 17:14:47 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2020/03/3d-maze-3-1208091.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>559</wp:post_id>
		<wp:post_date><![CDATA[2020-03-08 01:14:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-07 17:14:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[3d-maze-3-1208091]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2020/03/3d-maze-3-1208091.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/03/3d-maze-3-1208091.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1600;s:6:"height";i:1200;s:4:"file";s:29:"2020/03/3d-maze-3-1208091.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"3d-maze-3-1208091-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:29:"3d-maze-3-1208091-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:29:"3d-maze-3-1208091-768x576.jpg";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:30:"3d-maze-3-1208091-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:29:"3d-maze-3-1208091-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:29:"3d-maze-3-1208091-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:30:"3d-maze-3-1208091-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>images</title>
		<link>https://blog.wj2015.com/2020/07/01/redis-%e5%a6%82%e4%bd%95%e8%bf%9b%e8%a1%8c%e5%86%85%e5%ad%98%e5%8d%a0%e7%94%a8%e5%88%86%e6%9e%90/images/</link>
		<pubDate>Wed, 01 Jul 2020 08:25:27 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2020/07/images.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>603</wp:post_id>
		<wp:post_date><![CDATA[2020-07-01 16:25:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-01 08:25:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[images]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>601</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2020/07/images.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/07/images.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:304;s:6:"height";i:166;s:4:"file";s:18:"2020/07/images.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"images-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"images-300x164.png";s:5:"width";i:300;s:6:"height";i:164;s:9:"mime-type";s:9:"image/png";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:18:"images-272x150.png";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20150428-cloud-computing.0.1489222360</title>
		<link>https://blog.wj2015.com/2020/07/02/%e6%a0%91%e8%8e%93%e6%b4%be%e5%9f%ba%e4%ba%8edocker%e5%bf%ab%e9%80%9f%e6%90%ad%e5%bb%banextcloud%ef%bc%8c%e9%99%84%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95/20150428-cloud-computing-0-1489222360/</link>
		<pubDate>Thu, 02 Jul 2020 01:38:51 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2020/07/20150428-cloud-computing.0.1489222360.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>605</wp:post_id>
		<wp:post_date><![CDATA[2020-07-02 09:38:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-02 01:38:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20150428-cloud-computing-0-1489222360]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>540</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2020/07/20150428-cloud-computing.0.1489222360.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/07/20150428-cloud-computing.0.1489222360.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1400;s:6:"height";i:788;s:4:"file";s:49:"2020/07/20150428-cloud-computing.0.1489222360.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:49:"20150428-cloud-computing.0.1489222360-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:49:"20150428-cloud-computing.0.1489222360-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:49:"20150428-cloud-computing.0.1489222360-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:50:"20150428-cloud-computing.0.1489222360-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:49:"20150428-cloud-computing.0.1489222360-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:49:"20150428-cloud-computing.0.1489222360-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:50:"20150428-cloud-computing.0.1489222360-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hello-website</title>
		<link>https://blog.wj2015.com/2020/07/21/%e3%80%90%e8%af%91%e3%80%91%e4%bd%bf%e7%94%a8aws-lambda-%e4%b8%ba-serverless-%e6%9e%b6%e6%9e%84%e4%b8%8b%e7%9a%84%e9%9d%99%e6%80%81%e7%bd%91%e7%ab%99%e5%81%9a%e5%9f%ba%e7%a1%80%e8%ae%a4%e8%af%81/hello-website/</link>
		<pubDate>Tue, 21 Jul 2020 02:05:25 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2020/07/hello-website.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>614</wp:post_id>
		<wp:post_date><![CDATA[2020-07-21 10:05:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-21 02:05:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-website]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>608</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2020/07/hello-website.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/07/hello-website.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:857;s:6:"height";i:540;s:4:"file";s:25:"2020/07/hello-website.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"hello-website-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"hello-website-300x189.png";s:5:"width";i:300;s:6:"height";i:189;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:25:"hello-website-768x484.png";s:5:"width";i:768;s:6:"height";i:484;s:9:"mime-type";s:9:"image/png";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:25:"hello-website-272x150.png";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:25:"hello-website-500x277.png";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Monasterio_Khor_Virap,_Armenia,_2016-10-01,_DD_25</title>
		<link>https://blog.wj2015.com/2020/08/26/kibana%e4%b8%adkql%e7%9a%84%e4%bd%bf%e7%94%a8/monasterio_khor_virap_armenia_2016-10-01_dd_25/</link>
		<pubDate>Wed, 26 Aug 2020 13:17:26 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2020/08/Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>623</wp:post_id>
		<wp:post_date><![CDATA[2020-08-26 21:17:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-08-26 13:17:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[monasterio_khor_virap_armenia_2016-10-01_dd_25]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>620</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2020/08/Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/08/Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1200;s:6:"height";i:614;s:4:"file";s:58:"2020/08/Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:58:"Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:58:"Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25-300x154.jpg";s:5:"width";i:300;s:6:"height";i:154;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:58:"Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25-768x393.jpg";s:5:"width";i:768;s:6:"height";i:393;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:59:"Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25-1024x524.jpg";s:5:"width";i:1024;s:6:"height";i:524;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:58:"Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:58:"Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:59:"Monasterio_Khor_Virap_Armenia_2016-10-01_DD_25-1200x614.jpg";s:5:"width";i:1200;s:6:"height";i:614;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>timg</title>
		<link>https://blog.wj2015.com/2020/11/22/aws-%e4%b8%ad%e4%bb%85%e5%85%81%e8%ae%b8-cloudfront%e8%ae%bf%e9%97%ae%e7%9a%84%e5%ae%89%e5%85%a8%e7%bb%84%e5%88%9b%e5%bb%ba/timg-9/</link>
		<pubDate>Sun, 22 Nov 2020 05:20:28 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2020/11/timg.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>637</wp:post_id>
		<wp:post_date><![CDATA[2020-11-22 13:20:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-11-22 05:20:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>636</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2020/11/timg.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/11/timg.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:464;s:6:"height";i:224;s:4:"file";s:16:"2020/11/timg.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"timg-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:16:"timg-300x145.jpg";s:5:"width";i:300;s:6:"height";i:145;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:16:"timg-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>book-rev-lite</title>
		<link>https://blog.wj2015.com/2017/12/02/book-rev-lite/</link>
		<pubDate>Sat, 02 Dec 2017 03:40:32 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/2017/12/02/book-rev-lite/</guid>
		<description></description>
		<content:encoded><![CDATA[.article-container.post article img {width:100%;}]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 11:40:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 03:40:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[book-rev-lite]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[custom_css]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
	</item>
	<item>
		<title>首页</title>
		<link>https://blog.wj2015.com/2017/12/02/%e9%a6%96%e9%a1%b5/</link>
		<pubDate>Sat, 02 Dec 2017 05:24:27 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/2017/12/02/%e9%a6%96%e9%a1%b5/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 13:24:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 05:24:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%a6%96%e9%a1%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95"><![CDATA[顶部菜单]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[52]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://blog.wj2015.com]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>charitas-lite</title>
		<link>https://blog.wj2015.com/2018/04/09/charitas-lite/</link>
		<pubDate>Mon, 09 Apr 2018 11:44:13 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/2018/04/09/charitas-lite/</guid>
		<description></description>
		<content:encoded><![CDATA[.entry-content blockquote{margin: 0 0.5em;}
.entry-content blockquote p{font-size:16px;}
p img{max-width:100%;}
code, kbd{display:inline;}
.long-description p {line-height: 32px;font-size: 16px;text-align: justify; color: #1c1f21;margin: 24px 0 !important}
h1, h2, h3, h4, h5, h6 {line-height: 32px;font-weight: 600;margin: 22px 0 10px;}]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date><![CDATA[2018-04-09 19:44:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-09 11:44:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[charitas-lite]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[custom_css]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
	</item>
	<item>
		<title>temp</title>
		<link>https://blog.wj2015.com/2021/01/25/%e5%88%86%e4%ba%ab%e4%b8%80%e4%b8%8b-vue-%e4%b8%ad-nexttick-%e7%9a%84%e4%bd%bf%e7%94%a8/temp-2/</link>
		<pubDate>Mon, 25 Jan 2021 02:26:59 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/01/temp.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>648</wp:post_id>
		<wp:post_date><![CDATA[2021-01-25 10:26:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-25 02:26:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[temp-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>646</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/01/temp.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/01/temp.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2100;s:6:"height";i:1400;s:4:"file";s:17:"2021/01/temp.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"temp-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:17:"temp-300x200.jpeg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:17:"temp-768x512.jpeg";s:5:"width";i:768;s:6:"height";i:512;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:18:"temp-1024x683.jpeg";s:5:"width";i:1024;s:6:"height";i:683;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:17:"temp-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:17:"temp-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:18:"temp-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wp_editor_md_4c85c1d5f1241daf382ee7541007228a</title>
		<link>https://blog.wj2015.com/2021/02/07/%e6%88%91%e7%9a%842020%e5%b9%b4%e8%ae%b0-%e5%a4%a7%e6%b5%aa%e6%bd%ae%e4%b8%8b%e7%9a%84%e5%b0%8f%e5%b0%8f%e6%89%93%e5%b7%a5%e4%ba%ba/wp_editor_md_4c85c1d5f1241daf382ee7541007228a/</link>
		<pubDate>Sun, 07 Feb 2021 09:06:25 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>669</wp:post_id>
		<wp:post_date><![CDATA[2021-02-07 17:06:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-07 09:06:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wp_editor_md_4c85c1d5f1241daf382ee7541007228a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>651</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/02/wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2272;s:6:"height";i:1504;s:4:"file";s:59:"2021/02/wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:59:"wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:59:"wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-300x199.jpg";s:5:"width";i:300;s:6:"height";i:199;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:59:"wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-768x508.jpg";s:5:"width";i:768;s:6:"height";i:508;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:60:"wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-1024x678.jpg";s:5:"width";i:1024;s:6:"height";i:678;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:59:"wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:59:"wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:60:"wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DSC_8900_zip</title>
		<link>https://blog.wj2015.com/dsc_8900_zip/</link>
		<pubDate>Thu, 11 Mar 2021 05:08:03 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/03/DSC_8900_zip.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>672</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:08:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:08:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dsc_8900_zip]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/03/DSC_8900_zip.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/03/DSC_8900_zip.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2992;s:6:"height";i:2000;s:4:"file";s:25:"2021/03/DSC_8900_zip.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"DSC_8900_zip-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:25:"DSC_8900_zip-300x201.jpeg";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:25:"DSC_8900_zip-768x513.jpeg";s:5:"width";i:768;s:6:"height";i:513;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:26:"DSC_8900_zip-1024x684.jpeg";s:5:"width";i:1024;s:6:"height";i:684;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:25:"DSC_8900_zip-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:25:"DSC_8900_zip-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:26:"DSC_8900_zip-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-DSC_8900_zip-1.jpeg</title>
		<link>https://blog.wj2015.com/cropped-dsc_8900_zip-jpeg/</link>
		<pubDate>Thu, 11 Mar 2021 05:10:40 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8900_zip.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>673</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:10:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:10:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-dsc_8900_zip-jpeg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8900_zip-1.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/03/cropped-DSC_8900_zip-1.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:714;s:4:"file";s:35:"2021/03/cropped-DSC_8900_zip-1.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"cropped-DSC_8900_zip-1-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"cropped-DSC_8900_zip-1-300x112.jpeg";s:5:"width";i:300;s:6:"height";i:112;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:35:"cropped-DSC_8900_zip-1-768x286.jpeg";s:5:"width";i:768;s:6:"height";i:286;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:36:"cropped-DSC_8900_zip-1-1024x381.jpeg";s:5:"width";i:1024;s:6:"height";i:381;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:35:"cropped-DSC_8900_zip-1-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:35:"cropped-DSC_8900_zip-1-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:36:"cropped-DSC_8900_zip-1-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:672;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1.jpg</title>
		<link>https://blog.wj2015.com/cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-jpg/</link>
		<pubDate>Thu, 11 Mar 2021 05:09:32 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/02/cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>675</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:09:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:09:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/02/cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/02/cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:714;s:4:"file";s:67:"2021/02/cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:67:"cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:67:"cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-300x112.jpg";s:5:"width";i:300;s:6:"height";i:112;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:67:"cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-768x286.jpg";s:5:"width";i:768;s:6:"height";i:286;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:68:"cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-1024x381.jpg";s:5:"width";i:1024;s:6:"height";i:381;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:67:"cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:67:"cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:68:"cropped-wp_editor_md_4c85c1d5f1241daf382ee7541007228a-1-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:669;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_charitas-lite]]></wp:meta_key>
			<wp:meta_value><![CDATA[1615439372]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
			<wp:meta_value><![CDATA[charitas-lite]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-DSC_8900_zip-2.jpeg</title>
		<link>https://blog.wj2015.com/cropped-dsc_8900_zip-2-jpeg/</link>
		<pubDate>Thu, 11 Mar 2021 05:11:03 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8900_zip-2.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>676</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:11:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:11:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-dsc_8900_zip-2-jpeg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8900_zip-2.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/03/cropped-DSC_8900_zip-2.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:713;s:4:"file";s:35:"2021/03/cropped-DSC_8900_zip-2.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"cropped-DSC_8900_zip-2-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"cropped-DSC_8900_zip-2-300x111.jpeg";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:35:"cropped-DSC_8900_zip-2-768x285.jpeg";s:5:"width";i:768;s:6:"height";i:285;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:36:"cropped-DSC_8900_zip-2-1024x380.jpeg";s:5:"width";i:1024;s:6:"height";i:380;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:35:"cropped-DSC_8900_zip-2-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:35:"cropped-DSC_8900_zip-2-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:36:"cropped-DSC_8900_zip-2-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:672;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_charitas-lite]]></wp:meta_key>
			<wp:meta_value><![CDATA[1615439463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
			<wp:meta_value><![CDATA[charitas-lite]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DSC_8753_zip</title>
		<link>https://blog.wj2015.com/dsc_8753_zip/</link>
		<pubDate>Thu, 11 Mar 2021 05:12:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/03/DSC_8753_zip.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>677</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dsc_8753_zip]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/03/DSC_8753_zip.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/03/DSC_8753_zip.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2992;s:6:"height";i:2000;s:4:"file";s:25:"2021/03/DSC_8753_zip.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"DSC_8753_zip-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:25:"DSC_8753_zip-300x201.jpeg";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:25:"DSC_8753_zip-768x513.jpeg";s:5:"width";i:768;s:6:"height";i:513;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:26:"DSC_8753_zip-1024x684.jpeg";s:5:"width";i:1024;s:6:"height";i:684;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:25:"DSC_8753_zip-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:25:"DSC_8753_zip-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:26:"DSC_8753_zip-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-DSC_8753_zip.jpeg</title>
		<link>https://blog.wj2015.com/cropped-dsc_8753_zip-jpeg/</link>
		<pubDate>Thu, 11 Mar 2021 05:12:25 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8753_zip.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>678</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:12:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:12:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-dsc_8753_zip-jpeg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8753_zip.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/03/cropped-DSC_8753_zip.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:822;s:4:"file";s:33:"2021/03/cropped-DSC_8753_zip.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"cropped-DSC_8753_zip-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:33:"cropped-DSC_8753_zip-300x128.jpeg";s:5:"width";i:300;s:6:"height";i:128;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:33:"cropped-DSC_8753_zip-768x329.jpeg";s:5:"width";i:768;s:6:"height";i:329;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:34:"cropped-DSC_8753_zip-1024x438.jpeg";s:5:"width";i:1024;s:6:"height";i:438;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:33:"cropped-DSC_8753_zip-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:33:"cropped-DSC_8753_zip-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:34:"cropped-DSC_8753_zip-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:677;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-DSC_8753_zip-1.jpeg</title>
		<link>https://blog.wj2015.com/cropped-dsc_8753_zip-1-jpeg/</link>
		<pubDate>Thu, 11 Mar 2021 05:13:04 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8753_zip-1.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>679</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:13:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:13:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-dsc_8753_zip-1-jpeg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8753_zip-1.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/03/cropped-DSC_8753_zip-1.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:874;s:4:"file";s:35:"2021/03/cropped-DSC_8753_zip-1.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"cropped-DSC_8753_zip-1-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"cropped-DSC_8753_zip-1-300x137.jpeg";s:5:"width";i:300;s:6:"height";i:137;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:35:"cropped-DSC_8753_zip-1-768x350.jpeg";s:5:"width";i:768;s:6:"height";i:350;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:36:"cropped-DSC_8753_zip-1-1024x466.jpeg";s:5:"width";i:1024;s:6:"height";i:466;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:35:"cropped-DSC_8753_zip-1-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:35:"cropped-DSC_8753_zip-1-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:36:"cropped-DSC_8753_zip-1-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:677;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_charitas-lite]]></wp:meta_key>
			<wp:meta_value><![CDATA[1615440049]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
			<wp:meta_value><![CDATA[charitas-lite]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DSC_8582_zip</title>
		<link>https://blog.wj2015.com/dsc_8582_zip/</link>
		<pubDate>Thu, 11 Mar 2021 05:14:37 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/03/DSC_8582_zip.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>680</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:14:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:14:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dsc_8582_zip]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/03/DSC_8582_zip.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/03/DSC_8582_zip.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2992;s:6:"height";i:2000;s:4:"file";s:25:"2021/03/DSC_8582_zip.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"DSC_8582_zip-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:25:"DSC_8582_zip-300x201.jpeg";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:25:"DSC_8582_zip-768x513.jpeg";s:5:"width";i:768;s:6:"height";i:513;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:26:"DSC_8582_zip-1024x684.jpeg";s:5:"width";i:1024;s:6:"height";i:684;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:25:"DSC_8582_zip-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:25:"DSC_8582_zip-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:26:"DSC_8582_zip-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-DSC_8582_zip.jpeg</title>
		<link>https://blog.wj2015.com/cropped-dsc_8582_zip-jpeg/</link>
		<pubDate>Thu, 11 Mar 2021 05:14:52 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8582_zip.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>681</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:14:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:14:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-dsc_8582_zip-jpeg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8582_zip.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/03/cropped-DSC_8582_zip.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:713;s:4:"file";s:33:"2021/03/cropped-DSC_8582_zip.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"cropped-DSC_8582_zip-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:33:"cropped-DSC_8582_zip-300x111.jpeg";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:33:"cropped-DSC_8582_zip-768x285.jpeg";s:5:"width";i:768;s:6:"height";i:285;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:34:"cropped-DSC_8582_zip-1024x380.jpeg";s:5:"width";i:1024;s:6:"height";i:380;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:33:"cropped-DSC_8582_zip-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:33:"cropped-DSC_8582_zip-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:34:"cropped-DSC_8582_zip-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:680;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DSC_8039_zip</title>
		<link>https://blog.wj2015.com/dsc_8039_zip/</link>
		<pubDate>Thu, 11 Mar 2021 05:17:25 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/03/DSC_8039_zip.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>682</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:17:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:17:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dsc_8039_zip]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/03/DSC_8039_zip.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2992;s:6:"height";i:2000;s:4:"file";s:25:"2021/03/DSC_8039_zip.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"DSC_8039_zip-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:25:"DSC_8039_zip-300x201.jpeg";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:25:"DSC_8039_zip-768x513.jpeg";s:5:"width";i:768;s:6:"height";i:513;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:26:"DSC_8039_zip-1024x684.jpeg";s:5:"width";i:1024;s:6:"height";i:684;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:25:"DSC_8039_zip-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:25:"DSC_8039_zip-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:26:"DSC_8039_zip-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/03/DSC_8039_zip.jpeg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-DSC_8039_zip-1.jpeg</title>
		<link>https://blog.wj2015.com/cropped-dsc_8039_zip-jpeg/</link>
		<pubDate>Thu, 11 Mar 2021 05:18:11 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8039_zip.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>683</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 13:18:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-11 05:18:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-dsc_8039_zip-jpeg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/03/cropped-DSC_8039_zip-1.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/03/cropped-DSC_8039_zip-1.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:714;s:4:"file";s:35:"2021/03/cropped-DSC_8039_zip-1.jpeg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"cropped-DSC_8039_zip-1-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"cropped-DSC_8039_zip-1-300x112.jpeg";s:5:"width";i:300;s:6:"height";i:112;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:35:"cropped-DSC_8039_zip-1-768x286.jpeg";s:5:"width";i:768;s:6:"height";i:286;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:36:"cropped-DSC_8039_zip-1-1024x381.jpeg";s:5:"width";i:1024;s:6:"height";i:381;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:35:"cropped-DSC_8039_zip-1-272x150.jpeg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:35:"cropped-DSC_8039_zip-1-500x277.jpeg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:36:"cropped-DSC_8039_zip-1-1200x661.jpeg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:682;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>QQ20210812-104143@2x</title>
		<link>https://blog.wj2015.com/2021/08/12/%e4%bd%bf%e7%94%a8-vue3-vite-elementui-%e5%bc%80%e5%8f%91%e4%b8%80%e4%b8%aa-utools-markdown-%e7%bc%96%e8%be%91%e5%99%a8%e6%8f%92%e4%bb%b6/qq20210812-1041432x/</link>
		<pubDate>Thu, 12 Aug 2021 03:19:34 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2021/08/QQ20210812-104143@2x.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>695</wp:post_id>
		<wp:post_date><![CDATA[2021-08-12 11:19:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-12 03:19:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq20210812-1041432x]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>689</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2021/08/QQ20210812-104143@2x.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2021/08/QQ20210812-104143@2x.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1600;s:6:"height";i:1200;s:4:"file";s:32:"2021/08/QQ20210812-104143@2x.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"QQ20210812-104143@2x-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"QQ20210812-104143@2x-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:32:"QQ20210812-104143@2x-768x576.png";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:33:"QQ20210812-104143@2x-1024x768.png";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:9:"image/png";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:32:"QQ20210812-104143@2x-272x150.png";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:32:"QQ20210812-104143@2x-500x277.png";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:9:"image/png";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:33:"QQ20210812-104143@2x-1200x661.png";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screenshot-20220322-100830</title>
		<link>https://blog.wj2015.com/2022/03/22/alchemy%e3%80%81geth-%e6%8e%a8%e8%8d%90%e7%9a%84-gasprice-%e6%98%af%e6%80%8e%e4%b9%88%e6%9d%a5%e7%9a%84/screenshot-20220322-100830/</link>
		<pubDate>Tue, 22 Mar 2022 02:08:55 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2022/03/screenshot-20220322-100830.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>706</wp:post_id>
		<wp:post_date><![CDATA[2022-03-22 10:08:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-03-22 02:08:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screenshot-20220322-100830]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>705</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2022/03/screenshot-20220322-100830.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2022/03/screenshot-20220322-100830.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2247;s:6:"height";i:1416;s:4:"file";s:38:"2022/03/screenshot-20220322-100830.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"screenshot-20220322-100830-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"screenshot-20220322-100830-300x189.png";s:5:"width";i:300;s:6:"height";i:189;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:38:"screenshot-20220322-100830-768x484.png";s:5:"width";i:768;s:6:"height";i:484;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:39:"screenshot-20220322-100830-1024x645.png";s:5:"width";i:1024;s:6:"height";i:645;s:9:"mime-type";s:9:"image/png";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:38:"screenshot-20220322-100830-272x150.png";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:38:"screenshot-20220322-100830-500x277.png";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:9:"image/png";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:39:"screenshot-20220322-100830-1200x661.png";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nick-morrison-FHnnjk1Yj7Y-unsplash</title>
		<link>https://blog.wj2015.com/2022/04/10/%e3%80%90%e8%bd%af%e8%80%83%e7%9f%a5%e8%af%86%e6%80%bb%e7%bb%93%e3%80%91%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f/nick-morrison-fhnnjk1yj7y-unsplash/</link>
		<pubDate>Sun, 10 Apr 2022 02:33:13 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2022/04/nick-morrison-FHnnjk1Yj7Y-unsplash.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>725</wp:post_id>
		<wp:post_date><![CDATA[2022-04-10 10:33:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-04-10 02:33:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nick-morrison-fhnnjk1yj7y-unsplash]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>724</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2022/04/nick-morrison-FHnnjk1Yj7Y-unsplash.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2022/04/nick-morrison-FHnnjk1Yj7Y-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4608;s:6:"height";i:3456;s:4:"file";s:46:"2022/04/nick-morrison-FHnnjk1Yj7Y-unsplash.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:46:"nick-morrison-FHnnjk1Yj7Y-unsplash-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:46:"nick-morrison-FHnnjk1Yj7Y-unsplash-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:46:"nick-morrison-FHnnjk1Yj7Y-unsplash-768x576.jpg";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:47:"nick-morrison-FHnnjk1Yj7Y-unsplash-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:46:"nick-morrison-FHnnjk1Yj7Y-unsplash-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:46:"nick-morrison-FHnnjk1Yj7Y-unsplash-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:47:"nick-morrison-FHnnjk1Yj7Y-unsplash-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>photo-1526374965328-7f61d4dc18c5</title>
		<link>https://blog.wj2015.com/2022/03/22/%e5%8c%ba%e5%9d%97%e9%93%be%e6%98%af%e6%80%8e%e6%a0%b7%e4%bf%9d%e8%af%81%e6%95%b0%e6%8d%ae%e4%b8%8d%e8%a2%ab%e7%af%a1%e6%94%b9%e7%9a%84%ef%bc%9f/photo-1526374965328-7f61d4dc18c5/</link>
		<pubDate>Sun, 10 Apr 2022 03:02:46 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/wp-content/uploads/2022/03/photo-1526374965328-7f61d4dc18c5.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>728</wp:post_id>
		<wp:post_date><![CDATA[2022-04-10 11:02:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-04-10 03:02:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[photo-1526374965328-7f61d4dc18c5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>701</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://blog.wj2015.com/wp-content/uploads/2022/03/photo-1526374965328-7f61d4dc18c5.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2022/03/photo-1526374965328-7f61d4dc18c5.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2670;s:6:"height";i:1780;s:4:"file";s:44:"2022/03/photo-1526374965328-7f61d4dc18c5.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"photo-1526374965328-7f61d4dc18c5-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:44:"photo-1526374965328-7f61d4dc18c5-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:44:"photo-1526374965328-7f61d4dc18c5-768x512.jpg";s:5:"width";i:768;s:6:"height";i:512;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:45:"photo-1526374965328-7f61d4dc18c5-1024x683.jpg";s:5:"width";i:1024;s:6:"height";i:683;s:9:"mime-type";s:10:"image/jpeg";}s:25:"charitas-lite-small-thumb";a:4:{s:4:"file";s:44:"photo-1526374965328-7f61d4dc18c5-272x150.jpg";s:5:"width";i:272;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:26:"charitas-lite-medium-thumb";a:4:{s:4:"file";s:44:"photo-1526374965328-7f61d4dc18c5-500x277.jpg";s:5:"width";i:500;s:6:"height";i:277;s:9:"mime-type";s:10:"image/jpeg";}s:23:"charitas-lite-big-thumb";a:4:{s:4:"file";s:45:"photo-1526374965328-7f61d4dc18c5-1200x661.jpg";s:5:"width";i:1200;s:6:"height";i:661;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jeffrey Wang的个人博客</title>
		<link>https://blog.wj2015.com/2017/12/02/jeffrey-wang%e7%9a%84%e4%b8%aa%e4%ba%ba%e5%8d%9a%e5%ae%a2/</link>
		<pubDate>Sat, 02 Dec 2017 05:33:30 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/2017/12/02/jeffrey-wang%e7%9a%84%e4%b8%aa%e4%ba%ba%e5%8d%9a%e5%ae%a2/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 13:33:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 05:33:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jeffrey-wang%e7%9a%84%e4%b8%aa%e4%ba%ba%e5%8d%9a%e5%ae%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95%ef%bc%882%ef%bc%89"><![CDATA[顶部菜单（2）]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[61]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://blog.wj2015.com]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>通过heartbeat实现高可用</title>
		<link>https://blog.wj2015.com/?p=95</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=95</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date><![CDATA[2017-12-05 10:25:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql数据库的锁表与解锁</title>
		<link>https://blog.wj2015.com/?p=97</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>锁表</h1>

<code>flush tables with read lock;</code>

<h1>解锁</h1>

<code>unlock tables;</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date><![CDATA[2017-12-05 16:14:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP+Apache/Nginx修改最大上传文件限制的注意事项</title>
		<link>https://blog.wj2015.com/?p=113</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=113</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date><![CDATA[2018-01-24 19:23:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apache"><![CDATA[apache]]></category>
		<category domain="post_tag" nicename="fileupload"><![CDATA[fileupload]]></category>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<category domain="post_tag" nicename="%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0"><![CDATA[文件上传]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>微信小程序下如何修改数据中某个对象的内容</title>
		<link>https://blog.wj2015.com/?p=116</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date><![CDATA[2019-01-09 10:15:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>当PHP读取列表数据需要关联其他表时，怎么做才是最优的？</title>
		<link>https://blog.wj2015.com/?p=143</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>背景</h1>

在项目中，总是会遇见读取一个表关联另外一个表的情况，比如操作日志表中存储了users表里的uid。但现在我想在显示操作日志时同时显示uid对应的用户名称，怎么解决这个问题才是效率最高，数据库占用最低的呢？

<h1>解决方法1 - 级联</h1>

<h1>解决方法2 - 循环</h1>

<h1>解决方法3 - 循环进化版</h1>

先使用循环遍历取出来的数据，将需要获取的id做成一个数组，然后让字表SELECT IN(取出来的id)，并将id与数据对应，最后再循环一次数据最后组合成最终的数组。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2018-03-13 15:59:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>kali玩转暴力破解</title>
		<link>https://blog.wj2015.com/?p=178</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>背景</h1>

上课的时候老师教了一招暴力破解，主要用于硬跑网站用户的用户密码，适用于撞库等情况。

<h2>准备工作</h2>

kali Linux 或者windows下安装Burp suite
1. 安装JRE
1. burp suite
代理过程

代理填写为127.0.0.1:8080，burp 中打开 interept，抓捕报文
选择爆破方法，队列爆破，用户名字典，密码字典]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date><![CDATA[2018-03-31 00:09:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>kali for Windows下的安装及体验</title>
		<link>https://blog.wj2015.com/?p=185</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=185</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date><![CDATA[2018-03-30 19:35:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>超详细！从数据帧到PHP动态解析的网络流程分析</title>
		<link>https://blog.wj2015.com/?p=195</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=195</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>背景</h1>

有时候会遇到同学问我，为什么PHP在页面显示完毕后不能继续执行逻辑功能、微信开发推送事件时使用echo等输出调试报错 等等。
其实，如果理解了数据是如何从我们浏览器传输到服务器，又如何从服务器返回我们需要的信息，PHP/其他动态语言 又是如何实现动态网页的，以上问题就迎刃而解了。

<h1>发包</h1>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date><![CDATA[2018-03-31 09:58:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP使用GD2翻转PNG所遇到的问题</title>
		<link>https://blog.wj2015.com/?p=226</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>背景</h1>

项目中有需要用到旋转上传的PNG图片，经过一番搜索，发现GD库自带imagerotate()可以翻转图片，但是在翻转png图片时，总是出现黑背景。自己尝试了很多次也在网上找了很久都没有找到想要的答案，经过一番探(cai)索(keng)，最终在php.net中找到了答案。

<h1>问题还原</h1>

首先，准备一张需要旋转的png图片，]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date><![CDATA[2018-04-20 15:12:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何优雅的“要求”用户竖屏浏览</title>
		<link>https://blog.wj2015.com/?p=229</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=229</guid>
		<description></description>
		<content:encoded><![CDATA[<ol start="1.">
<li>使用媒体查询，控制实际逻辑内容显示或者提示竖屏的内容显示</li>
<li>使用</li>
</ol start="1.">]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2018-04-26 17:17:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>为PHP安装一个Swoole扩展</title>
		<link>https://blog.wj2015.com/?p=285</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=285</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date><![CDATA[2018-08-29 15:10:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>《腾讯传》 - 互联网流量变现历程</title>
		<link>https://blog.wj2015.com/?p=295</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=295</guid>
		<description></description>
		<content:encoded><![CDATA[# 从生活说起
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date><![CDATA[2018-10-12 10:16:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e9%9a%8f%e7%ac%94"><![CDATA[随笔]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NextCloud 使用及部署问题小记</title>
		<link>https://blog.wj2015.com/?p=316</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=316</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>nextcloud 是神魔</h2>

nextcloud 是一个开源的网盘项目，支持 web、Android、IOS、Windows、Linux 等平台，类似于较为常见的 『百度网盘』等，但是服务端部署于自己的服务器，数据存储于自己的服务器中，比较安全可靠。

<h2>服务器选择</h2>

服务器可以选用 云服务商提供的 VPS，也可以结合『树莓派』或者『家里不用的笔记本』搭建，不过一般家庭都是内网，没有公网IP，这时候可以选择使用 <code>ngrok</code> 或者 <code>frp</code> 实现内网穿透，就可以通过服务商提供的域名访问网盘项目了，如果希望自定义域名，还可做 <code>CNAME</code> 解析，或者 <code>nginx</code> 做反向代理，从而使用自己的域名，比如 <code>https://nextcloud.wj2015.com</code>

<h5>网上的免费 ngrok 服务</h5>

使用方法都大同小异，看官方的文档即可
<a href="http://ngrok.ciqiuwl.cn/">http://ngrok.ciqiuwl.cn/</a>
<a href="https://www.ngrok.cc/">https://www.ngrok.cc/</a>

<blockquote>
  如果你有自己的VPS，然后觉得网上免费的 ngrok 太慢不好用的话，可以选择自己搭一个，右边是搭建教程，→_→，
</blockquote>

<h2>安装及部署</h2>

创作中...

<h2>优化加速</h2>

<h3>使用Opcache加快PHP的执行速度</h3>

<h2>occ 脚本的使用</h2>

使用 occ 工具可以实现 nextcloud 维护模式的开启和启动，比如：

<pre><code class="language-shell line-numbers">[root@JeffreyWang nextcloud]# sudo -u nginx php occ maintenance:mode --off
Maintenance mode disabled
</code></pre>

--off 表示关闭维护模式
--on 表示开启维护模式

<h2>版本更新</h2>

管理员登录，找到 『基本设置』>『打开更新器』>『开始更新』即可
<img src="https://blog.wj2015.com/wp-content/uploads/2018/11/b7c9a030ba84e49e792bef96eba046ba.png" alt="" />
<img src="https://blog.wj2015.com/wp-content/uploads/2018/11/367f9a247edf9a8807376c92b768cd14.png" alt="" />

<h4>特殊情况</h4>

<h5>更新失败，导致进入维护模式</h5>

进入 nextcloud 源码目录，执行 occ 工具，关闭维护模式即可，注意 <code>sudo -u xxx</code>，xxx 表示 <code>php-fpm</code> 的执行用户

<pre><code class="language-shell line-numbers">[root@JeffreyWang nextcloud]# sudo -u nginx php occ maintenance:mode --off
</code></pre>

如果非 <code>php-fpm</code> 执行，会报如下错误：

<pre><code class="language-shell line-numbers">[root@JeffreyWang nextcloud]# php occ maintenance:mode --off
Console has to be executed with the user that owns the file config/config.php
Current user: root
Owner of config.php: nginx
Try adding 'sudo -u nginx ' to the beginning of the command (without the single quotes)
</code></pre>

<h5>下载或某步骤失败，导致无法再次进入更新</h5>

点击<code>打开更新器</code>，直接报如下错误：

<blockquote>
  Step N is currently in process. Please reload this page later.
</blockquote>

将 <code>nextcloud-data</code> 目录下升级目录删掉即可，<strong>注意，不是源码目录，是数据目录，在 config/config.php 里边的 datadirectory 属性可以看到</strong>，如下：

<pre><code class="language-shell line-numbers">[root@JeffreyWang nextcloud]# rm -rf nextcloud-data/updater-somerandomstring/.step
</code></pre>

再次进入即可]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date><![CDATA[2018-11-21 12:31:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>https://blog.wj2015.com/2019/08/27/404/</link>
		<pubDate>Tue, 27 Aug 2019 07:28:28 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/blog/2019/08/27/404/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date><![CDATA[2019-08-27 15:28:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-27 07:28:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[404]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95"><![CDATA[顶部菜单]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>https://blog.wj2015.com/2019/08/27/405/</link>
		<pubDate>Tue, 27 Aug 2019 07:28:28 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/blog/2019/08/27/405/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>405</wp:post_id>
		<wp:post_date><![CDATA[2019-08-27 15:28:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-27 07:28:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[405]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95"><![CDATA[顶部菜单]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>https://blog.wj2015.com/2019/08/27/406/</link>
		<pubDate>Tue, 27 Aug 2019 07:28:29 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/blog/2019/08/27/406/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>406</wp:post_id>
		<wp:post_date><![CDATA[2019-08-27 15:28:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-27 07:28:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[406]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95"><![CDATA[顶部菜单]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>算法·常用排序算法思路</title>
		<link>https://blog.wj2015.com/?p=452</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=452</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>前言</h1>

上学的时候就对排序这一块理解不甚透彻，像快速排序看了很久也没留下深刻的印象，最近看了《小灰的算法之旅》，总算是把这块系统的看了一遍，遂编写博客分享出来～

<h2>算法的时间复杂度</h2>

在时间复杂度的计算中，一次基本操作记为1，输入数据的数据规模一般用N表示；程序执行的执行时间一般都可以用函数 T(N) 表示出来
比如说 『计算1 + (1 + 2) + (1 + 2 + 3) + (1 + 2 .... + 100)』的如下两个算法，执行时间表示如下：
算法1，执行时间 T(N) = 1 + 2 + 3 + ... + N = (1 + N) * N / 2 = 1/2 + N^2/2

<pre><code class="language-python line-numbers">result = 0
maxNum = 100
for i in range(1, maxNum+1):
    for j in range(1, i + 1):
        result += j
print(result)
</code></pre>

算法2，执行时间 T(N) = N：

<pre><code class="language-python line-numbers">result = 0
maxNum = 100
for i in range(1, maxNum + 1):
    result = result * 2 + i
print(result)
</code></pre>

但是纯粹的执行时间看起来比较累，然后衍生了 O(N) 表示法，遵循如下规则计算而出：

<ul>
<li>运行时间实常数级别，则使用常数1表示</li>
<li>只保留T(N)中的阶数最高项</li>
<li>最高阶存在，省去最高阶前方的系数</li>
</ul>

比如，

<blockquote>
  T(N) = 1/2 + 2*N + N^2/2 => O(N) = N^2
  T(N) = N => O(N) = N
  T(N) = 100 => O(N) = 1
</blockquote>

空间复杂度也使用 O(N) 表示法，用于衡量额外空间的占用情况

<h2>八大排序算法</h2>

<blockquote>
  void BubbleSort();//冒泡
  void SelectSort();//选择
  void InsertSort();//直接插入
  void ShellSort();//希尔
  void HeapSort();//堆排
  void QuickSort();//快排
  void MegerSort();//归并
  void RadixSort();//基数(桶排序)
</blockquote>

<h1>最基础的排序，冒泡</h1>

<h2>改进1：选择排序</h2>

<h2>改进2：鸡尾酒排序</h2>

<h1>何为分治？桶排序和归并排序</h1>

<h1>一听名字就很厉害，快速排序</h1>

<h2>改进1：基数选取</h2>

<h2>改进2：双向选择和单向选择</h2>

<h1>时间复杂度为O(N)？位图排序</h1>

<h1>参考链接</h1>

<a href="https://blog.csdn.net/Gunanhuai/article/details/102407016">八大排序（C语言版）</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[上学的时候就对排序这一块理解不甚透彻，像快速排序看了很久也没留下深刻的印象，最近看了《小灰的算法之旅》，总算是把这块系统的看了一遍，遂编写博客分享出来～]]></excerpt:encoded>
		<wp:post_id>452</wp:post_id>
		<wp:post_date><![CDATA[2019-12-13 20:11:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Thinkphp中关于容器和门面的应用</title>
		<link>https://blog.wj2015.com/?p=465</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=465</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

众·所·周·知·，Think PHP5的设计与 Laravel 十分相似，内部也使用 容器、interface、trait 来进行代码复用和拆分，在代码结构规划上也可以使用这些特性给代码解耦，便于日后扩展

<h2>一些必须知道的概念复习</h2>

<h3>容器是什么</h3>

简单来说就是类的实例化管理工具，比如我想得到一个类的实例，最简单的方式是使用 <code>new</code> 语法，比如如下的代码

<pre><code class="language-php line-numbers">class Demo1 {
    protected $user = null;
}
$a = new Demo1();
</code></pre>

如果我下一次还需要使用这个类的实例，可能需要重复实例化或者全局变量、参数传递等方式，实现起来并不优雅，影响代码可读性，比如：

<pre><code class="language-php line-numbers">class UserModel extends \Think\Model {
    protected $table = 'user';
}

class UserLogic {
    public function login($name, $password)
    {
        $model = new UserModel();
        $user = $model-&gt;where([['name' =&gt; $name, 'password' =&gt; $password]])-&gt;get();
        if (empty($user)) {
            return false;
        } else {
            return true;
        }
    }
}

class UserController {
    public function login()
    {
        $logic = new UserLogic();
        if ($logic-&gt;login(request()-&gt;get('name'), request()-&gt;get('passwrod'))) {
            return '登陆成功';
        } else {
            return '登陆失败';
        }
    }
    public function register()
    {
        $logic = new UserLogic(); // 重复的实例化
        $logic-&gt;register(request()-&gt;only(['name', 'password']));
    }
}
</code></pre>

可以看到所有地方类的实例化都是通过 <code>new</code> 关键字实例化，这种行为称为 <code>直接耦合</code>，意思是上层类直接依赖底层的类，底层类变化会直接影响到上层类的变化，如果底层类需要 <strong>被替换</strong> ，则需要修改所有 <code>new</code> 关键字实例化的代码；
而容器就能配合实现解耦，不需要使用 <code>new</code> 关键字，替换底层类也不需要四处找依赖改代码。

下面可以看一下通过容器实现相同逻辑的代码：
<code>php</code>

<h3>依赖注入是什么</h3>

依赖注入是]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date><![CDATA[2020-02-16 17:12:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>https://blog.wj2015.com/2020/02/24/517/</link>
		<pubDate>Mon, 24 Feb 2020 03:30:36 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/2020/02/24/517/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>517</wp:post_id>
		<wp:post_date><![CDATA[2020-02-24 11:30:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-24 03:30:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[517]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95"><![CDATA[顶部菜单]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[68]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>微信小程序-基础篇(1)-小程序初体验</title>
		<link>https://blog.wj2015.com/2017/12/02/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c/</link>
		<pubDate>Sat, 02 Dec 2017 04:23:01 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>写在前面</h1>

本文仅供学习交流之用途，适用于未接触过小程序的开发人员，通过本教程，你将学到 如何创建小程序，如何使用小程序开发工具，如何调用后台API，如何使用前端框架WEUI小程序版来快速开发一款小程序。
本系列博客还会以一个“学习平台系统”为例子，教你如何使用小程序开发工具+WEUI+ThinkPHP开发一个完整的系统。
观看本博客，如果您拥有"HTML/XML"、"JS"、"php"、"前端模板引擎"基础，学习起来将会非常容易，甚至相关部分的说明可以跳过。
小程序官方文档：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html?t=2017118" title="文档地址">文档地址</a>，个人觉得官方文档写的挺好的，上手也不难，特别是在有JS、mvvm基础的情况下。

<h1>本篇博客内容概览</h1>

<ul>
<li><a href="#注册微信小程序">注册微信小程序</a></li>
<li><a href="#利器-小程序开发工具">利器-小程序开发工具</a></li>
<li><a href="#开发工具安装">开发工具安装</a></li>
<li><a href="#开发工具-登陆、新建项目">开发工具-登陆、新建项目</a></li>
<li><a href="#开发工具-功能介绍">开发工具-功能介绍</a></li>
<li><a href="#结语">结语</a></li>
</ul>

<h1>注册微信小程序</h1>

目前，微信小程序已面向个人开发者，可直接通过<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" title="注册小程序">注册小程序</a>注册一个个人的小程序（每个邮箱只能申请一个小程序）。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/注册页面.jpg" alt="注册页面" />
注册过程中需要绑定微信管理员，可使用个人微信绑定。
然后转向<a href="https://mp.weixin.qq.com/">登陆页面</a>，输入账号密码，验证管理员身份之后可进入小程序管理平台。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/登陆页面.jpg" alt="登录页面" />
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/扫码登陆.png" alt="扫码登陆" />
新账号进入平台后，可在 "设置" => "开发设置"中找到appid,appSecret等信息，这些参数是调用某些微信官方API所必要的。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/开发设置.png" alt="开发者设置" />
<strong>特别注意：AppSecret微信平台中只能 生成/重置 不能保存，处于安全考虑appSecret也不要直接出现在小程序的前端代码中</strong>
至此，一个微信小程序就建好了，下一步我们来介绍小程序的开发工具及小程序运行流程。

<h1>利器-小程序开发工具</h1>

古人云，工欲善其事必先利其器，微信为了方便开发者对小程序和微信公众号的开发，推出了一款及调试、预览、上传代码、体验测试等一系列方便功能的软件：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=2017119" title="小程序开发工具">小程序开发工具</a>

<h2>开发工具安装</h2>

首先，安装这个工具，选择自己系统对应的小程序版本，下载完毕之后进行安装，<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=2017119" title="小程序开发工具">小程序开发各版本下载</a>
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-下载.png" alt="下载截图" />
然后点击下一步，下一步，下一步，傻瓜式的安装：
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-1.png" alt="步骤一" />
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-2.png" alt="步骤二" />
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-3.png" alt="步骤三" />
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/安装过程-4.png" alt="步骤四" />

<h2>开发工具-登陆、新建项目</h2>

安装完毕之后打开，需要使用微信登录，就用注册时绑定的微信扫码即可：
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/工具-登陆页.png" alt="登陆" />
然后选择小程序
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/工具-选择小程序.png" alt="选择小程序" />
刚安装的开发工具，里边是没有项目的，所以需要我们自己新建一个
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/工具-新建小程序.png" alt="新建项目" />
填写相关的项目信息，以及我们在"设置" > "开发设置"里边的appid
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/工具-配置小程序路径.png" alt="填写信息" />
注1：这里的项目路径，文中指定的是“WEUI小程序版”的demo，可以从<a href="https://github.com/weui/weui-wxss/">下载WEUI</a>中获取并体验，打开的时候记得是打开项目目录下的dist目录(<strong>D:/project/weui/dist/</strong>)，而不是直接的项目目录(<strong>D:/project/weui/</strong>)。
注2：对于初学者来说，使用"WEUI小程序DEMO"可能会比较混乱，所以，这里的路径也可以选择一个空目录，然后建立微信官方的小程序DEMO。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/工具-新建普通快速小程序.png" alt="" />
官方样例打开之后就像这样：
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-首图-2.png" alt="" />

<h2>开发工具-功能介绍</h2>

点击项目进去之后主页面是这个样子的，跟Chrome的调试工具很像有木有O(∩_∩)O，亲切感一下就上来了：
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-首图.png" alt="项目首图" />

区域划分(详细说明请见<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html" title="官方文档">官方文档</a>)
预览区：在编辑器区ctrl+s或者点击编译按钮，预览区自动刷新，方便调试。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-ctrlshiftc.png" alt="预览区" />
编辑器区：主要的编码工作可以在这里完成，虽然比不上sublime，atom之类的文本编辑器，但微信针对微信开发做的API提示用起来也挺方便的。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-编辑器区.png" alt="编辑器区" />
调试区：与chrome的调试区功能基本一致，支持按CTRL+SHIFT+C快速调试，network区域能对微信调用API等网络操作进行监听，点击详情就能看到这次发包的详细内容。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/小程序开发工具-network-http报文.png" alt="调试区" />

<h1>结语</h1>

至此，小程序的基本准备工作就做好了，下一步我们就从认识小程序的执行机制、目录结构、模板解析引擎来进一步了解小程序。]]></content:encoded>
		<excerpt:encoded><![CDATA[本文仅供学习交流之用途，适用于未接触过小程序的开发人员，通过本教程，你将学到 如何创建小程序，如何使用小程序开发工具，如何调用后台API，如何使用前端框架WEUI小程序版来快速开发一款小程序。
本系列博客还会以一个“学习平台系统”为例子，教你如何使用小程序开发工具+WEUI+ThinkPHP开发一个完整的系统。
观看本博客，如果您拥有"HTML/XML"、"JS"、"php"、"前端模板引擎"基础，学习起来将会非常容易，甚至相关部分的说明可以跳过。]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2017-12-02 12:23:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-02 04:23:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%871-%e5%b0%8f%e7%a8%8b%e5%ba%8f%e5%88%9d%e4%bd%93%e9%aa%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%b0%8f%e7%a8%8b%e5%ba%8f"><![CDATA[小程序]]></category>
		<category domain="category" nicename="%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f"><![CDATA[微信小程序]]></category>
		<category domain="post_tag" nicename="%e5%be%ae%e4%bf%a1%e5%bc%80%e5%8f%91"><![CDATA[微信开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[73]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[137]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[35]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581483040;s:7:"payload";a:2:{i:0;a:1:{s:2:"id";i:174;}i:1;a:1:{s:2:"id";i:354;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>微信小程序-基础篇(2)-流程、模板、配置</title>
		<link>https://blog.wj2015.com/2017/12/03/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%872-%e6%b5%81%e7%a8%8b%e3%80%81%e6%a8%a1%e6%9d%bf%e3%80%81%e9%85%8d%e7%bd%ae/</link>
		<pubDate>Sun, 03 Dec 2017 13:13:10 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>写在前面</h1>

这篇博客的内容比较浅显，主要是讲小程序的文件结构和执行流程，基础比较好的可以稍微看一遍了解一下就好，下一篇博文才开始讲述wxml语法的相关内容。

<h1>小程序组织结构</h1>

以上篇博文中创建的微信官方DEMO中，我们可以清晰的看到一个简单小程序的目录结构。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/基础结构图.png" alt="" />
其中一些文件在每个小程序中都会出现，并扮演着相似的角色，比如：

<h3>小程序全局配置文件 <em>app.json</em></h3>

这个配置文件是对小程序整体做一个配置，包括所有页面路径的定义，界面，底部TAB、网络超时时间等。
官方配置样例

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-json">{
  "pages": [
    "pages/index/index",
    "pages/logs/index"
  ],
  "window": {
    "navigationBarTitleText": "Demo"
  },
  "tabBar": {
    "list": [{
      "pagePath": "pages/index/index",
      "text": "首页"
    }, {
      "pagePath": "pages/logs/logs",
      "text": "日志"
    }]
  },
  "networkTimeout": {
    "request": 10000,
    "downloadFile": 10000
  },
  "debug": true
}
</code></pre>

比较重要的配置如下：
- 页面配置
参数：pages，类型：数组
数组内每一行都是【路径+文件名】代表一个页面，路径位置是相对app.json而言的相对路径，配置时省略.wxml
注意：第一行为入口页面，小程序首先加载第一行的页面。
- 界面配置
参数：window，类型：对象
作用：用于设置小程序的状态栏、导航条、标题、窗口背景色。

比较重要的几个配置项：
    navigationBarTitleText: '默认的标题名称',
    navigationBarBackgroundColor: '#000' 导航栏背景色
    backgroundColor: '#fff' 窗体背景色
    <img src="https://blog.wj2015.com/wp-content/uploads/2017/12/config.jpg" alt="" />
- 底部TAB配置
参数：tabBar，类型：对象
作用：配置底部TAB的字体颜色，图片，边框等信息

比较重要的几个配置
    color:'#000' 
    说明：正常显示的时候，字体颜色
    selectedColor: '#f00' 
    说明：激活状态时字体颜色
    position: 'top' 
    说明：top/bottom表示TAB在顶部或底部
    list:

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-javascript">[{pagePath: '/pages/index', iconPath: '/img/xx.jpg', selectedIconPath: '/img/xx_2.jpg', text: '首页' },... ] 
</code></pre>

说明：pagePath表示pages里的路径，iconPath表示正常情况下的图标，selectedIconPath表示激活状态下的图标,text表示显示的文字
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/tabbar.jpg" alt="" />

<ul>
<li>完全参数说明：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html">官方说明</a>
注：每个页面都有以【页面名字】为名的局部配置文件&#42;.json，但里边的配置项只能配置<strong>app.json</strong>中window配置里边的内容。</li>
</ul>

<h2>程序主逻辑<em>app.js</em></h2>

这个.js文件主要是对小程序做一个全局的管理，主要任务就是实例化了一个App()对象，任何一个小程序都有且只能有一个APP()对象。
官方配置：

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-javascript">App({
  onLaunch: function(options) {
    // Do something initial when launch.
  },
  onShow: function(options) {
      // Do something when show.
  },
  onHide: function() {
      // Do something when hide.
  },
  onError: function(msg) {
    console.log(msg)
  },
  globalData: 'I am global data'
})
</code></pre>

<table>
<thead>
<tr>
  <th align="left">参数</th>
  <th align="left">类型</th>
  <th align="left">作用</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">onLaunch</td>
  <td align="left">function</td>
  <td align="left">在小程序启动的时候执行的回调</td>
</tr>
<tr>
  <td align="left">onShow</td>
  <td align="left">function</td>
  <td align="left">在小程序显示，从后台进入前台时执行</td>
</tr>
<tr>
  <td align="left">onHide</td>
  <td align="left">function</td>
  <td align="left">小程序从前台被隐藏到后台时执行</td>
</tr>
<tr>
  <td align="left">onError</td>
  <td align="left">function</td>
  <td align="left">小程序出现错误的时候执行</td>
</tr>
<tr>
  <td align="left">globalData</td>
  <td align="left">function</td>
  <td align="left">通常作为全局数据实用</td>
</tr>
</tbody>
</table>

<h2>程序公共样式<em>app.wxss</em></h2>

.wxss文件相当于网页开发中的CSS样式文件，拥有CSS的大部分特性。
app.wxss文件是全局自动加载的样式文件，所有页面都会生效。

小程序还对CSS做了扩展，可以通过import 来引入其他样式文件。

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-css">@import "./test.wxss";
p{text-alian:center;}
</code></pre>

特殊优化：尺寸单位：rpx(responsive pixel)，不同手机屏幕会显示出不同的效果。

<table>
<thead>
<tr>
  <th align="left">设备</th>
  <th align="left">rpx换算px</th>
  <th align="left">px换算rpx</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">iPhone5</td>
  <td align="left">1rpx = 0.42px</td>
  <td align="left">1px = 2.34rpx</td>
</tr>
<tr>
  <td align="left">iPhone6</td>
  <td align="left">1rpx = 0.5px</td>
  <td align="left">1px = 2rpx</td>
</tr>
<tr>
  <td align="left">iPhone5 Plus</td>
  <td align="left">1rpx = 0.552px</td>
  <td align="left">1px = 1.81rpx</td>
</tr>
</tbody>
</table>

<h2>小结</h2>

在/目录下的app.json,app.js,app.wxss均为小程序初始化时用到的文件，分别代表全局配置文件，App()对象实例化文件，全局样式文件。
App()对象每个小程序只能有一个，实例化时可以指定回掉函数，小程序在对应状态下会自动执行。
wxss样式与CSS有区别，主要是：import "common.wxss"引入其他wxss文件，还有rpx尺寸单位，不同手机屏幕将显示出不同的效果。

<h1>执行流程</h1>

小程序的执行与普通WEB-APP执行方式不一样，小程序执行时，可以理解为如下三个步骤：

<h2>下载软件包，载入配置文件</h2>

小程序执行时会将软件包的所有内容下载到用户手机中，这也注定了软件包的体积不能过大，我记得微信上的限制是2M，所以像视频资源，大的图片资源最好就不要放进去了。
下载完成后，首先加载app.json配置，读取window,tab等界面配置，以及得到上文所讲的pages参数，为加载第一个页面做准备。

<h2>加载app.js，实例化APP()</h2>

实例化每个小程序都会有的唯一一个App()对象，执行onLaunch()回调进行准备工作，回调执行完毕后开始渲染第一个页面。

<h2>渲染页面</h2>

假设，我们的<strong>app.json</strong>中的<strong>pages</strong>配置第一条是<em>/pages/index/index</em>，那么小程序将加载页面文件<em>/pages/index/index.wxml</em>，然后加载和这个页面相关的<em>/pages/index/index.json</em>、<em>/pages/index/index.wxss</em>，<em>/pages/index/index.js</em>，分别代表页面配置文件，页面样式文件，页面js文件。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/加载页面文件.png" alt="" />
注：wxml语法和index.js中的Page()对象的使用将会在下一篇博客中讲解。

<h1>总结</h1>

本篇博客简单介绍了各个文件的作用，以及简述了小程序的执行流程和页面渲染流程，由于wxml语法和Page()对象这部分的知识会比较多，所以拆分到下一篇博客中讲述。]]></content:encoded>
		<excerpt:encoded><![CDATA[这篇博客的内容比较浅显，主要是讲小程序的文件结构和执行流程，基础比较好的可以稍微看一遍了解一下就好，下一篇博文才开始讲述wxml语法的相关内容。]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2017-12-03 21:13:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-03 13:13:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f-%e5%9f%ba%e7%a1%80%e7%af%872-%e6%b5%81%e7%a8%8b%e3%80%81%e6%a8%a1%e6%9d%bf%e3%80%81%e9%85%8d%e7%bd%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%b0%8f%e7%a8%8b%e5%ba%8f"><![CDATA[小程序]]></category>
		<category domain="category" nicename="%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f"><![CDATA[微信小程序]]></category>
		<category domain="post_tag" nicename="%e5%be%ae%e4%bf%a1%e5%bc%80%e5%8f%91"><![CDATA[微信开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[22]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[34]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[242]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582456348;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:10;}i:1;a:1:{s:2:"id";i:379;}i:2;a:1:{s:2:"id";i:255;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>克隆主机之后，Linux下eth1如何改为eth0</title>
		<link>https://blog.wj2015.com/2017/12/24/%e5%85%8b%e9%9a%86%e4%b8%bb%e6%9c%ba%e4%b9%8b%e5%90%8e%ef%bc%8clinux%e4%b8%8beth1%e5%a6%82%e4%bd%95%e6%94%b9%e4%b8%baeth0/</link>
		<pubDate>Sun, 24 Dec 2017 06:55:52 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>写在前面</h1>

在日常虚拟机的使用中，很可能会使用虚拟机软件的克隆功能，但是克隆之后的主机，网卡的MAC信息跟被克隆主机的mac信息是不一样的。
由于克隆主机MAC变化，在启动网卡(<code>ifup eth0</code>)时就会产生<code>Device eth0  does not seem to be present, delaying initialization.</code>错误，就像这样：
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/aff14d0b7df83bd7a47131344fc99ccb.png" alt="" />，那么如何解决这样的问题就是这篇博客的主要内容。

<h1>产生问题原因</h1>

之所以虚拟机会让克隆主机的MAC改变，是因为在DHCP协议中或者说在内网的通信中，都是通过ARP协议将IP转换为MAC或将MAC转换为IP的，换句话说，局域网通信就是依靠MAC地址通信的，两台主机MAC地址相同则会导致
<code>/etc/sysconfig/network-script/ifcfg-eth0</code>中的网卡信息是被克隆主机的MAC，新主机的网卡已经不是那个MAC了。
查看<code>/etc/udev/rules.d/70-persistent-net.rules</code>可查看本机所有的mac信息，在里面可以看到，被克隆主机的MAC信息是eth0，新产生的MAC信息被识别为了eth1。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/62b7fc002ba5cb2ae723017d10ec1deb.png" alt="" />

<h1>解决方案</h1>

<h2>快速解决方案</h2>

将<code>/etc/sysconfig/network-script/ifcfg-eth0</code>中的MAC换成新机的MAC，并将eth0换成eth1。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/f0b18c413e720760c59df6e63463ff95.png" alt="" />
<code>ifup eth0</code>即可发现eth1被启动
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/0208660422e60d18fc30e73bd1291167.png" alt="" />
但是这种解决方法只能解决上网问题，如果说我们需要让克隆主机的网卡eth0表示第一个网卡，eth1表示第二个网卡，这种方案是行不通的，并且很容易把网卡搞混淆。

<h2>升级版解决方案</h2>

先将<code>/etc/udev/rules.d/70-persistent-net.rules</code>中eth0删掉，并将其中的eth1改为eth0，之后将<code>/etc/sysconfig/network-script/ifcfg-eth0</code>的MAC改为上面文件中的MAC。
<img src="https://blog.wj2015.com/wp-content/uploads/2017/12/4610d13b397c4944701f40871f741523.png" alt="" />
最后，重启Linux之后，ifup eth0就可以发现IP获取正常了！
PS:这里试过只重启network服务，但是不能达到预想的效果，所以就直接重启Linux了。]]></content:encoded>
		<excerpt:encoded><![CDATA[在日常虚拟机的使用中，很可能会使用虚拟机软件的克隆功能，但是克隆之后的主机，网卡的MAC信息跟被克隆主机的mac信息是不一样的。
由于克隆主机MAC变化，在启动网卡(`ifup eth0`)时就会产生`Device eth0  does not seem to be present, delaying initialization.`错误。而本文就是为了解决这样的问题而出现的。]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date><![CDATA[2017-12-24 14:55:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-24 06:55:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%8b%e9%9a%86%e4%b8%bb%e6%9c%ba%e4%b9%8b%e5%90%8e%ef%bc%8clinux%e4%b8%8beth1%e5%a6%82%e4%bd%95%e6%94%b9%e4%b8%baeth0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="eth0"><![CDATA[eth0]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="vmware"><![CDATA[Vmware]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e5%8d%a1"><![CDATA[网卡]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[108]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581666711;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:174;}i:1;a:1:{s:2:"id";i:255;}i:2;a:1:{s:2:"id";i:379;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP高并发的注意事项以及数据库计数的优化</title>
		<link>https://blog.wj2015.com/2018/02/22/php%e9%ab%98%e5%b9%b6%e5%8f%91%e7%9a%84%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9%e4%bb%a5%e5%8f%8a%e6%95%b0%e6%8d%ae%e5%ba%93%e8%ae%a1%e6%95%b0%e7%9a%84%e4%bc%98%e5%8c%96/</link>
		<pubDate>Thu, 22 Feb 2018 15:40:08 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=104</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>摘要</h1>

本文主要介绍了在对数据库更新数据，特别是使用ORM进行数据库操作时需要注意的事项，并且简单介绍了以下高频率计数的实现优化。

<h1>更新数据的注意事项</h1>

<ul>
<li>UPDATE 直接更改数据，更新的同时需要在条件中检查原始数据。
以微信扫码绑定为例：</li>
</ul>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-sql">CREATE TABLE wechat_bind(
    `wb_id`     INT(11) PRIMARY KEY COMMENT '主键',
    `openid`    CHAR(60) NOT NULL COMMENT '用户openid'
    `scene`     INT(11) NOT NULL COMMENT '场景值'
);
</code></pre>

在这个案例里，在创建二维码时插入这样一条记录，OPENID为空表示二维码可使用，不为空则视为已绑定。
一般的解决思路是：
当扫描二维码进入时，通过scene查询到openid，
<code>SELECT wechat_bind WHERE scene='xxx'</code>
如果openid为空，则执行绑定
<code>UPDATE wechat_bind SET openid='xxxxxx' WHERE wb_id=1</code>
但这样的思路在高并发的时候会出现绑定覆盖的问题，比如两个人几乎同时扫码，第一个人扫到，查询出openid为空，执行update，在update执行完毕之前，第二个扫码的进程开始，select出来的openid依旧为空，所以同样会执行update语句；由于update执行的时候会出现排他锁，一步一步执行，第二条update将会覆盖以一次的update从而造成更新异常。

<h2>解决方案</h2>

在更新数据的时候，为被更新的数据增加一条筛选条件，如：
<code>update wechat_bind SET openid='xxxx' WHERE wb_id=1 AND openid = ''</code>
现在，如果出现并发的情况，两个人同时扫码，并巧合的形成了update队列，但在这种情况，第二条update执行结果将为空，不会出现更新覆盖的现象。

<h1>有最大绑定人数的更新注意事项</h1>

<ul>
<li>假设有这这样一种情况，一张二维码可以绑定多个用户，所以，我会这样设计数据表</li>
</ul>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-sql">CREATE TABLE wechat_qrcode(
    `wqid`  INT(11) PRIMARY KEY,
    `binded`    INT(11) NOT NULL COMMENT '已绑定人数',
    `maxbind`   INT(11) NOT NULL COMMENT '最大绑定人数',
    `scene`     INT(11) NOT NULL COMMENT '场景值'
);
</code></pre>

在这个场景中，要实现最大绑定人数不超过数据库中的值，我们一般的做法是通过场景值(scene)找到最大绑定人数（maxbind）和已绑定人数(binded)，如果binded &lt; maxbind 则执行绑定，binded加一，反之提示绑定失败
<code>SELECT * FROM wechat_qrcode WHERE scene=2</code>
<code>UPDATE wechat_qrcode SET binded=binded+1 WHERE scene=2</code>
同上一种更新异常的情况，当两个用户同时扫码的时候，用户1的update可能已经将binded变成了maxbind，但取数据的时候，用户2并不知道binded已经达到maxbind了，依然执行binded+1，导致绑定用户大于最大绑定用户，解决方法也类似，将更新语句加一个筛选条件就好。
<code>UPDATE wecaht_qrcode SET binded=bind+1 WHERE scene=2 AND binded &lt; maxbind</code>
注意：这里是小于，要是判断条件为&lt;=则binded+1就可能大于maxbind了。

<h2>关于高频率计数的优化</h2>

在高并发状态下，如果借助自带并发访问队列控制的工具（redis、memecache、mysql等），系统的记录效率会受到影响，之前机缘巧合在某博客下看到了一个比较巧妙，并且效率挺高的做法。
背景：一个联网游戏，后台采用PHP编写，每次访问游戏API，API访问量+1，记得原博客所述访问量在1W/s左右
如果维护一个数据表，每次访问update相关字段会导致mysql压力增大，并且每次显示都需要访问此数据库，所以这不是一个合适的解决方案。
最后的解决方案是，使用一个文件来存储网站访问量，每次访问，都往文件后追加一个1，这样既不会造成丢失，并且数据库/内存缓存压力也不会太大
<code>&lt;?php
// 做统计
$fp = fopen('total.txt', 'a');
fwrite($fp, '1');
fclose($fp);</code>

<h1>小结</h1>

面对高并发，有时候并不需要使用事务等复杂的操作，可能有时候只是需要限制一下更新条件就能更好更方便的避免高并发数据更新错误的情况。]]></content:encoded>
		<excerpt:encoded><![CDATA[本文主要介绍了在对数据库更新数据，特别是使用ORM进行数据库操作时需要注意的事项，并且简单介绍了以下高频率计数的实现优化。]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date><![CDATA[2018-02-22 23:40:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-22 15:40:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e9%ab%98%e5%b9%b6%e5%8f%91%e7%9a%84%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9%e4%bb%a5%e5%8f%8a%e6%95%b0%e6%8d%ae%e5%ba%93%e8%ae%a1%e6%95%b0%e7%9a%84%e4%bc%98%e5%8c%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[37]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[121]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581579491;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:354;}i:1;a:1:{s:2:"id";i:145;}i:2;a:1:{s:2:"id";i:379;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nginx+php-fpm出现无法获取GET参数问题的解决办法</title>
		<link>https://blog.wj2015.com/2018/03/07/nginxphp-fpm%e5%87%ba%e7%8e%b0%e6%97%a0%e6%b3%95%e8%8e%b7%e5%8f%96get%e5%8f%82%e6%95%b0%e9%97%ae%e9%a2%98%e7%9a%84%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95/</link>
		<pubDate>Wed, 07 Mar 2018 02:28:58 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>背景</h1>

今天在配置nginx服务器的过程中，发现php能正常访问，但是$_GET始终为空，就此开始了解决问题之旅。

<h1>方法</h1>

网上的方法大多是：

<blockquote>
  将/etc/nginx/conf/conf.d/virtual.conf中对应虚拟机的try_files改变为：
  try_files $uri $uri/ /index.php?$query_string;
</blockquote>

原：

<pre class="prism-highlight line-numbers" data-start="1"><code class="language-null">location / {
            try_files $uri $uri/ /index.php?s=$args;
            # try_files $uri $uri/;
    }
</code></pre>

目标：

<pre class="prism-highlight line-numbers" data-start="1"><code class="language-null">location / {
            try_files $uri $uri/ /index.php?$query_string;
            # try_files $uri $uri/;
    }
</code></pre>

但是，亲测无效

<blockquote>
  最后，通过与功能完善的nginx配置文件进行对比，发现我在/etc/nginx/fastcgi_params中配置顺序有问题。
  经测试，SCRIPT_FILENAME参数只能在最前边，放最后就会导致$_GET为空的情况。
</blockquote>

正确配置：

<pre class="prism-highlight line-numbers" data-start="1"><code class="language-null">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
fastcgi_param  QUERY_STRING       $query_string;
fastcgi_param  REQUEST_METHOD     $request_method;
fastcgi_param  CONTENT_TYPE       $content_type;
fastcgi_param  CONTENT_LENGTH     $content_length;

fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
fastcgi_param  REQUEST_URI        $request_uri;
fastcgi_param  DOCUMENT_URI       $document_uri;
fastcgi_param  DOCUMENT_ROOT      $document_root;
fastcgi_param  SERVER_PROTOCOL    $server_protocol;
fastcgi_param  REQUEST_SCHEME     $scheme;
fastcgi_param  HTTPS              $https if_not_empty;

fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

fastcgi_param  REMOTE_ADDR        $remote_addr;
fastcgi_param  REMOTE_PORT        $remote_port;
fastcgi_param  SERVER_ADDR        $server_addr;
fastcgi_param  SERVER_PORT        $server_port;
fastcgi_param  SERVER_NAME        $server_name;

# PHP only, required if PHP was built with --enable-force-cgi-redirect
fastcgi_param  REDIRECT_STATUS    200;
# fastcgi_param PATH_INFO                $fastcgi_script_name;
</code></pre>

<h1>总结</h1>

之所以出现这个问题就是因为当初配置php-fpm参数的时候，听从网上的答案，在fastcgi_params追加了两行配置，结果浪费我1个多小时的时间，谨记教训！！！！]]></content:encoded>
		<excerpt:encoded><![CDATA[今天在配置nginx服务器的过程中，发现php能正常访问，但是$_GET始终为空，就此开始了解决问题之旅。]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2018-03-07 10:28:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-07 02:28:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[nginxphp-fpm%e5%87%ba%e7%8e%b0%e6%97%a0%e6%b3%95%e8%8e%b7%e5%8f%96get%e5%8f%82%e6%95%b0%e9%97%ae%e9%a2%98%e7%9a%84%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="post_tag" nicename="php-fpm"><![CDATA[php-fpm]]></category>
		<category domain="post_tag" nicename="%e5%8f%82%e6%95%b0%e8%8e%b7%e5%8f%96"><![CDATA[参数获取]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[122]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1580865529;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:250;}i:1;a:1:{s:2:"id";i:379;}i:2;a:1:{s:2:"id";i:93;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP5.6使用utf8mb4报Can&#039;t initialize character set utf8mb4</title>
		<link>https://blog.wj2015.com/2018/03/07/php5-6%e4%bd%bf%e7%94%a8utf8mb4%e6%8a%a5cant-initialize-character-set-utf8mb4/</link>
		<pubDate>Wed, 07 Mar 2018 13:16:59 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=125</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>背景</h1>

今天部署环境的时候，使用了mysql数据库的utf8mb4;因为之前就知道mysql版本太低不能使用utf8mb4，所以早早就准备好了mysql5.6。
结果部署好之后发现报错：Can't initialize character set utf8mb4 (path: /usr/share/mysql/charsets/) in ...

<h1>解决方法：</h1>

经过一番查找，终于在stackoverflow上找到一篇帖子，解决了这个问题
原帖：
https://stackoverflow.com/questions/33834191/php-pdoexception-sqlstatehy000-2019-cant-initialize-character-set-utf8mb4

<pre class="prism-highlight line-numbers" data-start="1"><code class="language-null">yum erase php56w-mysql
yum install php56w-mysqlnd
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[PHP使用utf8mb4报错：Can't initialize character set utf8mb4 (path: /usr/share/mysql/charsets/) in ]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date><![CDATA[2018-03-07 21:16:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-07 13:16:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php5-6%e4%bd%bf%e7%94%a8utf8mb4%e6%8a%a5cant-initialize-character-set-utf8mb4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_8e222971c9e3fcab8969ee2b3bdd3e2d]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[130]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_266af649b1a11cc425fa36ec52fe3904]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0ad666eab7e9d38aad9e7b022b83abdc]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[289]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[367]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582310286;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:287;}i:1;a:1:{s:2:"id";i:305;}i:2;a:1:{s:2:"id";i:152;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql5.6部分字段无默认值不能insert的问题</title>
		<link>https://blog.wj2015.com/2018/03/07/mysql5-6%e9%83%a8%e5%88%86%e5%ad%97%e6%ae%b5%e6%97%a0%e9%bb%98%e8%ae%a4%e5%80%bc%e4%b8%8d%e8%83%bdinsert%e7%9a%84%e9%97%ae%e9%a2%98/</link>
		<pubDate>Wed, 07 Mar 2018 13:41:35 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=127</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>背景</h1>

部署生产环境(mysql5.6)的时候，发现本来在测试环境(mysql5.5)好好的程序，到生产环境却报某字段没有默认值，不能添加的错误，经过一番资料查找，终于定位到/etc/my.cnf里配置的sql_mode身上。

<h1>处理办法</h1>

如果按照严格的规范，没有默认值的字段是不能在加入的时候忽略的，但是程序已经写在那里，修改的话工作量会很大，所以这里我选择了将<code>/etc/my.cnf</code>中的sql_mode那一行去掉。
我试过只去掉 STRICT_TANS_TABLES，但是不管用，全部注释后成功
    # Recommended in standard MySQL setup
    # sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 
    # sql-mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION

<h1>引用</h1>

mysql sql_mode 解决数据库非空无默认值依然可以插入的问题
http://blog.csdn.net/ctrlk/article/details/52742434
MySQL 5.6中的sql_mode默认设置问题
http://blog.csdn.net/micahriven/article/details/12030981]]></content:encoded>
		<excerpt:encoded><![CDATA[mysql5.6在严格模式下不填写没有默认值的数据，将报错并无法insert，在这里记录了不想修改修改程序情况下解决这个问题的方法。]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date><![CDATA[2018-03-07 21:41:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-07 13:41:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql5-6%e9%83%a8%e5%88%86%e5%ad%97%e6%ae%b5%e6%97%a0%e9%bb%98%e8%ae%a4%e5%80%bc%e4%b8%8d%e8%83%bdinsert%e7%9a%84%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="category" nicename="mysql"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[128]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_1b66c9a6eab407fa023bd6f0ee745a7c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_770e8dedafd5b3ba71089d51f650d96a]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_7ea5ffc0d634af3771997c83c0394eae]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_024e0fd7e5b7a8b6096912950c545d38]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_09fe12d83a41a4dc6b2e8398ac7441df]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_661f582acb21814f493c3b6e5a2de808]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[177]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1580213867;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:250;}i:1;a:1:{s:2:"id";i:354;}i:2;a:1:{s:2:"id";i:145;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用PHP读取视频流，IOS系统无法观看的问题解决方法</title>
		<link>https://blog.wj2015.com/2018/03/10/%e4%bd%bf%e7%94%a8php%e8%af%bb%e5%8f%96%e8%a7%86%e9%a2%91%e6%b5%81%ef%bc%8cios%e7%b3%bb%e7%bb%9f%e6%97%a0%e6%b3%95%e8%a7%82%e7%9c%8b%e7%9a%84%e9%97%ae%e9%a2%98%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95/</link>
		<pubDate>Sat, 10 Mar 2018 12:55:12 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>背景</h1>

项目中遇到了付费视频资源的问题，为隐藏视频真实地址并对观看视频的用户做权限限制，于是就想到了使用php判断当前用户权限读取视频文件，客户端视频地址指向写好的php就好，但是经过简单的代码处理后，电脑和Android并没有发现问题，但是IOS系统播放的时候死活播放不了，进行一番研究之后，得出了解决方案。

<h1>场景复现</h1>

假设我们要做一个付费视频课程的项目，设计数据库数据结构如下：

<pre><code class="language-sql line-numbers">/**
资源表，包含资源名称、购买金额、下载量等
*/
CREATE TALBE resource(
    `rid`   INT(11) PRIMARY KEY AUTO_INCREMENT,
    `rname` CHAR(40) NOT NULL COMMENT '资源名称',
    `raddr` CHAR(60) NOT NULL COMMENT '资源在服务器上实际地址',
    `rdownload` INT(11) NOT NULL DEFAULT 0 COMMENT '资源下载量',
    `rmoney`    INT(11) NOT NULL COMMENT '资源费用',
    INDEX(`rname`) COMMENT '搜索资源标题时使用索引'
)ENGINE=INNODB;
/**
资源购买记录表，检查uid和rid在此表中有记录则表示已购买
*/
CREATE TABLE resource_buy(
    `rbid`  INT(11) PRIMARY KEY AUTO_INCREMENT,
    `rid`   INT(11) NOT NULL COMMENT '购买资源id',
    `uid`   INT(11) NOT NULL COMMENT '购买用户id',
    `create_at` DATETIME NOT NULL COMMENT '购买时间',
    INDEX(`rid`, `uid`)
)ENGINE=INNODB;
</code></pre>

然后新增一个页面（<i>getresource.php</i>）（在框架中可用 控制器/方法 代替）
这是比较常规的做法，使用file_get_contents()或者readfile();直接将文件读取出来，前端使用video标签读取视频文件并播放。

<pre data-language=HTML><code class="language-markup line-numbers">&lt;video src="getresource.php" contorls="controls"&gt;
</code></pre>

<pre><code class="language-php line-numbers">&lt;?php
// 此处理仅供参考，此处出于照顾对框架不熟悉的人，使用的原生php书写，没有做防sql注入等安全措施，建议使用TP、Laravel等框架的 模型/ORM实现数据库增删改查。
$rid = intval($_GET['rid']);
$uid = $_SESSION['uid'];

$con = mysql_connect('127.0.0.1', 'root', 'root');
// 资源有效性
$res = mysql_query('SELECT rid, rname, raddr FROM resource WHERE rid = '.$rid);
$resource = mysql_fetch_array($res);
if($resource){
    // 检测是否购买
    $res = mysql_query('SELECT rbid FROM resource_buy WHERE rid = '.$rid.' AND uid = '.$uid.' LIMIT 1');
    $buydata = mysql_fetch_array($res);
    if($buydata){
        // 已购买资源，返回资源内容
        // 检测资源是否存在等操作，存在则读取文件
        if(file_exists($resource['raddr'])){
            // 判断文件类型，返回相应的Content-Type，推荐使用fileinfo()
            $fileinfo = finfo_open(FILEINFO_MIME);
            $mime = file_info($fileinfo, $resource['raddr']);
            finfo_close($fileinfo);
            header('Content-Type:'.$mime);
            // 读取文件，不考虑视频分段，使用readfile()/file_get_content()均可
            readfile($resource['raddr']);
        } else {
            echo '资源地址无效，请联系管理员';
        }
    } else {
        echo '请购买后重试';
    }
} else {
    echo '资源不存在';
}
mysql_close($con);
</code></pre>

我最开始的想法就是这样，然后使用Chrome、Android进行测试也并没有发现问题，直到有一天，我拿出了IOS。。。点击 播放 ，然后出现了一个小叉叉，视频<font color="red">无法加载</font>。
当时的我百思不得其解，于是开始在全网搜集资料，然后我发现并不是我一个人遇到了这个问题，经过搜索，最终我锁定了一片知乎上的帖子，根据答主所述原理，成功使用PHP解决了这个问题。
吃水不忘挖井人，原帖奉上：<a href="https://www.zhihu.com/question/41818719" title="video标签在iPhone手机上不能播放？万能的知乎大神请指引我，实在没办法了">video标签在iPhone手机上不能播放？万能的知乎大神请指引我，实在没办法了</a>

<h1>问题成因</h1>

chrome对视频的兼容性比较好，有时候请求资源，header里边的"Range"是"0-"，意思是请求获取该视频全部文件，而我们<font color="red">恰好将文件全部返回了</font>，所以Chrome中可以正常使用。
但是在IOS中，无论是自带的safari还是IOS的微信浏览器都是用的safari内核，请求视频资源时<font color="red">都会先发起一个头部包含"Range:0-1" 的请求</font>，目的是为了获取视频文件大小，如果用户不点开视频可以节省流量。
<b>chorme的video请求：</b>
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/ea2f5e5355254fd2e7cab840a74d6c8a.png" alt="" />
<b>IOS的video请求日志记录</b>
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/e908e64c4681a2ab6d0e9320a8a9bc2a.png" alt="" />
透过日志可以看到，IOS观看视频时，会先请求一个range:0-1， 此时我回一个length:2 ，bytes=0-1，IOS将会获取到视频大小等信息，以便进行分段请求。

<h1>解决问题</h1>

解决这个问题，其实只需要解析header里边的Range就可以了，比如Range:start-end ，表示获取start-end的所有数据，假设这个文件有 255个字节并且请求header中的Range: 0-，那么我们<font color="red">应该返回Content-Range:bytes 0-254/255</font>。
<font color="red">特别注意：返回的end是广义的end，255个字节，end最大为254，如果请求Range:0-1， 那么我们应该返回前两个字节，而不是1个。</font>

所以，根据规律，start和end都可以根据正则表达式匹配Header的Range可以获取到，<font color="red">读取长度 = end - start + 1</font>，所以，可以将文件读取的部分修改为如下的样子。

<pre><code class="language-php line-numbers">&lt;?php
// 假设文件真实地址之前已经获取到
$path = '....';
 // 文件大小以及读取大小
 $file_size = filesize($path);
 $start = 0;
 $end = $file_size - 1;
 $range_str = $_SERVER['HTTP_RANGE'];
 preg_match('/^bytes=(\d+)-(\d+)?$/U', $range_str, $matches);
 // print_r($matches);
 // \Think\Log::write('matches:'.json_encode($matches));
 if($matches){
         $start = $matches[1];
         if(!empty($matches[2])){
                 $end = $matches[2];
         }
 }
 $length = $end - $start + 1;
 // $header专指之前设置的Content-Type或者下载文件的filename等其他header。
 $header = [];
 // 合并现有header
 $header = array_merge(['Content-Range:bytes '.$start.'-'.$end.'/'.$file_size, 'Content-Length:'.$length], $header);
 // print_r($header);
 // return false;
 \Think\Log::write('range:'.$start.'-'.$end.' size:'.$file_size.' length:'.$length.' client:'.$range_str);
 if($header){
         foreach($header as $key =&gt; $value){
                 header($value);
         }
 }
 // $content = file_get_contents($path);
 // echo $content;
 // readfile($path);
 $fp = fopen($path, 'rb');
 set_time_limit(0);
 fseek($fp, $start);
 while(!feof($fp)){
         echo fread($fp, $length);
         flush();
 }

</code></pre>

<h1>基于TP封装的获取资源类</h1>

系统会根据method的不同而调用AssetLogic不同的方法，AssetLogic中可以进行权限判断以及返回视频/其他资源的真实地址、定制header等。
并且针对微信浏览器不能调起下载链接的问题，弄了个100s有效的下载码，提示用户从浏览器打开，打开后即可下载到相关资源。

<pre><code class="language-php line-numbers">&lt;?php

/**
 * @Author: JeffreyWang
 * @Date:   2018-03-04 01:01:13
 * @Last Modified by:   JeffreyWang
 * @Last Modified time: 2018-03-06 08:55:21
 */
namespace Lesson\Controller;
use Think\Controller;
/**
* AssetController.class.php
* 此类用于获取资源时候的回调类，可用于隐藏真实播放地址
*/
class AssetController extends Controller
{
    public function _initialize(){
        parent::_initialize();
        if(!$this-&gt;is_login() &amp;&amp; empty(I('get.code'))){
            $this-&gt;error('您还没有登陆，请登陆后重试');
        }
    }
    public function getasset(){
        $method = I('get.method', '');
        $code = I('get.code', '');
        $isdownload = I('get.download', 0, 'intval');
        // 检测方法合法性
        if(!in_array($method, ['lesson', 'resource', 'material'])){
            $this-&gt;error('非法的方法');
        }
        // 检测是否是微信以及下载码
        if(sp_is_weixin() &amp;&amp; $isdownload &amp;&amp; $this-&gt;is_login() &amp;&amp; empty(S('LESSON_ASSET_'.$code))){
            $param = $_GET;
            $param['code'] = sp_random_string(16);
            // 下载码有效期100s，存储日期
            S('LESSON_ASSET_'.$param['code'], $this-&gt;user, 100);
            // print_r(S('LESSON_ASSET_'.$param['code']));
            redirect(UU('Lesson/Asset/getasset', $param));
            return false;
        }
        // 如果是微信浏览器且有下载码，则显示提示图片提示在浏览器打开
        if(sp_is_weixin() &amp;&amp; !empty($code)){
            echo '&lt;img src="/public/images/wechat_prompt.jpg" style="width:100%;"&gt;';
            return false;
        }
        // 有下载码则检测下载码正确性
        if(!empty($code)){
            $user = S('LESSON_ASSET_'.$code);
            // var_dump($user);
            // 下载码无效如果处于登陆态则重新生成
            if(empty($user)){
                $this-&gt;error('下载校验错误，请刷新资源页重试');
            }
            // 用户信息
            empty($this-&gt;user) &amp;&amp; $this-&gt;user = $user;
        }
        // 执行相应逻辑
        if(file_exists(APP_PATH.'Lesson/Logic/AssetLogic.class.php') &amp;&amp; method_exists(D('Lesson/Asset', 'Logic'), $method)){
            $logic = D('Lesson/Asset', 'Logic');
            $logic-&gt;init($this-&gt;user);
            $ans = $logic-&gt;$method();
            if($ans['status']){
                $path = $ans['data'];
                if(file_exists($path)){
                    // 文件大小以及读取大小
                    $file_size = filesize($path);
                    $start = 0;
                    $end = $file_size - 1;
                    $range_str = $_SERVER['HTTP_RANGE'];
                    preg_match('/^bytes=(\d+)-(\d+)?$/U', $range_str, $matches);
                    // print_r($matches);
                    // \Think\Log::write('matches:'.json_encode($matches));
                    if($matches){
                        $start = $matches[1];
                        if(!empty($matches[2])){
                            $end = $matches[2];
                        }
                    }
                    $length = $end - $start + 1;
                    $header = $ans['header'];
                    $header = array_merge(['Content-Range:bytes '.$start.'-'.$end.'/'.$file_size, 'Content-Length:'.$length], $header);
                    // print_r($header);
                    // return false;
                    // \Think\Log::write('range:'.$start.'-'.$end.' size:'.$file_size.' length:'.$length.' client:'.$range_str);
                    if($header){
                        foreach($header as $key =&gt; $value){
                            header($value);
                        }
                    }
                    // $content = file_get_contents($path);
                    // echo $content;
                    // readfile($path);
                    $fp = fopen($path, 'rb');
                    set_time_limit(0);
                    fseek($fp, $start);
                    while(!feof($fp)){
                        echo fread($fp, $length);
                        flush();
                    }
                } else {
                    $this-&gt;error('资源文件不存在');
                }
            } else {
                $this-&gt;error($ans['info']);
            }
        } else {
            $this-&gt;error('回调不存在');
        }
    }
}

</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[项目中遇到了付费视频资源的问题，为隐藏视频真实地址并对观看视频的用户做权限限制，于是就想到了使用php判断当前用户权限读取视频文件，客户端视频地址指向写好的php就好，但是经过简单的代码处理后，电脑和Android并没有发现问题，但是IOS系统播放的时候死活播放不了，进行一番研究之后，得出了解决方案。]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date><![CDATA[2018-03-10 20:55:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-10 12:55:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bd%bf%e7%94%a8php%e8%af%bb%e5%8f%96%e8%a7%86%e9%a2%91%e6%b5%81%ef%bc%8cios%e7%b3%bb%e7%bb%9f%e6%97%a0%e6%b3%95%e8%a7%82%e7%9c%8b%e7%9a%84%e9%97%ae%e9%a2%98%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ios"><![CDATA[ios]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[video]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<category domain="category" nicename="wechat"><![CDATA[微信相关]]></category>
		<category domain="post_tag" nicename="%e8%a7%86%e9%a2%91%e6%b5%81"><![CDATA[视频流]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[139]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[96]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[109]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582339004;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:152;}i:1;a:1:{s:2:"id";i:250;}i:2;a:1:{s:2:"id";i:104;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>解决phpMyAdmin导出csv乱码问题</title>
		<link>https://blog.wj2015.com/2018/03/10/%e8%a7%a3%e5%86%b3phpmyadmin%e5%af%bc%e5%87%bacsv%e4%b9%b1%e7%a0%81%e9%97%ae%e9%a2%98/</link>
		<pubDate>Sat, 10 Mar 2018 09:13:34 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>背景</h1>

今天使用phpMyAdmin导出自定义sql数据时，采用csv格式导出，结果遇到了打开乱码的问题。

<h1>解决方法</h1>

导出方式选择“自定义”，然后在“文件的字符集”中选择“gb2312”，即可成功导出包含中文的结果！
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/f349197440ceed70b72a1276b3afa024.png" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[使用phpMyAdmin导出自定义sql数据时，采用csv格式导出，遇到打开乱码的问题的解决方法！]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2018-03-10 17:13:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-10 09:13:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a7%a3%e5%86%b3phpmyadmin%e5%af%bc%e5%87%bacsv%e4%b9%b1%e7%a0%81%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="phpmyadmin"><![CDATA[phpMyAdmin]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[137]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[293]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[338]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582405245;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:145;}i:1;a:1:{s:2:"id";i:360;}i:2;a:1:{s:2:"id";i:442;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>layuiAdmin踩坑实录</title>
		<link>https://blog.wj2015.com/2018/03/21/layuiadmin%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/</link>
		<pubDate>Tue, 20 Mar 2018 18:18:21 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=145</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]
<font color="#f00">注：此页面所属问题均出现于layuiAdmin V1.0环境下，部分解决方案需修改源码，并非官方修复，请谨慎使用</font>

<hr />

<h1>背景</h1>

现在项目采用layuiAdmin作为后台框架，虽然在此之前已经有了layui的基础，但是在使用的过程中依旧磕磕绊绊踩了很多坑，故写此博客作为记录以方便来人。

<h2>网页内部刷新导致问题</h2>

<blockquote>
  一般来讲，内部刷新导致的问题，主要分为两类： 
  1. script标签带lay-url，异步获取数据延迟导致渲染失效
  2. ID重复/重复绑定jquery事件导致的BUG
</blockquote>

<h3>数据表格自动渲染无法使用</h3>

数据表格的自动渲染一直无法使用，使用layui.table.render();使用javascipt渲染即可，样例如下：

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-javascript">table.render({
        elem: '#LAY-xma-users-default-table'
        ,url: './json/xma/roles/users.js' //模拟接口
        ,height: 'full-235'
        ,page: true
        ,cellMinWidth: 120
        ,cols: [[
            // {type: 'checkbox'},
            {field:'id', width:80, sort:true, title: '编号'},
            {field:'name', width:160, title: '用户名'},
            {field:'role', width:120, sort:true, title: '所属角色'},
            {field:'grade', title: '管理年级'},
            {field:'classes', title: '管理班级'},
            // {toolbar: '#statusSwitch', title: '状态', width:120},
            {field:'expire', title: '到期时间', width:160},
            {field:'update', title: '更新时间', width:160},
            {field:'create', title: '创建时间', width:160},
            {width:150, title: '操作', align:'center', fixed: 'right', toolbar: '#LAY-xma-users-default-table-operate'},
        ]]
    });
});
</code></pre>

<h3>数据表格、动态表单内部刷新后消失</h3>

数据表格的渲染，表单的自动渲染一般都是在layui.use(['table', 'form'])的时候处理的。
刷新不出来一般有两种情况：
1. 如果我们使用<em>&lt;script type="text/html" template lay-url="xxx.js"&gt;&lt;/script&gt;</em>，layui将会自动使用ajax获取lay-url所在地址，导致加载延迟，在执行layui.use([])时，script中的内容并没有被渲染完成。
<strong>解决方法：</strong>
<font color="#f00">故将layui.use([]);放在&lt;script templete&gt;中即可在异步获取后再渲染table/form。</font>
2. form在使用内部刷新后经常会出现没有渲染的情况，这是因为<font color="#f00">form的自动渲染仅在第一次使用layui.use(['form'])时，内部刷新并不会重新加载form.js，导致表单没有自动渲染。</font>
<strong>解决方法：</strong>
在非1 情况时，在layui.use(['form'], function(){layui.form.render();});手动渲染兼容下就好。

<h3>动态渲染相同ID元素导致某个页面元素失效</h3>

<font color="#f00">layuiadmin是单页面应用，并非通常的iframe架构</font>，相同ID的元素在同一页面下会导致获取ID选择器获取元素达不到想要的效果。最后的结果可能是：单独刷新此页面 - 一切正常。 打开其他页面，发现<font color="#f00">同ID的元素渲染不正常（不渲染或信息错误-table的toolbars）</font>。
<strong>解决方法：</strong>
对于此类问题，layuiadmin文档中给出的解决方案是：所有ID/lay-filter都<font color="#f00">使用<em>LAY-</em>开头，并将路由信息以-分割，最后才是自定义的ID字符串</font>，比如路由信息user/login,ID可为：<strong>LAY-user-login-tempid</strong>。

<h3>内部渲染事件重复绑定问题</h3>

通常，我们使用$(...).click();来绑定点击事件，并且习惯将此代码直接放到views/下的视图文件中，不过由于layuiadmin采用单页面技术，<font color="#f00">每次使用layuiadmin提供的刷新按钮刷新时，内部代码绑定事件的代码会被重新执行，导致多次绑定click事件。</font>
<strong>解决方法：</strong>
目前我使用的方法是，使用xx.on('click');前执行unbind('click')，解除点击事件的绑定，亲测有效，如：。

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-javascript">// 普通绑定
$('.test').unbind('click').on('click', function(){...});
// 动态绑定
$('#main-content').unbind('click').on('click', function(){...});
</code></pre>

<h2>框架其他问题</h2>

<blockquote>
  此类问题中部分是官方写代码时的疏忽，部分是使用者使用时不注意导致的。
</blockquote>

<h3>layui.use()与script templete同时使用，内部解析失效问题</h3>

<strong>出现原因：</strong>
layui.use()当模块未加载时，会异步加载模块代码，&lt;script templete&gt;使用if判断时为同步解析，导致layui.use的回调执行时模板解析早已结束，所以无法同时使用templete和layui.use();
<strong>解决方法：</strong>
目前的解决方法是把需要使用的模块在使用前静态加载好（手动赋值layui.xxx = obj;等形式），如有更好的办法请告知。

<h3>多重script嵌套使用单行注释导致报错</h3>

<strong>出现原因：</strong>
layui的模板解析会压缩代码，从而导致//注释将其后的所有代码注释掉。
<strong>解决方法：</strong>
换为块级注释即可/&#42;测试注释&#42;/。

<h3>菜单无法自动定位</h3>

<strong>出现原因：</strong>
出现此类问题的原因很多，目前我遇到的原因是，仅使用菜单返回的jump属性强制跳转，导致<em>lib/admin.js</em>中on('hash(<em>)')监听hash变化时无法正确找到对应菜单从而导致切换tab菜单自动定位失效。
<strong>解决方法：</strong>
于</em>lib/admin.js*500行左右，添加如下代码：

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-javascript">// 上边是match2的判断
if(matched2 == false &amp;&amp; matched1){
            // 避免二级分类无法渲染匹配（主要是使用jump的时候）
            matched1 = false;
          }
</code></pre>

注：临时解决方法，并不具有解决一切问题的能力。

<h3>tab左右切换导致路由传递参数丢失问题</h3>

<strong>出现原因：</strong>
这个问题无论是官方给的样例，还是自己的测试都会存在这个问题，目测是官方系统缺陷，审查TAB的元素可知，lay-attr内的数据是tab切换时应该跳转的真实路径，而非lay-id中去掉参数的路径。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/914ad3a67ee06b5b7e6aad5d72383f2d.png" alt="" />
<strong>解决方法</strong>
于<em>lib/admin.js</em>约568行的位置（检索setThisRoter即可），将此函数代码改为：

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-JavaScript">//同步路由
  var setThisRouter = function(othis){
    var layid = othis.attr('lay-attr')
    ,index = othis.index();
    // 兼容主页
    layid = layid ? layid : othis.attr('lay-id');

    admin.tabsBodyChange(index);
    location.hash = layid === setter.entry ? '/' : layid;
  }
  ,TABS_HEADER = '#LAY_app_tabsheader&gt;li';
</code></pre>

<h3>admin.req()无法POST传递问题</h3>

<strong>出现原因：</strong>
在<em>lib/view.js</em>的req()函数中将$.ajax中的type写死为get，所以无法使用POST（注：admin.req其实是回调的view.req()，在admin.js中可以看到）。
<strong>解决方法：</strong>
在<em>lib/view.js</em>第89行（搜索：$.ajax 即可），将type: 'get'改为<code>type: options.type ? options.type : 'GET'</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[现在项目采用layuiAdmin作为后台框架，虽然在此之前已经有了layui的基础，但是在使用的过程中依旧磕磕绊绊踩了很多坑，故写此博客作为记录以方便来人。]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date><![CDATA[2018-03-21 02:18:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-20 18:18:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[layuiadmin%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="layui"><![CDATA[layui]]></category>
		<category domain="post_tag" nicename="layuiadmin"><![CDATA[layuiAdmin]]></category>
		<category domain="category" nicename="web-front"><![CDATA[前端开发]]></category>
		<category domain="post_tag" nicename="%e8%b8%a9%e5%9d%91"><![CDATA[踩坑]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[169]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[568]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2192]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582324700;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:255;}i:1;a:1:{s:2:"id";i:410;}i:2;a:1:{s:2:"id";i:354;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1588</wp:comment_id>
			<wp:comment_author><![CDATA[曹先生]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1169481582@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[39.152.52.61]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-03-03 10:41:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-03-03 02:41:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[layuiAdmin  id是字符串的发送请求报错，不知道哪里解决]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1646275281]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1646275281.450928;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1647773479.964434;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Linux快速安装FFMPEG，以及使用php-ffmpeg库踩的一些坑</title>
		<link>https://blog.wj2015.com/2018/03/20/linux%e5%bf%ab%e9%80%9f%e5%ae%89%e8%a3%85ffmpeg%ef%bc%8c%e4%bb%a5%e5%8f%8a%e4%bd%bf%e7%94%a8php-ffmpeg%e5%ba%93%e8%b8%a9%e7%9a%84%e4%b8%80%e4%ba%9b%e5%9d%91/</link>
		<pubDate>Mon, 19 Mar 2018 16:37:08 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>背景</h1>

项目中需要使用ffmpeg对视频进行视频封面截图操作，但是ffmpeg在Linux下的安装需要装很多依赖包，非常费时间，并且使用php-ffmpeg进行调用时总是爆出莫名奇妙的问题，此博客即为对此类问题的总结。

<h1>如何在Linux（Centos、fedro）中快速安装FFMPEG</h1>

在网上也看过不少安装ffmpeg的博客，都是安装一大堆xlib，libx264之类的一大堆包，搭建需要花费大量的时间，对于想要快速部署ffmpeg环境的时候特别不合适，于是笔者就找到了一个centos的yum源，可以快速安装ffmpeg以及相关依赖。

<h2>yum快速安装ffmpeg环境</h2>

首先，安装yum源
Centos6 : 
<code>rpm -Uvh http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-2.el6.nux.noarch.rpm</code>
Centos7 : 
<code>rpm -Uvh http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-2.el6.nux.noarch.rpm</code>
然后，直接yum安装ffmpeg
<code>yum install ffmpeg</code>

<h2>composer安装php-ffmpeg</h2>

<code>composer require php-ffmpeg/php-ffmpeg</code>
在php中使用，<font color='#f00'>注：此代码在windows下不报错，但在Linux中可能会出现问题</font>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-php">&lt;?php
require 'vender/autoload.php';
$fpg = \FFMpeg\FFMpeg::create();
// 打开test.mov
$video = $fpg-&gt;open('test.mov');
// 保存第3秒的截图
$video-&gt;frame(\FFMpeg\Coordinate\TimeCode::fromSeconds(3))-&gt;save('temp.jpg');
</code></pre>

<h1>踩过的坑</h1>

<h2>如何解决Unable to load FFMpeg</h2>

在Linux环境中，直接使用create()会爆出如下错误：
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/a91f301dceecf2d53e081b10db62a3c1.png" alt="" />
<strong>出现原因：</strong>
create()时未指定ffmpeg的完成路径，所以报错 Unable to load FFMpeg(译：不能加载FFMPEG)
<strong>解决方案：</strong>
指定ffmpeg和ffprobe的完整路径即可

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-php">&lt;?php
$fpg = \FFMpeg\FFMpeg::create([
    'ffmpeg.binaries'  =&gt; '/usr/bin/ffmpeg',
    'ffprobe.binaries' =&gt; '/usr/bin/ffprobe'
]);

</code></pre>

<font color="#f00">注：即时ffmpeg在环境变量中，也需要指定完整路径</font>

<h2>如何解决Unable to save frame</h2>

解决完Unable to load 问题之后，又出现了Unable to save frame的问题。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/cc2e4dc9f7198855b380b292c19fa134.png" alt="" />
Unable to save frame ffmpeg failed to execute command '/usr/bin/ffmpeg' '-y' '-ss' '00:00:03.00' '-i' './test.mov' '-vframes' '1' '-f' 'image2' './temp.jpg'
<font color="#f00">PS：failed to execute command ...的详细信息是更改Frame.php中的源代码查看到的。</font>
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/ab5d2667570329426176e8dab57fc21c.png" alt="" />

<strong>发生原因</strong>
笔者看到这种情况，第一想到的就是可能保存文件权限不足，所以更改了下 保存路径的权限为 777，但是并没有这么简单，手动在命令行下执行了这个脚本，发现在命令行下可以执行。
<strong>解决办法</strong>
经过一番资料搜索与摸索，终于确定了问题所在，既然 手动执行脚本没有问题，为何通过web调用php就不能执行呢？于是将目标转移到了<font color="#f00">/usr/bin/ffmpeg和/usr/bin/ffprobe</font>上，ls -a 查看权限所属，果然全是root:root，<font color="#f00">将其改为apache:apache后使用web调用php程序正常执行。</font>
<code>chown apache:apache /usr/bin/ffmpeg /usr/bin/ffprobe</code>
<strong>执行完毕后最终结果：</strong>
<code>ls -a /usr/bin/ff*</code>
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/ce19ebe38061627bff4dc498fdc29d23.png" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[项目中需要使用ffmpeg对视频进行视频封面截图操作，但是ffmpeg在Linux下的安装需要装很多依赖包，非常费时间，并且使用php-ffmpeg进行调用时总是爆出莫名奇妙的问题，此博客即为对此类问题的总结。]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[2018-03-20 00:37:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-19 16:37:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e5%bf%ab%e9%80%9f%e5%ae%89%e8%a3%85ffmpeg%ef%bc%8c%e4%bb%a5%e5%8f%8a%e4%bd%bf%e7%94%a8php-ffmpeg%e5%ba%93%e8%b8%a9%e7%9a%84%e4%b8%80%e4%ba%9b%e5%9d%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ffmpeg"><![CDATA[ffmpeg]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[video]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<category domain="post_tag" nicename="%e8%a7%86%e9%a2%91%e6%b5%81"><![CDATA[视频流]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[154]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[linux%e5%bf%ab%e9%80%9f%e5%ae%89%e8%a3%85ffmpeg%ef%bc%8c%e5%b9%b6%e4%bd%bf%e7%94%a8php-ffmpeg%e5%ba%93%e8%bf%9b%e8%a1%8c%e6%88%aa%e5%9b%be%e6%93%8d%e4%bd%9c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582230585;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:287;}i:1;a:1:{s:2:"id";i:10;}i:2;a:1:{s:2:"id";i:305;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kali Linux安装以及初步上手</title>
		<link>https://blog.wj2015.com/2018/03/30/kali-linux%e5%ae%89%e8%a3%85%e4%bb%a5%e5%8f%8a%e5%88%9d%e6%ad%a5%e4%b8%8a%e6%89%8b/</link>
		<pubDate>Fri, 30 Mar 2018 15:59:08 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=174</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>背景</h1>

学校开了一门“网络安全”相关的课程，要求自己安装一个kali Linux 玩玩，之前对kali的大名早有耳闻，于是正好乘此机会好好倒腾倒腾。

<h2>如何安装kali</h2>

<h3>下载kali</h3>

首先，于<a href="https://www.kali.org/">kali的官网</a>选择“Downloads”，下载最新版种子文件，<a href="https://images.offensive-security.com/kali-linux-2018.1-amd64.torrent">种子链接</a>，使用迅雷等工具进行下载。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/2dfecd6a97e8e9b83617a064392ad8d6.png" alt="" />

<h3>使用VMware新建虚拟机进行安装</h3>

新增一台虚拟机（内存2G，硬盘20G即可，网络选桥接/NAT）

<blockquote>
  开启虚拟机 》 图形安装
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/cbc3557a490d6210aa4ba7c404bcc751.png" alt="" />

<blockquote>
  选择语言（简体中文）
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/42b24374ca31a10a8b047c276961654f.png" alt="" />

<blockquote>
  选择键盘配置之后将会自动配置
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/79bdcc517a338b87e4ae58f24edecdee.png" alt="" />

<blockquote>
  可能会存在DHCP获取不到的问题，不进行网络配置即可
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/07aa27526f3a693404ae82de1293fb96.png" alt="" />

<blockquote>
  设置主机名和密码
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/7bbe6c0fc4f6e8a83c4f53f6accfec0d.png" alt="" />

<blockquote>
  磁盘分区，有安装经验的可以选择自行分区，然后继续选择“继续”、“是”即可开始安装系统
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/db5225befff678981c14f8e657569f65.png" alt="" />
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/d4e6de4b35d328b98669aba2a8ce5dc4.png" alt="" />
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/70aa5f1bf94df1da1280178035a9de7b.png" alt="" />
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/da0880278d7e22cbb2768717e66b7498.png" alt="" />

<blockquote>
  等待安装完成
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/700dd869ed264d7ec511a97072ac90f3.png" alt="" />

<blockquote>
  这里选择是
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/37f97727d7a78625dce4beef7960e90b.png" alt="" />

<blockquote>
  选择安装GRUB，如果自定义/boot分区，则选择/boot分区所在磁盘
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/fc0c334aeac7263b6acc08e238938773.png" alt="" />
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/0a8df91a91209fa28376f17beeadd13a.png" alt="" />

<blockquote>
  点击“继续”，虚拟机将会重启，后完成
  <img src="https://blog.wj2015.com/wp-content/uploads/2018/03/970e1f1ab000025a6300afa00cf67236.png" alt="" />
  
  <font color="#f00">注意：如果在安装时报错“系统安装错误”，请在磁盘分区步骤中选择“将所有文件放在一个分区中”</font>
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/27db9d42dd7e4b21ea7852a3647768f6.png" alt="" />
<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/db5225befff678981c14f8e657569f65.png" alt="" />

<h2>ARP欺骗+tcpdump抓取并盗用用户信息</h2>

使用arpsproof、tcpdump抓取HTTP信息并使用session盗取用户登录信息

<h3>环境假设：</h3>

<table>
<thead>
<tr>
  <th>主机</th>
  <th>IP</th>
  <th>MAC</th>
</tr>
</thead>
<tbody>
<tr>
  <td>网关</td>
  <td>192.168.10.250</td>
  <td>50:DA:00:42:82:5E</td>
</tr>
<tr>
  <td>被攻击者PC1</td>
  <td>192.168.10.18</td>
  <td>3C:52:82:E0:74:CB</td>
</tr>
<tr>
  <td>攻击者PC2</td>
  <td>192.168.10.3</td>
  <td>00:0C:29:7B:33:6E</td>
</tr>
</tbody>
</table>

<h3>ARP双向欺骗网关、PC1</h3>

<blockquote>
  本次测试网址：http://shop.wj2015.com
</blockquote>

<h5>arpsroof参数说明</h5>

arpsroof -i [指定网卡] -t [被欺骗IP] [申明IP]
原理：一直

<h4>打开转发</h4>

打开转发功能，令数据流 PC1 > 我 > 网关 或者 网关 > 我 > PC1 正常沟通。

<blockquote>
  echo 1 > /proc/sys/net/ipv4/ip_forward
  内容为 1 表示开启
  <img src="https://blog.wj2015.com/wp-content/uploads/2018/03/f8574392cc69b1c8943b797176354e6e.png" alt="" />
  <font color="#f00">注意：如果不开启自动转发，被攻击者将在开始攻击后断网</font>
</blockquote>

<h4>欺骗被攻击者</h4>

欺骗被攻击PC1(192.168.10.18)，我是网关(192.168.10.250)，让PC1的MAC地址表添加一条我的MAC和网关IP的记录。

<blockquote>
  arpsroof -i eth0 -t 192.168.10.18 192.168.10.250
  <img src="https://blog.wj2015.com/wp-content/uploads/2018/03/0a4e4fd3e53094a6e23fc951d678e460.png" alt="" />
</blockquote>

<h5>欺骗前</h5>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/ca85e7826ed74d82c4aef2181b736aa0.png" alt="" />

<h5>欺骗后</h5>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/275135f7468574c7532cffb00f5e53cb.png" alt="" />

<h4>欺骗网关</h4>

欺骗网关（192.168.10.250），我是PC1（192.168.10.18），使网关的MAC地址表添加一条我的MAC和PC1IP的记录。

<blockquote>
  arpsroof -i eth0 -t 192.168.10.250 192.168.10.18
  <img src="https://blog.wj2015.com/wp-content/uploads/2018/03/d5b6b3ef9931505f9b13df069937a667.png" alt="" />
</blockquote>

<h4>抓取被攻击者的报文</h4>

能使用tcpdump工具将PC1出网的所有数据包拦截下来（这里只监听发包-抓密码）注：123.206.67.59为测试地址的IP

<blockquote>
  tcpdump -i eth0 -Av -c 1000 src 192.168.10.18 and dst 123.206.67.59
  <img src="https://blog.wj2015.com/wp-content/uploads/2018/03/fcb900704c04d08cc47d8701989de610.png" alt="" />
</blockquote>

<h5>tcpdump参数简介</h5>

-i 指定网卡
-A ascii形式打印
-v 显示更多信息
-c 限制条数
src 指定包来源
dst 指定包目标

<h5>被攻击者访问网站并登陆</h5>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/cbe8ebce5d4df7d13a802191873bf86e.png" alt="" />

<h5>检查监听的文件</h5>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/03/e0dab00fb190fd57cd6ee197c9dbb947.png" alt="" />
成功找到用户名+密码，找到cookie信息放置于firefox中，即可盗用被攻击者的账号进行操作，因为大部分网站的SESSIONID都是存放在COOKIE中的，得到了COOKIE，对于服务器来说你与被攻击者没有区别。

<h2>从攻击中发现的问题及防范</h2>

ARP协议是数据链路层协议，用于转换内网的IP > MAC，由于网络协议上层依赖下层，所以如果在此层受到攻击，轻则无法上网，重则账号密码被盗，账号被盗用。
那么，如何避免此情况呢？首先，这是一个用于局域网内的协议，所以应该避免连接不确定安全性的WIFI，特别是免费WIFI。其次，ARP攻击的特征还是比较明显的，一台机器不停的发送ARP回应报文，一般的局域网安全检测软件都能检测到，如：手机的腾讯管家、手机自带的wifi检测等均会发起安全提示。

<h1>结语</h1>

Kali Linux中集成了大量的安全测试工具，ARP欺骗+中间人攻击只是其中很小一部分的应用，重要的是理解其中原理，增加防范意识。]]></content:encoded>
		<excerpt:encoded><![CDATA[本文介绍了kali Linux在VMware中的安装，以及介绍了如何使用其中的ARP欺骗工具和抓包工具进行中间人攻击，并盗取用户信息。]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2018-03-30 23:59:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-30 15:59:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kali-linux%e5%ae%89%e8%a3%85%e4%bb%a5%e5%8f%8a%e5%88%9d%e6%ad%a5%e4%b8%8a%e6%89%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="kali"><![CDATA[kali]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e5%ae%89%e5%85%a8"><![CDATA[安全]]></category>
		<category domain="category" nicename="%e5%ae%89%e5%85%a8%e7%9b%b8%e5%85%b3"><![CDATA[安全相关]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[191]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[356]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[43]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582418454;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:432;}i:1;a:1:{s:2:"id";i:69;}i:2;a:1:{s:2:"id";i:442;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何使用Linux系统办公-研发篇</title>
		<link>https://blog.wj2015.com/?p=533</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=533</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

<h2>正文</h2>

<h3>好在哪里差在那里</h3>

<h3>需要解决的几个问题</h3>

<ul>
<li>市面上林林总总这么多操作系统，分几类，应该怎么选择</li>
<li>日常办公软件怎么安装，使用上有什么注意的地方</li>
<li>如何让系统更稳定的运行，出现特殊情况的应急方案</li>
</ul>

<h3>研发角色常用软件整理</h3>

<h2>总结</h2>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>533</wp:post_id>
		<wp:post_date><![CDATA[2020-02-28 09:38:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>算法基础-快速排序</title>
		<link>https://blog.wj2015.com/?p=556</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=556</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

<h2>正文</h2>

<h3>核心思想</h3>

<h3>双边循环法</h3>

<h3>单边循环法</h3>

<h2>总结</h2>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>556</wp:post_id>
		<wp:post_date><![CDATA[2020-03-04 15:28:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>服务器常用运维</title>
		<link>https://blog.wj2015.com/?p=585</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=585</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

为公司《服务器常用运维培训》所作整理

<h2>正文</h2>

分类
系统运维：网络建设/资产管理/设备选型/基础服务
应用运维：设计评审/部署发布/监控管理
数据库运维：容量管理/数据库设计评审/备份等
安全运维：安全策略

<h3>Linux运维常用命令</h3>

<h4>用户群组操作</h4>

<h4>权限管理</h4>

<h4>文件目录</h4>

<h4>进程管理</h4>

<h4>磁盘管理</h4>

<h5>分区/格式化</h5>

<h5>挂在卸载</h5>

<h5>容量查看</h5>

<h4>打包压缩</h4>

<h4>软件管理</h4>

<h5>源码包</h5>

<h5>二进制包</h5>

<h5>包管理器</h5>

<h4>常用命令组合</h4>

<h5>awk</h5>

<pre><code class="language-shell line-numbers">awk 'BEGIN{} {} END{}'
-F 指定分隔符
NR 行数
</code></pre>

作用：循环每行内容，并处理每行信息，多用于统计

<code>test.txt</code> 文本内容

<pre><code class="language-text line-numbers">1,aaa
2,bbb
3,ccc
</code></pre>

获取 <code>,</code> 分隔的第二列的内容

<pre><code class="language-shell line-numbers">awk '{pint $2}' -F, test.txt
</code></pre>

获取第一列所有数字之和以及平均值

<pre><code class="language-shell line-numbers">awk 'BEGIN{sum=0} {sum+=$1} END{print sum}' -F, test.txt
awk 'BEGIN{sum=0} {sum+=$1} END{print sum/NR}' -F, test.txt # NR 指行数
</code></pre>

<h4>sort</h4>

根据字符串排序

<h4>args</h4>

一行变多行或多行变一行，一般用于辅助命令入参
-I -i -n

```shell
cat a.txt | xargs # 等价 cat a.txt | xargs | echo


<h3>Linux运维常见场景</h3>

<h2>总结</h2>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>585</wp:post_id>
		<wp:post_date><![CDATA[2020-03-16 15:13:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>什么是前端</title>
		<link>https://blog.wj2015.com/?p=587</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=587</guid>
		<description></description>
		<content:encoded><![CDATA[w3c(web assembly) 脱离JS的语言

whatwg 看浏览器的最新标准

xml:
SOAP,svg

template engine:
ejs 
postHtml，后置引擎，后置引擎

css:
pre-compiler: less sass stylus
postCss

css hodini JS 介入的
layout

script 部分：
ECMAScript

typescript,JS的超集，引入了静态类型

压缩：terser / uglify

后端：
Node.js HTTP 加密 UDP/TCP FS SQL

测试：
单元测试/端到端测试/性能测试/可访问性测试（无障碍）/多语言/本地化

自动化/devops
灾备、升级、回滚

APP
swift flutter RN等

web assembly: ts golang c/c++

设计
sketch]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>587</wp:post_id>
		<wp:post_date><![CDATA[2020-03-16 20:15:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mysql锁</title>
		<link>https://blog.wj2015.com/?p=589</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=589</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>锁的范围划分</h2>

全局锁
可用于库备份，但是会导致写入停止

<pre><code class="language-sql line-numbers">flush tables with read lock
</code></pre>

表级锁
锁表后，同一张表只能有一个写入，Myisam和Innodb均有此概念
NDL锁：元数据锁，优化行级锁的时候，如果涉及整表的改动就不需要遍历行锁标记了

行级锁
select for update 会加上一个写锁一个读锁（元数据锁），事务进行中，无法修改表结构，直到锁释放

记录锁 - 锁住某一条记录
间隙锁 - 防止幻读，锁住记录与记录之间的间隙，比如 id=10和id=15其中就有间隙
Next-Key 锁，记录锁+间隙锁
插入意向锁

<h2>锁的兼容性</h2>

共享锁 - 读锁(S)
select lock in share mode，为某行加读锁，可以同时加

独占锁 - 写锁(X)
select lock in for update; 加独占锁，无法与其他锁共存，比如有读锁的情况，就无法写入

<h2>死锁</h2>

使用 <code>show engine</code>
比如事务A拿到 id in (1, 2)读锁，事务B拿 id in (2, 3) 的读锁，然后事务B期望拿到 id = 2 的写锁(update)，因为事务A有读锁，所以阻塞了；然后事务A希望拿到 id = 3 的写锁(update)，就卡住了

<h2>二阶段锁协议</h2>

查询能加锁，但是释放锁却需要等待查询事务的提交

减库存
1. 查询现有库存是否充足
2. 库存充足减库存，不足扣除失败

<pre><code class="language-sql line-numbers">update stock set last_number = last_number - 1 where id = 100 and last_number &gt; 1
</code></pre>

<h2>完整锁解决</h2>

在读取的时候加上 for update 拿到写锁，以便后续更改

<h2>乐观锁</h2>

CAP
处理速度快，并发高的话，会有很多执行失败的情况

<h2>悲观锁</h2>

S 和 X 都是悲观锁，因为会阻止加上其他锁

<h3>主键等值查询</h3>

select lock in share mode;
首先加 next-key，发现是唯一索引的等值查询，找到对应数据，会退化为记录锁，没找到会变成间隙锁

<h3>无索引等值查询</h3>

演变为表级锁，尽量避免查询打不到索引

<h2>主键范围查询</h2>

lock for share mode 锁间隙

<h2>无索引范围</h2>

依旧表锁

<h2>普通二级索引</h2>

修改/查询 有二级索引的字段，二级索引加锁
修改行都会在聚簇索引上加锁

锁是加到对应索引上面的]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>589</wp:post_id>
		<wp:post_date><![CDATA[2020-03-17 14:41:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TensorFlow学习-环境搭建、编程基础和识别手写数字</title>
		<link>https://blog.wj2015.com/?p=592</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=592</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

<h2>正文</h2>

<h3>开发环境搭建</h3>

<h4>Gpu版本</h4>

<h4>验证</h4>

<h3>Tensor基础</h3>

<h4>模型相关概念</h4>

<h5>张量(tensor)和操作(op)</h5>

TensorFlow使用张量(tensor)作为基础数据结构，可以简单的把张量视为多维数组，每个张量都有 类型（Type）、阶(Rank)、形状(Shape)

<h5>张量的类型</h5>

表示张量中每个元素的数据类型，后续的函数中就会用到 <code>tf.xxxxx</code> 的形式来指定类型
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/0866c4ffb9ed2c7ba61c1c3cb6f727cc.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/0866c4ffb9ed2c7ba61c1c3cb6f727cc.png" alt="" /></a>

<h5>张量的阶</h5>

张量的阶可以理解为深度，比如 <code>t = [1, 2, 3]</code>，深度是1，阶就是1，<code>t = [[1, 2, 3], [1, 2, 3]]</code>，深度是2，阶就是2
具体如下表所示：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/5f4dd1a33dc6b9ac972a5404d3c17559.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/5f4dd1a33dc6b9ac972a5404d3c17559.png" alt="" /></a>

<h5>张量的形状</h5>

形状可以描述内部的组织关系，比如一个 3 * 2 的张量 <code>t = [[1, 2], [1, 3], [1, 4]]</code>，其形状就是 <code>(3, 2)</code>

<h5>张量操作</h5>

张量的操作可分为 类型变换、数值操作、形状变换、数据操作

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/6dff3684c786cc12a88537b73339b9a1.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/6dff3684c786cc12a88537b73339b9a1.png" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/2dbee167c5d3009cf450c0b9c51d3d89.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/2dbee167c5d3009cf450c0b9c51d3d89.png" alt="" /></a>

<h4>注入和取出</h4>

<h4>模型保存和载入</h4>

<h3>TensorBoard可视化</h3>

<h2>总结</h2>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>592</wp:post_id>
		<wp:post_date><![CDATA[2020-03-30 13:01:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="tensorflow"><![CDATA[TensorFlow]]></category>
		<category domain="post_tag" nicename="%e6%89%8b%e5%86%99%e8%af%86%e5%88%ab"><![CDATA[手写识别]]></category>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%ae"><![CDATA[环境配置]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python的类：抽象类、抽象方法及其继承</title>
		<link>https://blog.wj2015.com/?p=629</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=629</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>目的</h2>

从Python类的基础讲起，整理 Python 类中的抽象类和抽象方法知识点

<h2>正文</h2>

<h3>为什么需要类，如何定义类？</h3>

了解过 C++、Java 的同学很容易理解类这个概念，在一个类中包含了类的属性和方法，可以<strong>把业务中的各个实体通过属性和方法表现出来</strong>。
比如我们需要开发一个学生管理系统，你可以借用 python 的模块用面向过程的方式一把梭，也可以将学生这个实体抽象出来一个对象，这个对象包含<strong>很多属性</strong>：学号、入学时间、生日、宿舍号、所在班级等，还包含<strong>很多方法</strong>，比如查看成绩、选课等等。

如上所述的学生类，在Python中可以表现为如下的代码

<pre><code class="language-python line-numbers">class Student:
    def __init__(self, stu_no, school_time, birthday, room_no, class_no):
        self.stu_no = stu_no
        self.school_time = school_time
        self.birthday = birthday
        self.room_no = room_no
        self.class_no = class_no
    def show_grade(self):
        print("grade is xxx")
    def choose_lesson(self, lesson_no):
        print("choose lesson", lesson_no)
</code></pre>

<h3>类的公/私有方法和属性</h3>

<h3>类的单继承、多继承</h3>

<h4>多继承中类属性 or 方法查找顺序</h4>

<h4>继承的弱点</h4>

<h3>面向接口编程，抽象类和抽象方法</h3>

<h2>总结</h2>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>629</wp:post_id>
		<wp:post_date><![CDATA[2020-09-11 14:05:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Logstash如何实现Filter Hash映射</title>
		<link>https://blog.wj2015.com/?p=632</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=632</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

Logstash 是 ELK 中重要的一环，时不时会遇到需要固定 key 映射到字符串的场景，但是 Logstash 的 Filtr 中不支持动态映射对象属性。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>632</wp:post_id>
		<wp:post_date><![CDATA[2020-10-22 18:11:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>数据库跨表统计排序及效率优化</title>
		<link>https://blog.wj2015.com/2018/04/09/%e6%95%b0%e6%8d%ae%e5%ba%93%e8%b7%a8%e8%a1%a8%e7%bb%9f%e8%ae%a1%e6%8e%92%e5%ba%8f%e5%8f%8a%e6%95%88%e7%8e%87%e4%bc%98%e5%8c%96/</link>
		<pubDate>Mon, 09 Apr 2018 10:46:20 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>背景</h1>

项目中遇到了这样一个需求：显示出在某一时间范围内，按照推荐客户人数降序排列的用户列表。用户表与推荐客户表属于1:n的关系。针对此类需求，特作此总结。

<h1>情景复现</h1>

<h2>数据库搭建</h2>

假设数据库结构如下：

用户表：

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-mysql">CREATE TABLE users(
    `id`    INT(11) PRIMARY KEY AUTO_INCREMENT,
    `name`  CHAR(20) NOT NULL COMMENT '用户名',
    `mobile`    CHAR(15) NOT NULL COMMENT '电话'
)ENGINE=INNODB;
</code></pre>

推荐客户表：

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-mysql">CREATE TABLE customer(
    `id`    INT(11) PRIMARY KEY AUTO_INCREMENT,
    `uid`   INT(11)  NOT NULL COMMENT '推荐人ID',
    `name`  CHAR(20) NOT NULL COMMENT '客户姓名',
    `mobile` CHAR(15) NOT NULL COMMENT '客户电话',
    `recommend_at`  DATETIME NOT NULL COMMENT '推荐时间'
)ENGINE=INNODB;
</code></pre>

<h2>需要解决的问题</h2>

首先，排序需要分页显示，而分页需要有两个参数：数据总量、每页数据数量

每页数据量可以自行设置，但是数据总量又怎么得出呢？这里的数据总量，不能是所有的用户，因为不一定所有用户推荐过客户，这里需要统计推荐过客户的用户即可。

<h3>获取数据总量</h3>

<code>SELECT COUNT(DISTINCT(uid)) FROM customer WHERE recommend_at &gt; '开始时间' and recommend_at &lt; '结束时间';</code>

<blockquote>
  语句解析： 我们仅需要显示在规定时间内推荐过的用户，那么只需要在customer表里边，将uid去重后统计即可。
</blockquote>

<code>DESCRIBE SELECT COUNT(DISTINCT(uid)) FROM customer WHERE recommend_at &gt; '开始时间' and recommend_at &lt; '结束时间';</code>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/04/4f34092c34f9bb7055daf4209588ee46.png" alt="" />

<blockquote>
  语句优化：使用 DESCRIBE 语句可以发现，此方法会扫描全表（type=ALL），效率不高，如果这个功能使用比较勤，或者对效率要求比较高的话，可以考虑给customer建立相关索引，如：INDEX(&#96;uid, recommend_at&#96;)
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/04/fc6a65c0a4728385d26aa6d051fc4013.png" alt="" />

<h3>获取数据</h3>

这次的重头戏就是获取数据了，经过一番研究，发现有两种解决方案。

假设users表和customer表的内容如下：

users:

<table>
<thead>
<tr>
  <th>id</th>
  <th>name</th>
  <th>mobile</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>王一</td>
  <td>13012345671</td>
</tr>
<tr>
  <td>2</td>
  <td>王二</td>
  <td>13012345672</td>
</tr>
<tr>
  <td>3</td>
  <td>王三</td>
  <td>13012345673</td>
</tr>
</tbody>
</table>

customer表:

<table>
<thead>
<tr>
  <th>id</th>
  <th>uid</th>
  <th>name</th>
  <th>mobile</th>
  <th>contract_at</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>1</td>
  <td>张一</td>
  <td>15012345671</td>
  <td>2018-04-09 01:31</td>
</tr>
<tr>
  <td>2</td>
  <td>1</td>
  <td>张二</td>
  <td>15012345672</td>
  <td>2018-04-09 01:31</td>
</tr>
<tr>
  <td>3</td>
  <td>1</td>
  <td>张三</td>
  <td>15012345673</td>
  <td>2018-04-09 01:31</td>
</tr>
<tr>
  <td>4</td>
  <td>2</td>
  <td>张四</td>
  <td>15012345674</td>
  <td>2018-04-09 01:31</td>
</tr>
</tbody>
</table>

即：王一 推荐了 3个客户，王二 推荐了 1个用户， 王三没有推荐用户

最终结果预测：

<table>
<thead>
<tr>
  <th>uid</th>
  <th>num</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>3</td>
</tr>
<tr>
  <td>2</td>
  <td>1</td>
</tr>
</tbody>
</table>

<h4>方案1 JOIN+GROUP（不推荐）</h4>

使用 JOIN 将users表和customer表串联起来，使用where子句筛选出符合条件的信息，最后使用GROUP BY 按照uid进行分组，然后逆序排列即可。

<code>SELECT users.id, COUNT(*) AS num FROM users LEFT JOIN customer ON customer.uid = users.id AND recommend_at &gt; '开始时间' AND recommend_at &lt; '结束时间' WHERE customer.uid IS NOT NULL GROUP BY users.id ORDER BY num LIMIT 0, 10;</code>

<blockquote>
  语句分析： 首先，使用 LEFT JOIN 将customer与users内联起来，直接内联结果如下表。用WHERE子句过滤掉没有推荐客户的users后，使用GROUP BY 进行分组，将统计数量 num 逆序排序，输出结果。
</blockquote>

<table>
<thead>
<tr>
  <th>id(u)</th>
  <th>name(u)</th>
  <th>mobile(u)</th>
  <th>id(c)</th>
  <th>uid(c)</th>
  <th>name(c)</th>
  <th>mobile(c)</th>
  <th>recommend_at(c)</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>王一</td>
  <td>13012345671</td>
  <td>1</td>
  <td>1</td>
  <td>张一</td>
  <td>15012345671</td>
  <td>2018-04-09 01:31</td>
</tr>
<tr>
  <td>1</td>
  <td>王一</td>
  <td>13012345671</td>
  <td>2</td>
  <td>1</td>
  <td>张二</td>
  <td>15012345672</td>
  <td>2018-04-09 01:31</td>
</tr>
<tr>
  <td>1</td>
  <td>王一</td>
  <td>13012345671</td>
  <td>3</td>
  <td>1</td>
  <td>张三</td>
  <td>15012345673</td>
  <td>2018-04-09 01:31</td>
</tr>
<tr>
  <td>2</td>
  <td>王二</td>
  <td>13012345671</td>
  <td>4</td>
  <td>2</td>
  <td>张四</td>
  <td>15012345674</td>
  <td>2018-04-09 01:31</td>
</tr>
<tr>
  <td>3</td>
  <td>王三</td>
  <td>13012345671</td>
  <td>NULL</td>
  <td>NULL</td>
  <td>NULL</td>
  <td>NULL</td>
  <td>NULL</td>
</tr>
</tbody>
</table>

<blockquote>
  语句优化：同理，如果不建立索引，那么使用 DESCRIBE 语句可以发现，type=ALL，可给customer增加INDEX(&#96;uid, recommend_at&#96;)。又由于用户表的id是主键id，所以不用考虑索引的问题了。
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/04/8d7c09fc7fa216eb484e241f2cfd7314.png" alt="" />

<h5>不推荐理由</h5>

通过DESCRIBE和JOIN的原理就可以看出来，这种方式是要跨两个表查询的，即先查询 users表中符合条件的数据，再按照关联查询出 customer中的数据，效率较低，最后再对统计数据中的 num建立临时表，倒序输出。

<h4>方案二 GROUP BY（推荐）</h4>

直接对customer先使用where筛选出符合条件的数据，再对其进行GROUP分组即可。至于我为什么没有一开始就想到这个方法，只是因为惯性思维，认为统计用户信息需要从用户表着手罢了。

<code>SELECT uid,COUNT(*) AS num FROM customer WHERE recommend_at &gt; '开始时间' AND recommend_at &lt; '结束时间'  GROUP BY uid ORDER BY num LIMIT 0, 10;</code>

<blockquote>
  语句分析：查询customer表中符合时间段的数据，查询完毕后进行GROUP BY uid，就可以把uid对应时间的数据统计出来了。
  
  语句优化：普通查询语句，仅需加INDEX(&#96;recommend_at&#96;, &#96;uid&#96;);即可。
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/04/418b9130986d1a7ab095ebb324ab1205.png" alt="" />

<h4>两种方案差别</h4>

方案一，由于是基于users表，所以查询出结果时，可以直接附带上用户表中的树形。

方案二，只针对customer表进行统计，速度会比较快，但是只能获取users表和customer表的关联属性uid，如若获取用户其他信息，则只能再次查询数据库。

<h1>总结</h1>

主表(users),从表(customer)，跨表统计需要解决两个问题，一个是数据总量，一个是数据。

数据总量可以通过从表使用DISTINCT去重+COUNT(*)得出。

数据获取有两种方式，第一种方式：主表+JOIN+从表+GROUP，这样可以在获取数据的时候顺便获取主表的信息，效率相比较低；第二种方式：从表+GROUP，这种方式可以获取到从表与主表之间的关联ID和统计数据，效率较高。]]></content:encoded>
		<excerpt:encoded><![CDATA[项目中遇到了这样一个需求：显示出在某一时间范围内，按照推荐客户人数降序排列的用户列表。用户表与推荐客户表属于1:n的关系。针对此类需求，特作此总结。]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2018-04-09 18:46:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-09 10:46:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b0%e6%8d%ae%e5%ba%93%e8%b7%a8%e8%a1%a8%e7%bb%9f%e8%ae%a1%e6%8e%92%e5%ba%8f%e5%8f%8a%e6%95%88%e7%8e%87%e4%bc%98%e5%8c%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="category" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<category domain="post_tag" nicename="%e8%b7%a8%e8%a1%a8"><![CDATA[跨表]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[214]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[91]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[306]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582033075;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:131;}i:1;a:1:{s:2:"id";i:354;}i:2;a:1:{s:2:"id";i:104;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jquery动态绑定在IOS失效的问题</title>
		<link>https://blog.wj2015.com/2018/04/08/jquery%e5%8a%a8%e6%80%81%e7%bb%91%e5%ae%9a%e5%9c%a8ios%e5%a4%b1%e6%95%88%e7%9a%84%e9%97%ae%e9%a2%98/</link>
		<pubDate>Sun, 08 Apr 2018 13:59:01 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>背景</h1>

在一个微信项目中，由于某些元素是动态添加的，所以使用了jquery的on('click', 'xx', function(){});来进行动态绑定点击事件，但是在IOS下，此法失效，经过一番资料查找，终于找到了解决方案。

<h1>问题复现</h1>

html代码：

<pre data-language=HTML><code class="language-markup line-numbers">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;测试&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;ul&gt;
            &lt;li class="elem"&gt;操作1&lt;/li&gt;
            &lt;li class="elem"&gt;操作1&lt;/li&gt;
            &lt;li class="elem"&gt;操作1&lt;/li&gt;
            &lt;li class="elem"&gt;操作1&lt;/li&gt;
            &lt;li class="elem"&gt;操作1&lt;/li&gt;
            &lt;li class="elem"&gt;操作1&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/body&gt;
    &lt;!--引入jquery--&gt;
    &lt;script src="js/jquery.js"&gt;&lt;/script&gt;
    &lt;script&gt;
        // 给.elem增加点击事件
        $('body').on('click', '.elem', function(){
            alert('已点击');
        });
    &lt;/script&gt;
&lt;/html&gt;
</code></pre>

<blockquote>
  使用电脑调试工具以及android均没有问题，但是在IOS的微信浏览器/safari浏览器均无法触发点击事件。
</blockquote>

<h1>解决方案</h1>

经查，在IOS中，点击对象需要拥有"cursor:pointer;"样式才能触发点击事件，具体原因据说是无法找到DOM。
所以，上边的代码，只需要加一个样式，即可生效。

<pre><code class="language-css line-numbers">.elem {cursor:pointer;}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[在一个微信项目中，由于某些元素是动态添加的，所以使用了jquery的on('click', 'xx', function(){});来进行动态绑定点击事件，但是在IOS下，此法失效，经过一番资料查找，终于找到了解决方案。]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2018-04-08 21:59:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-08 13:59:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jquery%e5%8a%a8%e6%80%81%e7%bb%91%e5%ae%9a%e5%9c%a8ios%e5%a4%b1%e6%95%88%e7%9a%84%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ios"><![CDATA[ios]]></category>
		<category domain="category" nicename="web-front"><![CDATA[前端开发]]></category>
		<category domain="post_tag" nicename="%e5%8a%a8%e6%80%81%e7%bb%91%e5%ae%9a"><![CDATA[动态绑定]]></category>
		<category domain="post_tag" nicename="%e8%b8%a9%e5%9d%91"><![CDATA[踩坑]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[203]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[192]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[69]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581593009;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:145;}i:1;a:1:{s:2:"id";i:10;}i:2;a:1:{s:2:"id";i:442;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mysql报错，[ERROR] Fatal error: Can&#039;t open and lock privilege tables: Table &#039;mysql.host&#039; doesn&#039;t exist</title>
		<link>https://blog.wj2015.com/2018/04/29/mysql%e6%8a%a5%e9%94%99%ef%bc%8cerror-fatal-error-cant-open-and-lock-privilege-tables-table-mysql-host-doesnt-exist/</link>
		<pubDate>Sun, 29 Apr 2018 05:59:31 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=232</guid>
		<description></description>
		<content:encoded><![CDATA[如果在使用mysql过程中，调用了mysqld_safe更改了数据文件存放路径，但是新路径里边又没有需要的数据库文件，然后启动mysql时就可能出现这个报错。
<code>service mysqld start</code>

<blockquote>
  mysqld_safe --user mysql --datadir=/usr/local/data
  --datadir指定新的数据文件存放路径
</blockquote>

如果有之间的数据文件，那么直接mv 原数据文件地址 现数据文件地址即可。
没有的话，直接执行mysql_install_db，重新生成数据库权限表。

<blockquote>
  mysql_install_db 重新生成数据库权限表。
</blockquote>

<code># /usr/mysql_install_db</code>

最后，重启mysqld，还可以执行mysql_secure_installation初始化权限信息
<code>service mysqld restart</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date><![CDATA[2018-04-29 13:59:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-29 05:59:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e6%8a%a5%e9%94%99%ef%bc%8cerror-fatal-error-cant-open-and-lock-privilege-tables-table-mysql-host-doesnt-exist]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="mysql"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[63]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[224]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[310]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581769080;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:255;}i:1;a:1:{s:2:"id";i:131;}i:2;a:1:{s:2:"id";i:250;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ReactJS学习(1) - 安装、JSX、组件、状态和生命周期</title>
		<link>https://blog.wj2015.com/2018/05/12/reactjs%e5%ad%a6%e4%b9%a01-%e5%ae%89%e8%a3%85%e3%80%81jsx%e3%80%81%e7%bb%84%e4%bb%b6%e3%80%81%e7%8a%b6%e6%80%81%e5%92%8c%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f/</link>
		<pubDate>Sat, 12 May 2018 09:46:47 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=236</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>ReactJS学习笔记</h1>

[toc]

<h2>安装React</h2>

<h4>安装条件准备</h4>

<ol>
<li>首先安装node，直接官网上下载安装即可。</li>
<li>安装完毕后，执行<code>npm install -g create-react-app</code>，全局安装项目构建工具。</li>
</ol>

<h4>创建项目</h4>

<ol>
<li><code>create-react-app 项目名称</code>，然后进入目录，<code>cd 项目名称</code>，最后<code>npm start</code>，完成项目的启动。</p></li>
<li><p>浏览器中访问<code>localhost:3000</code>即可访问项目。

<img src="https://blog.wj2015.com/wp-content/uploads/2018/05/b0c600e1ab6a8c9b5b7732c89350cc28.png" alt="" />

<strong>访问效果：</strong>
<img src="https://blog.wj2015.com/wp-content/uploads/2018/05/ab3acb1409f65f283534c06e033a5a1c.png" alt="" />

<h4>学习建议</h4>

开始的时候，可以在<strong>在线编辑器</strong>上实时调试，会比较方便，使用<code>create-react-app</code>创建的文件全是用类构建，辅以nodeJS得以运行，效率较高。但是对于初学者来说，一层一层的类也容易绕晕，所以比较建议使用ReactDOM采用传统前端架构的形式来学习。

在线编辑器：<a href="https://codepen.io">https://codepen.io</a>
<strong>注意</strong>：React需要在ReactDOM之前引入。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/05/aa05370df46c47614772a1dcdd02c099.png" alt="" />

<strong>配置编辑器支持React</strong>
可以参考如下链接对sublime进行优化以适应react.js的JSX语法：

<a href="https://segmentfault.com/a/1190000003698071">https://segmentfault.com/a/1190000003698071</a></p></li>
</ol>

<h2>了解React JSX</h2>

<h5>优势</h5>

<pre><code>1. 执行更快，因为编译过程中做过优化
2. 更加安全，能在编译时发现错误
3. 编辑更简单快速
</code></pre>

<h5>学习React有啥用</h5>

<p>大佬的博客介绍：<a href="https://www.cnblogs.com/clearyang/p/6898659.html">https://www.cnblogs.com/clearyang/p/6898659.html</a>

当然，吸引我的还有各种高大上的库，比如：<a href="https://pro.ant.design/index-cn">阿里的后台模板</a>，<a href="http://ant.design/index-cn">阿里的前端框架</a>，<a href="https://mobile.ant.design/index-cn">阿里移动端框架</a>，<a href="https://motion.ant.design">高大上的动效库</a>

还有React Native，学会之后可以用React语法做出原生App了，还可以转换成Android和IOS，强大的不要不要的！

<a href="https://reactnative.cn/docs/0.51/getting-started.html">React Native中文文档</a>

<h5>简单渲染</h5>

ReactDOM能将渲染虚拟DOM至指定元素，仅需要调用render()函数即可。

<pre data-language=><code class=" line-numbers">ReactDOM.render(
    &lt;div&gt;
        &lt;h1&gt;Hello World!&lt;/h1&gt;
        &lt;p&gt;多标签需要外包div&lt;/p&gt;
    &lt;/div&gt;
    ,
    document.getElementById('example')
);
</code></pre>

此段代码可以独立放到js文件中，然后引入即可(type="text/babel")。

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/MGGPoj?editors=1111">在CodePen中尝试</a>

<h5>JavaScript表达式</h5>

{name}可以输出变量，并且支持内部表达式。

<pre data-language=><code class=" line-numbers">var name = 'Wang';
var a = 1;
var b = 2;
ReactDOM.render(
    &lt;div&gt;
        &lt;p&gt;Hello, {name}!&lt;/p&gt;
        &lt;p&gt;a + b = {a+b}&lt;/p&gt;
        &lt;p&gt;结果{(a+b) &gt; 0 ? '大于' : '小于'}零&lt;/p&gt;
    &lt;/div&gt;,
    document.getElementById('example')
);
</code></pre>

<strong>注</strong>：JSX不支持if...else...，但是可以使用三目表达式来处理条件判断。

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/NMMOaW">在CodePen中尝试</a>

<h5>设置样式和注释</h5>

JSX支持使用 <strong>camelCase</strong> 语法来设置内联样式 ，如：

<pre data-language=><code class=" line-numbers">var btnStyle = {
    fontSize: '20px',
    color: '#fff',
};
ReactDOM.render(
    &lt;div&gt;
        {/*这里是注释哦！！！*/}
        &lt;button style={btnStyle}&gt;这是按钮&lt;/button&gt;
    &lt;/div&gt;,
    document.getElementById('example')
);
</code></pre>

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/MGGPEb">https://codepen.io/wangerzi/pen/MGGPEb</a>

<h5>展开数组</h5>

JSX自动展开数组元素

<pre data-language=><code class=" line-numbers">var viceTitleStyle = {
  textAlign: 'right',
};
var arr = [
    &lt;h1&gt;这里是ReactJS学习实况&lt;/h1&gt;,
    &lt;h2 style={viceTitleStyle}&gt;-- Jeffrey Wang&lt;/h2&gt;
];
ReactDOM.render(
    &lt;div&gt;
        {arr}
    &lt;/div&gt;,
    document.getElementById('example')
);
</code></pre>

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/OZZBxe">https://codepen.io/wangerzi/pen/OZZBxe</a>

<h5>重新渲染</h5>

仅需要重新调用render()即可，并且React只更新需要更新的地方。

<pre data-language=><code class=" line-numbers">function runtime(){
    ReactDOM.render(
        &lt;div&gt;
            &lt;h2&gt;{new Date().toLocaleTimeString()}&lt;/h2&gt;
        &lt;/div&gt;,
        document.getElementById('example')
    );
}
setInterval(runtime, 1000);
</code></pre>

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/LmmgOm">https://codepen.io/wangerzi/pen/LmmgOm</a>

<h2>React组件</h2>

<h5>html标签和React组件渲染的区别</h5>

渲染html标签的时候，标签都是以小写字母开头，如：<code>&lt;div&gt;&lt;/div&gt;</code>等。

渲染自定义组件时，标签都是以大写字母开头，如：<code>&lt;MyComponent&gt;&lt;/MyComponent&gt;</code>等。

<strong>注</strong>：由于JSX也是JS，所以class，for等属性不宜直接书写，应写为<code>className</code>,<code>htmlFor</code>。

<h5>创建组件并渲染</h5>

创建一个函数MyComponent，接受一个参数props，props参数传递DOM的属性值。

<pre data-language=><code class=" line-numbers">function MyComponent(props){
    return &lt;h1&gt;Hello {props.name}!&lt;/h1&gt;;
}
ReactDOM.render(
    &lt;MyComponent name="Wang" /&gt;,
    document.getElementById('example')
);
</code></pre>

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/errPyv">https://codepen.io/wangerzi/pen/errPyv</a>

<h5>复合组件(Composing Components)</h5>

新建组件的时候，可以自由组合其他组件，但是注意，<strong>复合的组件顶层也应该只有一个标签。</strong>

<pre data-language=><code class=" line-numbers">function MyName(props){
    return &lt;h2&gt;Hello, My name is {props.data}&lt;/h2&gt;;
}
function MyAge(props){
    return &lt;h2&gt;My Age is {props.data}&lt;/h2&gt;;
}
function MyInfo(props){
    return &lt;div&gt;
            &lt;MyName data={props.name} /&gt;
            &lt;MyAge data={props.age} /&gt;
        &lt;/div&gt;;
}
ReactDOM.render(
    &lt;MyInfo name="Wang" age="21" /&gt;,
    document.getElementById('example')
);
</code></pre>

<strong>注意</strong>：通过props给子组件传递参数时，不可加引号。

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/deegJj">https://codepen.io/wangerzi/pen/deegJj</a>

<h5>拆分组件</h5>

一些嵌套比较深的组件，可以拆分为多个组件，独立出来以减少耦合。

<pre data-language=><code class=" line-numbers">// 杂糅在一起的示范
function MyComment(props){
    return &lt;div&gt;
        &lt;div className="comment-head"&gt;
            &lt;div className="user-info"&gt;
                &lt;img src={props.author.avatar} /&gt;
                &lt;span&gt;{props.author.name}&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div className="comment-body"&gt;
            &lt;div className="comment-content"&gt;{props.comment.content}&lt;/div&gt;
            &lt;div className="comment-time"&gt;{props.comment.time.toString()}&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
}
const data = {
    author: {
        avatar: 'http://placekitten.com/g/64/64',
        name: 'JeffreyWang',
    },
    comment: {
        time: new Date(),
        content: '这里是评论内容！',
    }
};
ReactDOM.render(
    &lt;MyComment author={data.author} comment={data.comment} /&gt;,
    document.getElementById('example')
);
</code></pre>

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/OZZBze">https://codepen.io/wangerzi/pen/OZZBze</a>

<pre data-language=><code class=" line-numbers">// 拆分为多个组件，便于多次使用。
function UserInfo(props){
    return &lt;div className="user-info"&gt;
                &lt;img src={props.data.avatar} /&gt;
                &lt;span&gt;{props.data.name}&lt;/span&gt;
            &lt;/div&gt;
}
function CommentInfo(props){
    return &lt;div className="comment-body"&gt;
            &lt;div className="comment-content"&gt;{props.data.content}&lt;/div&gt;
            &lt;div className="comment-time"&gt;{props.data.time.toString()}&lt;/div&gt;
        &lt;/div&gt;
}
function MyComment(props){
    return &lt;div&gt;
        &lt;div class="comment-head"&gt;
            &lt;UserInfo data={props.author} /&gt;
        &lt;/div&gt;
        &lt;CommentInfo data={props.comment} /&gt;
    &lt;/div&gt;
}
const data = {
    author: {
        avatar: 'http://placekitten.com/g/64/64',
        name: 'JeffreyWang',
    },
    comment: {
        time: new Date(),
        content: '这里是评论内容！',
    }
};
ReactDOM.render(
    &lt;MyComment author={data.author} comment={data.comment} /&gt;,
    document.getElementById('example')
);
</code></pre>

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/LmmgQr">https://codepen.io/wangerzi/pen/LmmgQr</a>

<strong>注意</strong>：无论是通过function直接创建组件，或者通过新增类来创建组件，处理方法都需要是纯函数，即：不得改变传递参数props的值。如果需要使用可变的变量，可以参考下一节的状态和生命周期。

<h2>状态和生命周期</h2>

之前构建自定义组件的时候，都是以函数式构建的，但是现在需要以类来构建，以支持状态。

<h5>组件状态</h5>

<strong>注意</strong>：新老版本创建类的代码不一样，请注意区别。

<pre data-language=><code class=" line-numbers">// 新版本 - 使用ES6的继承
class MyInfo extends React.Component{
    // 初始化状态
    constructor(props){
        super(props);
        this.state = {date: new Date()};
    }
    render(){
        return &lt;h1&gt;Hello {this.props.name} {this.state.date.toString()}&lt;/h1&gt;;
    }
}
// 新版本 - 易于理解的写法
class MyInfo extends React.Component{
    render = function(){
        return &lt;h1&gt;Hello {this.props.name} {this.state.date.toString()}&lt;/h1&gt;;
    }
}
ReactDOM.render(
    &lt;MyInfo name="JeffreyWang" /&gt;,
    document.getElementById('example')
);
// 老版本- 使用React.createClass
var MyInfo2 = React.createClass({
    render: function(){
        return &lt;h1&gt;Hello {this.props.name}&lt;/h1&gt;;
    }
});
ReactDOM.render(
    &lt;MyInfo2 name="JeffreyWang" /&gt;,
    document.getElementById('example')
);
</code></pre>

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/MGGzwO">https://codepen.io/wangerzi/pen/MGGzwO</a>

老版本表现方法：<a href="https://www.cnblogs.com/javascript-center/p/5533131.html">https://www.cnblogs.com/javascript-center/p/5533131.html</a>

<strong>注意</strong>：内部<code>this.state = {data: new Date()};</code>即为状态，完全由组件自己管理，可以随意组件的意愿改变。

constructor(){}为构造函数，可用于初始化组件状态。

<h5>生命周期</h5>

在一个具有许多组件的应用程序中，在组件被销毁时释放所占用的资源是非常重要的。

组件渲染时，有一些特殊的回调，我们称为钩子函数，如：有一个<code>componmentDidMount</code>钩子函数，会在首次加载到DOM的时候会执行函数内容，再比如<code>componmentWillUnmount</code>钩子函数，会在卸载DOM的时候执行函数内容。

<strong>注意</strong>：this.setState(obj);会触发DOM的重新渲染，直接this.state.xxx = xxx;是不触发渲染的。

<pre data-language=><code class=" line-numbers">class Clock extends React.Component{
    constructor(props){
        super(props);
        this.state = {date:new Date()};
    }
    componentDidMount(){
        // 这里由于timeIndex并不需要显示，所以并没有存放到this.state中。
        // 这里的() =&gt; {}是一个ES6中的箭头函数，考虑到constructor()函数已经是ES6的语法了，所以这里直接用的() =&gt; {}。
        this.timeIndex = setInterval(() =&gt; {
            this.setState({date: new Date()});
        }, 1000);
    }
    componentWillUnmount(){
        if(this.timeIndex){
            clearInterval(this.timeIndex);
        }
        this.timeIndex = 0;
    }
    render(){
        return &lt;h1&gt;当前时间：{this.state.date.toLocaleTimeString()}&lt;/h1&gt;
    }
}
ReactDOM.render(
    &lt;Clock /&gt;,
    document.getElementById('example')
);
</code></pre>

引用官网文档：

<blockquote>
  来快速回顾一下该过程，以及调用方法的顺序：
  
  <ol>
  <li>当 <code>&lt;Clock /&gt;</code> 被传入 <code>ReactDOM.render()</code> 时, React 会调用 <code>Clock</code>组件的构造函数。 因为 <code>Clock</code> 要显示的是当前时间，所以它将使用包含当前时间的对象来初始化 <code>this.state</code> 。我们稍后会更新此状态。</li>
  <li>然后 React 调用了 <code>Clock</code> 组件的 <code>render()</code> 方法。 React 从该方法返回内容中得到要显示在屏幕上的内容。然后，React 然后更新 DOM 以匹配 <code>Clock</code> 的渲染输出。</li>
  <li>当 <code>Clock</code> 输出被插入到 DOM 中时，React 调用 <code>componentDidMount()</code> 生命周期钩子。在该方法中，<code>Clock</code> 组件请求浏览器设置一个定时器来调用匿名方法更新<code>this.state.date</code>。</li>
  <li>浏览器会每隔一秒调用一次 匿名方法。在该方法中， <code>Clock</code> 组件通过 <code>setState()</code> 方法并传递一个包含当前时间的对象来安排一个 UI 的更新。通过 <code>setState()</code>, React 得知了组件 <code>state</code>(状态)的变化, 随即再次调用 <code>render()</code> 方法，获取了当前应该显示的内容。 这次，<code>render()</code> 方法中的 <code>this.state.date</code> 的值已经发生了改变， 从而，其输出的内容也随之改变。React 于是据此对 DOM 进行更新。</li>
  <li>如果通过其他操作将 <code>Clock</code> 组件从 DOM 中移除了, React 会调用 <code>componentWillUnmount()</code>生命周期钩子, 所以计时器也会被停止。</li>
  </ol>
</blockquote>

<h5>使用状态(state)的三个要点</h5>

<ol>
<li>不能直接在钩子函数里边修改<code>this.state</code>，因为这并不会令DOM更新，只有在<code>constructor()</code>内直接修改this.state才是有效的，应该使用<code>this.setState({name: value})</code>

<pre data-language=><code class=" line-numbers">// 错误的示范
this.state.date = new Date();
// 正确的示范
this.setState({date: new Date()});
</code></pre></li>
<li>state的更新可能是异步的，因为出于性能优化的考虑，可能会将多个setState合并为一个进行更新。所以说，不能直接依赖<code>this.props</code>或者<code>this.state</code>

<pre data-language=><code class=" line-numbers">// 错误的示范
this.setState({count : this.state.count + 1)。
// 正确的示范
this.setState(function(prevState, props){
   return {count: prevState.count + 1};
});
</code></pre>

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/ELLMRr">https://codepen.io/wangerzi/pen/ELLMRr</a></p></li>
<li><p>state的更新会被合并，每次更新不同的项目并不会互相影响，比如：

<pre data-language=><code class=" line-numbers">class CommentBox extends React.Component{
   constructor(props){
       super(props);
       this.state = {
        users: [],
           comments: [],
       }
   }
   componentDidMount(){
       this.setState({users: ['user1', 'user2']});
       this.setState({comments: ['1111', '233333']});
   }
   render(){
       return &lt;div&gt;
        users:
        {this.state.users}
        comments:
        {this.state.comments}
       &lt;/div&gt;;
   }
}
ReactDOM.render(
&lt;CommentBox /&gt;,
document.getElementById('example')
);
</code></pre>

<strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/LmmaaY">https://codepen.io/wangerzi/pen/LmmaaY</a></p></li>
<li><p>state可以通过属性的形式向下传递，比如子组件<code>&lt;Clock name={this.state.name}&gt;</code>，子组件并不在意上层组件传递的数据是 state、prop或者手动写入，也不论上层组件是函数式抑或类，都使用<code>this.props.xxx</code>来进行参数接受。

<pre data-language=><code class=" line-numbers">function MyName(props){
   return &lt;h2&gt;Hello, My name is {props.data}&lt;/h2&gt;;
}
function MyAge(props){
   return &lt;h2&gt;My Age is {props.data}&lt;/h2&gt;;
}
class MyInfo extends React.Component{
   constructor(props){
       super(props);
       this.state = {
           name: props.name || 'Wang',
           age: props.age || 21,
       }
   }
   render(){
       return &lt;div&gt;
        &lt;MyName data={this.state.name} /&gt;
        &lt;MyAge data={this.state.age} /&gt;
    &lt;/div&gt;;
   }
}
ReactDOM.render(
&lt;MyInfo name="Wang" /&gt;,
document.getElementById('example')
);
</code></pre>

<p><strong>在线演示：</strong><a href="https://codepen.io/wangerzi/pen/vjjPqK">https://codepen.io/wangerzi/pen/vjjPqK</a></p></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[React可以使构建交互UI的过程变得简单。对于你的应用里面的每个状态视图，当数据变化的时候，React都会及时并且正确有效率地进行对其更新。本文介绍了React的安装、组件构建、状态和生命周期等。]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2018-05-12 17:46:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-12 09:46:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[reactjs%e5%ad%a6%e4%b9%a01-%e5%ae%89%e8%a3%85%e3%80%81jsx%e3%80%81%e7%bb%84%e4%bb%b6%e3%80%81%e7%8a%b6%e6%80%81%e5%92%8c%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="reactjs"><![CDATA[ReactJS]]></category>
		<category domain="category" nicename="web-front"><![CDATA[前端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[238]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[115]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582145622;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:10;}i:1;a:1:{s:2:"id";i:255;}i:2;a:1:{s:2:"id";i:287;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>修改nginx、php-fpm运行用户导致无法写入session问题的解决方案</title>
		<link>https://blog.wj2015.com/2018/05/26/%e4%bf%ae%e6%94%b9nginx%e3%80%81php-fpm%e8%bf%90%e8%a1%8c%e7%94%a8%e6%88%b7%e5%af%bc%e8%87%b4%e6%97%a0%e6%b3%95%e5%86%99%e5%85%a5session%e9%97%ae%e9%a2%98%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88/</link>
		<pubDate>Sat, 26 May 2018 07:38:44 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=250</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>背景</h1>

在Linux环境下，我一般喜欢用yum快速搭建LNMP环境，但是搭建出来的环境存在一个问题，就是Nginx的默认执行用户是<code>nginx:nginx</code>，php-fpm的默认执行用户是<code>apache:apache</code>，当我用php保存一个文件时，文件所属自然而然是<code>apache:apache</code>，导致网站内的文件所属不统一，最终可能回导致很多由权限引起的bug。

<h1>解决方案</h1>

修改nginx或者php-fpm的执行用户即可，在nginx中，修改执行用户很简单，编辑<code>/etc/nginx/nginx.conf</code>，你会在顶部找到一个关键字<code>user</code>，编辑为想要的用户即可。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/05/dd4e4ed8ca2e33a08e6ba02369c85648.png" alt="" />
修改完毕之后，记得重启nginx，<code>service nginx restart</code>

修改php-fpm的执行用户也很简单，编辑<code>/etc/php-fpm.d/www.conf</code>，搜索关键字<code>user</code>，会在35行左右，找到运行的用户和用户组，修改为自己需要的就可以了。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/05/616c5c587571a29a73e378fcf5685c0d.png" alt="" />
修改完毕后，重启php-fpm，<code>service php-fpm restart</code>

<h3>出现问题</h3>

修改完php-fpm的运行用户后，重新访问网站，神奇的发现，登陆等一系列<font color="#f00"><strong>涉及到session的东西都无法使用</strong></font>。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/05/fd35585636cf0d92897c9e5df5cb8a89.png" alt="" />
我想，session失效？？服务器并没有更改session相关的配置，意思是服务器按照最原始的方式将用户session数据<font color="#f00">存放在某一个文件中</font>，而我刚刚又更改了php的执行用户，会不会是这个用户<font color="#f00">没有权限写入session</font>导致失效的呢？
于是，抱着试一试的想法，我打开了<code>/etc/php-fpm.d/www.conf</code>，搜索<code>session</code>，发现session文件被存放在<code>/var/lib/php/</code>下。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/05/d33afac706489588a4867aa70b6b5973.png" alt="" />

ll命令看看情况<code>ll /var/lib/php/</code>，果不其然，所属为root:apache的文件，无法由nginx:nginx写入。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/05/5dd24ca6e70c7c5163fafe41a073b9b1.png" alt="" />

<img src="https://blog.wj2015.com/wp-content/uploads/2018/05/2bbef8dfd3aafc2ecc85c94350f7f593.png" alt="" />

最后，使用<code>chown -R nginx:nginx /var/lib/php</code>，修改所属即可，这里我使用<code>nginx:nginx</code>是因为我把php-fpm的执行用户改成了<code>nginx:nginx</code>。

<h1>结语</h1>

Linux里边，文件权限没有设置正确，总是容易导致一些莫名其妙的问题，共勉！]]></content:encoded>
		<excerpt:encoded><![CDATA[在Linux环境下，我一般喜欢用yum快速搭建LNMP环境，但是搭建出来的环境存在一个问题，就是Nginx的默认执行用户是`nginx:nginx`，php-fpm的默认执行用户是`apache:apache`，当我用php保存一个文件时，文件所属自然而然是`apache:apache`，导致网站内的文件所属不统一，最终可能回导致很多由权限引起的bug。]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date><![CDATA[2018-05-26 15:38:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-26 07:38:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bf%ae%e6%94%b9nginx%e3%80%81php-fpm%e8%bf%90%e8%a1%8c%e7%94%a8%e6%88%b7%e5%af%bc%e8%87%b4%e6%97%a0%e6%b3%95%e5%86%99%e5%85%a5session%e9%97%ae%e9%a2%98%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="php-fpm"><![CDATA[php-fpm]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[251]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[495]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[743]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582343454;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:255;}i:1;a:1:{s:2:"id";i:287;}i:2;a:1:{s:2:"id";i:121;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何搭建自己的SVN服务器，附踩坑实录</title>
		<link>https://blog.wj2015.com/2018/07/20/%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95/</link>
		<pubDate>Fri, 20 Jul 2018 02:23:53 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=255</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>目标</h1>

<ol>
<li>在Linux服务器上搭建SVN，实现服务器本地使用SVN自动同步最新代码</li>
<li>新建N个账号，给产品、程序员在公网环境下使用</li>
</ol>

[toc]

<h1>准备工作</h1>

首先，，你得有一台服务器，如果这个SVN仓库需要能在公网访问，服务器得需要有一个公网IP。
如果没有公网环境，虚拟机来做测试也是可以的，甚至家里边用不上的电脑加花生壳软件，再做一个映射都行。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/timg-5-300x231.jpg" alt="" />

<h1>SVN简介</h1>

SVN是subversion的简称，是一个操作简单的中心化的版本控制器，Windows上使用TortoiseSVN软件或者Linux上使用subversion工具，就可以方便的在各个客户端同步代码、资料等。<a href="https://tortoisesvn.net/downloads.html" title="TortoiseSVN下载">TortoiseSVN下载</a>
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/9e18b6f2f0fbb72f8c8c374218f3436c.gif" alt="" />

<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/790909ad2936bd191a9ead8940c0d568.png" alt="" />

<h1>操作步骤</h1>

<h2>安装subversion</h2>

先确定服务器是否有安装subversion

<pre><code class=" line-numbers">[root@localhost ~]# svnversion --version
</code></pre>

如下图所示，是未安装的情况
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/278260c66dc742a58eefce599cf4d745.png" alt="" />

如果未安装，使用yum install安装一下即可

<pre><code class=" line-numbers">[root@localhost ~]# yum install subversion
</code></pre>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/0bab54e406d396fb4bba6e41f8e6eb8a.png" alt="" />

安装成功后，subversion -v确定下，如下图所示就是安装成功

<pre><code class=" line-numbers">[root@localhost ~]# svnversion --version
</code></pre>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/cc9a499649ac9674e9fe1d5572df2e6b.png" alt="" />

<h2>新建SVN仓库</h2>

创建SVN仓库的命令是svnadmin create 仓库路径
比如，我想让我的<code>/var/svn/</code>作为我SVN仓库的根目录，那么可以分为三个步骤进行仓库创建操作

<pre><code>创建文件夹 =&gt; 进入文件夹 =&gt; 创建仓库
</code></pre>

示例如下：

<pre><code class=" line-numbers">[root@localhost ~]# mkdir /var/svn
[root@localhost ~]# cd /var/svn/
[root@localhost svn]# svnadmin create test
</code></pre>

执行结果如下，在<code>/var/svn/test</code>下创建了一个仓库
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/c848cc30a22f99fc77c591341cfca9ad.png" alt="" />

<h2>配置SVN</h2>

创建完毕后，<code>/var/svn/test</code>目录下出现conf、db、hooks等目录
其中，conf文件夹下包含三个重要的文件<code>conf/passwd</code>、<code>conf/authz</code>、<code>conf/svnserve</code>

<table>
<thead>
<tr>
  <th>文件名</th>
  <th>描述</th>
</tr>
</thead>
<tbody>
<tr>
  <td>conf/passwd</td>
  <td>用户文件，配置用户名和密码</td>
</tr>
<tr>
  <td>conf/authz</td>
  <td>用户权限文件，用于配置用户权限</td>
</tr>
<tr>
  <td>conf/svnserve.conf</td>
  <td>配置启动参数</td>
</tr>
</tbody>
</table>

<h3>用户文件passwd</h3>

首先，编辑passwd文件，里边只有一个[users]模块，含义是 用户名 = 密码
比如，我们有Jeffrey、Sally、Jack、Pony四个人，密码是名字+123，就可以这样写

<pre><code class=" line-numbers">[root@localhost conf]# vim passwd
</code></pre>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/e47e510b09981bc35dbe67eb8f43de4d.png" alt="" />

<h3>权限文件authz</h3>

权限文件用于指定访问权限，可指定分组权限或个人权限
比如：
Jeffrey和Sally是程序员，属于programers分组，只读<code>/doc/</code>目录，读写<code>/src/</code>目录。
Jack是产品经理，属于PM分组，能读写<code>/doc/</code>，不能访问<code>/src/</code>。
Pony是老板，属于Mangager分组，能读写<code>/doc</code>、<code>/src/</code>。

<strong>样例如下</strong>：
[groups]模块里边配置分组信息
[/dir]模块里边配置分组权限/个人权限信息，r代表读，w代表写

<pre><code class=" line-numbers">配置说明：
分组名 = rw   # 分组权限配置
&amp;用户名 = rw  # 单个用户权限配置
* = rw        # 所有用户权限配置
</code></pre>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/97bba3045f1c898642cd6ae5411199d6.png" alt="" />

<h3>启动文件svnserve.conf</h3>

用于配置启动参数，具体说明如下图所示
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/5c5f5d4251b858965373d5e80d834773.png" alt="" />

<h2>运行SVNSERVE</h2>

配置完毕之后就可以启动SVN服务了，svnserve是一个服务端程序，启动后就能向其他人提供SVN服务。

<strong>参数说明：</strong>
svnserve -d -r /路径 --listen-port 端口号
-d 表示守护进程
-r 表示SVN服务根路径
--listen-port 可指定端口号

<pre><code class=" line-numbers"># 运行服务端程序
[root@localhost conf]# svnserve -d -r /var/svn/
# 检查是否运行成功
[root@localhost conf]# ps -fe | grep svnserve
root      1586     1  0 02:25 ?        00:00:00 svnserve -d -r /var/svn/
root      1588  1448  0 02:25 pts/0    00:00:00 grep svnserve
</code></pre>

<h3>本地仓库测试</h3>

假设现在这个服务器上搭建有一个网站，路径是<code>/var/www/html/</code>，需要使用svn更新代码。
<strong>【注】</strong>首次使用，需要输入root密码和配置的用户名+密码，root密码直接输入空就行了。

<pre><code class=" line-numbers">[root@localhost html]# svn checkout svn://127.0.0.1/test/
认证领域: &lt;svn://127.0.0.1:3690&gt; My First Repository
“root”的密码: 
认证领域: &lt;svn://127.0.0.1:3690&gt; My First Repository
用户名: Jeffrey
“Jeffrey”的密码: 

-----------------------------------------------------------------------
注意!  你的密码，对于认证域:

   &lt;svn://127.0.0.1:3690&gt; My First Repository

只能明文保存在磁盘上!  如果可能的话，请考虑配置你的系统，让 Subversion
可以保存加密后的密码。请参阅文档以获得详细信息。

你可以通过在“/root/.subversion/servers”中设置选项“store-plaintext-passwords”为“yes”或“no”，
来避免再次出现此警告。
-----------------------------------------------------------------------
保存未加密的密码(yes/no)?yes
[root@localhost html]# svn checkout svn://127.0.0.1/test/
取出版本 0。
</code></pre>

<h4>添加文件</h4>

【注】先切换到<code>/var/www/html/test/</code>，再进行SVN操作，还有<strong>使用的用户是Jeffrey用户，只有src目录的写权限，所以只能提交src目录，否则报权限错误。</strong>。
【注】测试是，我给<code>src/index.html</code>里边写入了"Hello World!"

<pre><code class=" line-numbers">[root@localhost html]# cd test/
[root@localhost test]# mkdir doc/ src
[root@localhost test]# vim src/index.html
[root@localhost test]# svn status
?       doc
?       src
</code></pre>

<h4>提交</h4>

commit的时候，-m 后写上理由即可。

<pre><code class=" line-numbers">[root@localhost test]# svn add src/
A         src
A         src/index.html
[root@localhost test]# svn commit -m '初始化提交'
增加           src
增加           src/index.html
传输文件数据.
提交后的版本为 1。
</code></pre>

<h4>实现脚本自动同步最新代码</h4>

Linux中可以使用shell+contab定时拉取SVN中的最新代码，也不麻烦。

<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/timg-6-300x219.jpg" alt="" />

如果没有安装crontab，需要<code>yum install crontabs</code>，再<code>service crond start</code>

<code>~/svnupdate.sh</code>内容：

<pre><code class=" line-numbers">#! /bin/sh
# 进入目标目录
cd /var/www/html/test
# 调用svn update即可同步
svn update
</code></pre>

<code>crontab -e</code>内容：

<pre><code class=" line-numbers">*/60 * * * * /bin/shell /root/autogitpull.sh
</code></pre>

命令概览

<pre><code class=" line-numbers">[root@localhost test]# vim ~/svnupdate.sh
[root@localhost test]# chmod u+x ~/svnupdate.sh
# 测试脚本是否正确
[root@localhost test]# ~/svnupdate.sh 
版本 1。
</code></pre>

<h3>远程仓库测试</h3>

首先，SVN服务器的IP为<code>192.168.220.128</code>，所以Linux或Windows需要在指定地址是<code>svn://192.168.220.128/test</code>（创建的test项目）
<strong>【注】</strong>如果出现如下错误，请按照采坑实录调整双方防火墙

<pre><code class=" line-numbers">[root@localhost html]# svn checkout svn://192.168.220.128/test/
svn: 无法连接主机“192.168.220.128”: 没有到主机的路由
</code></pre>

<h4>Linux同步SVN测试</h4>

首先，按照相同的方法安装subversion

<pre><code class=" line-numbers">[root@localhost ~]# /usr/bin/yum install subversion
已加载插件：fastestmirror
设置安装进程
Loading mirror speeds from cached hostfile
</code></pre>

特别需要注意，如果Linux本机没有开启8690的INPUT和OUTPUT，也会出现问题。
不用开启subserve，直接<code>svn checkout svn://192.168.220.128/test/src/</code>即可。

<pre><code class=" line-numbers">[root@localhost html]# svn checkout svn://192.168.220.128/test/src
认证领域: &lt;svn://192.168.220.128:3690&gt; My First Repository
“root”的密码: 
认证领域: &lt;svn://192.168.220.128:3690&gt; My First Repository
用户名: Sally
“Sally”的密码: 

-----------------------------------------------------------------------
注意!  你的密码，对于认证域:

   &lt;svn://192.168.220.128:3690&gt; My First Repository

只能明文保存在磁盘上!  如果可能的话，请考虑配置你的系统，让 Subversion
可以保存加密后的密码。请参阅文档以获得详细信息。

你可以通过在“/root/.subversion/servers”中设置选项“store-plaintext-passwords”为“yes”或“no”，
来避免再次出现此警告。
-----------------------------------------------------------------------
保存未加密的密码(yes/no)?yes
A    src/index.html
取出版本 1。
[root@localhost html]# tail src/index.html 
Hello World!
</code></pre>

<h4>Windows同步SVN测试</h4>

安装完TortoiseSVN之后，在一个空文件夹里 右键 》 SVN Checkout
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/db0c19e75a1a6ce3e9af4255ab2c2bce.png" alt="" />
填写SVN地址，点OK再输入密码，即可同步
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/55053a8c06ae360634e4f70d61d5841a.png" alt="" />
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/9e6460e9196b5bb28d71f29a2cbfa27e.png" alt="" />

<h2>踩坑实录</h2>

各位请留步，博主还针对容易出现各种"Connect timed out"、"Connect refused"等问题，进行了一下总结。
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/timg-2-300x187.jpg" alt="" />

<h3>认证失败</h3>

如果出现“认证失败”或“Authorization Faild!”，首先考虑<code>conf/authz</code>的权限配置问题，特别是[/]分组的权限配置问题，先改为* = rw试一试。

<pre><code class=" line-numbers">[/]
* = rw
</code></pre>

如果是输入密码错误导致的"Authorization Faild!"可以删除<code>~/.subversion/auth/</code>，删除后即可重新输入密码。

<pre><code class=" line-numbers">[root@localhost test]# rm -rf ~/.subversion/auth
</code></pre>

<h3>iptables配置</h3>

svnserve的默认端口是3690，所以需要开启INPUT链 dport 3690和OUTPUT链 sport 3690。
<code>vim /etc/sysconfig/iptables</code>

在末尾加入下边三行代码

<pre><code class=" line-numbers"># SVN
-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT
-A OUTPUT -p tcp -m tcp --sport 3690 -m state --state ESTABLISHED -j ACCEPT
</code></pre>

然后重启防火墙，Centos6：<code>service iptables restart</code>，Centos7，如果使用fireware则另行配置。

如果SVN客户端也是Linux的话，需要给客户端Linux加上防火墙配置

<pre><code class=" line-numbers"># SVN
-A INPUT -m state --state NEW -m tcp -p tcp --sport 3690 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 3690 -m state --state ESTABLISHED -j ACCEPT
</code></pre>

<h3>深坑-云主机的安全组</h3>

<strong>深坑警告！！！</strong>
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/timg-1-1-300x258.jpg" alt="" />
腾讯云、阿里云均设有 安全组功能，类似于在服务器最外层加上了一个iptables，很多时候也能起到一定的防护作用。但是当我们启动了一个服务，但是没有在安全组内放开端口权限的话，，肯定报超时！！！

<h4>创建安全组</h4>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/e8c51965110239a6757f2859bd1c01dc.png" alt="" />

选择<strong>自定义</strong>
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/7aeb6d29649bb8ce25193c7a6be2a10b.png" alt="" />

<h4>配置8690开放</h4>

入站规则 》 新建规则中，允许所有的8609访问
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/07f78c01b1b7264547f26f9ce083b779.png" alt="" />
出站规则 》 新建规则中，允许所有流量流出即可
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/103ef20c68667829ebf2d29f1c9ca981.png" alt="" />
顺手来个表情包
<img src="https://blog.wj2015.com/wp-content/uploads/2018/07/timg-300x138.jpg" alt="" />

<h2>总结</h2>

配置不坑，防火墙和安全组挺坑的]]></content:encoded>
		<excerpt:encoded><![CDATA[在Linux服务器上搭建SVN，实现服务器本地使用SVN同步最新代码，新建N个账号，给产品、程序员在公网环境下使用，还有各种坑的解决方案。]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date><![CDATA[2018-07-20 10:23:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-20 02:23:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e8%b8%a9%e5%9d%91%e5%ae%9e%e5%bd%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[SVN]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[266]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e5%a6%82%e4%bd%95%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84svn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%8c%e9%99%84%e9%87%87%e5%9d%91%e5%ae%9e%e5%bd%95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[678]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[467]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581914740;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:174;}i:1;a:1:{s:2:"id";i:287;}i:2;a:1:{s:2:"id";i:10;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>一道关于无限级分类的测试题</title>
		<link>https://blog.wj2015.com/2018/08/08/%e4%b8%80%e9%81%93%e5%85%b3%e4%ba%8e%e6%97%a0%e9%99%90%e7%ba%a7%e5%88%86%e7%b1%bb%e7%9a%84%e6%b5%8b%e8%af%95%e9%a2%98/</link>
		<pubDate>Wed, 08 Aug 2018 08:51:23 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=276</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>题目内容</h2>

<h5>写一个函数，通过递归调用将以下数组打印出来：</h5>

<blockquote>
  $arr = array(
           array(‘id’=>1, ‘pid‘=>0, ‘text’=>‘1’),
           array(‘id’=>2, ‘pid‘=>0, ‘text’=> ‘2’),
           array(‘id’=>3, ‘pid‘=>0, ‘text’=> ‘3’),
           array(‘id’=>4, ‘pid‘=>0, ‘text’=> ‘4’),
           array(‘id’=>5, ‘pid‘=>0, ‘text’=> ‘5’),
           array(‘id’=>6, ‘pid‘=>0, ‘text’=> ‘6’),
           array(‘id’=>7, ‘pid‘=>3, ‘text’=> ‘3.1’),
           array(‘id’=>8, ‘pid‘=>3, ‘text’=> ‘3.2’),
           array(‘id’=>9, ‘pid‘=>3, ‘text’=> ‘3.3’),
           array(‘id’=>10, ‘pid‘=>9, ‘text’=> ‘3.3.1’),
           array(‘id’=>11, ‘pid‘=>9, ‘text’=> ‘3.3.1’),
           array(‘id’=>12, ‘pid‘=>9, ‘text’=> ‘3.3.1’),
  );
  要求打印的结果：
  1
  2
  3
  --------3.1
  --------3.2
  --------3.3
  ----------------3.3.1
  ----------------3.3.2
  ----------------3.3.3
  4
  5
  6
</blockquote>

<h2>题目分析</h2>

使用pid指向父级元素id是 “无限级分类”的常用表示方法，观察题目的输出可知，这是一个<strong>深度遍历</strong>，从顶级节点开始遍历，如果某个节点下有子节点，则优先遍历子节点，直到顶级节点遍历完毕。

<h2>代码实现</h2>

下面贴出博主编写的代码：

<pre><code class="language-php line-numbers">&lt;?php

/**
 * @Author: JeffreyWang
 * @Date:   2018-08-08 16:24:25
 * @Last Modified by:   94468
 * @Last Modified time: 2018-08-08 16:37:14
 */
namespace Wang\Lib;
class InfiniteTree{
    protected $treedata = null;
    /**
     * 构造函数
     * @param [type] $arr [树的数组数据，必须包含id和pid]
     */
    function __construct($arr){
        $this-&gt;init($arr);
    }
    /**
     * 初始化函数
     * @param  [type] $arr [树的数组数据，必须包含id和pid]
     * @return [type]      [description]
     */
    function init($arr){
        $this-&gt;treedata = $arr;
    }
    /**
     * 按照规则遍历树
     * @param  integer $pid   [description]
     * @param  integer $dept  [description]
     * @param  string  $split [description]
     * @return [type]         [description]
     */
    public function tranverse($pid = 0, $dept = 0, $split="--------"){
        $data = array();
        // 查找符合要求的数据
        foreach($this-&gt;treedata as $key =&gt; $value){
            if($value['pid'] == $pid){
                if($dept){
                    // 只有dept&gt;0才重复字符串
                    echo str_repeat($split, $dept);
                }
                echo $value['text']."&lt;br/&gt;\n";
                // 调用下一层
                $this-&gt;tranverse($value['id'], $dept+1, $split);
            }
        }
    }
}
$arr = array(
         array('id'=&gt;1, 'pid'=&gt;0, 'text'=&gt;'1'),
         array('id'=&gt;2, 'pid'=&gt;0, 'text'=&gt; '2'),
         array('id'=&gt;3, 'pid'=&gt;0, 'text'=&gt; '3'),
         array('id'=&gt;4, 'pid'=&gt;0, 'text'=&gt; '4'),
         array('id'=&gt;5, 'pid'=&gt;0, 'text'=&gt; '5'),
         array('id'=&gt;6, 'pid'=&gt;0, 'text'=&gt; '6'),
         array('id'=&gt;7, 'pid'=&gt;3, 'text'=&gt; '3.1'),
         array('id'=&gt;8, 'pid'=&gt;3, 'text'=&gt; '3.2'),
         array('id'=&gt;9, 'pid'=&gt;3, 'text'=&gt; '3.3'),
         array('id'=&gt;10, 'pid'=&gt;9, 'text'=&gt; '3.3.1'),
         array('id'=&gt;11, 'pid'=&gt;9, 'text'=&gt; '3.3.1'),
         array('id'=&gt;12, 'pid'=&gt;9, 'text'=&gt; '3.3.1'),
);
$obj = new InfiniteTree($arr);
$obj-&gt;tranverse();
</code></pre>

<h5>输出结果</h5>

<img src="https://blog.wj2015.com/wp-content/uploads/2018/08/d14eb71501932604afe4b67a9d1164b2.png" alt="" />

<h2>总结</h2>

仔细观察输出结果，确定是深度遍历/广度遍历即可解决问题]]></content:encoded>
		<excerpt:encoded><![CDATA[实现一个无限级树的深度遍历！]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date><![CDATA[2018-08-08 16:51:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-08 08:51:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%80%e9%81%93%e5%85%b3%e4%ba%8e%e6%97%a0%e9%99%90%e7%ba%a7%e5%88%86%e7%b1%bb%e7%9a%84%e6%b5%8b%e8%af%95%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<category domain="post_tag" nicename="%e6%97%a0%e9%99%90%e7%ba%a7%e5%88%86%e7%b1%bb"><![CDATA[无限级分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e4%b8%80%e9%81%93%e5%85%b3%e4%ba%8e%e6%97%a0%e9%99%90%e6%9e%81%e5%88%86%e7%b1%bb%e7%9a%84%e7%ae%80%e5%8d%95%e6%b5%8b%e8%af%95%e9%a2%98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[281]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[103]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[35]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1580897041;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:410;}i:1;a:1:{s:2:"id";i:379;}i:2;a:1:{s:2:"id";i:442;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何使用vbot做一个自动微信客服系统（一）环境、踩坑及运行</title>
		<link>https://blog.wj2015.com/2018/10/12/%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8vbot%e5%81%9a%e4%b8%80%e4%b8%aa%e8%87%aa%e5%8a%a8%e5%be%ae%e4%bf%a1%e5%ae%a2%e6%9c%8d%e7%b3%bb%e7%bb%9f%ef%bc%88%e4%b8%80%ef%bc%89%e7%8e%af%e5%a2%83%e3%80%81/</link>
		<pubDate>Fri, 12 Oct 2018 01:52:49 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=287</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>目标</h2>

监听符合规则的群聊，发现某些关键字的时候，可以自动回复消息。

<h3>举个栗子</h3>

群聊名称规则为： WJ_&#42;&#42;&#42;，监听到关键字 “博客” 时，自动回复我的博客地址，监听到关键字 “斗图” 时，随机回复一张图片，监听到关键字 “装X指南”，自动发送一篇pdf文档等。
如果配置了swoole，还可以让机器人每天早上给 客(妹)户(子) 发早安，每天晚上发晚安，天气热了降温，天气凉了添衣，特殊日子安抚安抚！o(&#42;￣▽￣&#42;)o

<h1>Vbot是神魔</h1>

Vbot是一个基于PHP7的微信机器人，支持被动回复消息或者主动给用户发送消息。发消息的原理是使用微信网页端API，所以微信网页端能做什么，vbot就能做什么。
官网地址：<a href="http://create.hanc.cc/">http://create.hanc.cc/</a>
官方示例：<a href="https://github.com/HanSon/my-vbot">https://github.com/HanSon/my-vbot</a>

<h2>安装Vbot</h2>

要想运行vbot，首先得有一个运行环境，测试环境可以是虚拟机，因为要一直跑，所以运行环境需要是一直运行的服务器才行。
<font color="red"><strong>【注意】</strong>本教程基于Linux，因为Swoole扩展和 php-curl 扩展的特殊性，博主并没有在 Windows 上倒腾。</font>
博主的运行环境：Centos 7

<h3>PHP的安装</h3>

PHP的环境需要在 7.0 以上，为了方便安装，所以采用了yum + webstatic源

<h4>使用webstatic源</h4>

执行指令：

<pre><code class="language-shell line-numbers">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
</code></pre>

等待安装完毕之后，执行如下指令：
<strong>【注】</strong>由于要编译安装某些 php 插件，所以需要安装 php-devel 以支持 phpize

<pre><code class="language-shell line-numbers">yum install php71w-cli php71w-devel
</code></pre>

执行完毕之后，检查下版本

<pre><code class="language-shell line-numbers">php -v
</code></pre>

执行结果如下：

<pre><code class="language-shell line-numbers">[root@localhost ~]# php -v
PHP 7.1.20 (cli) (built: Jul 20 2018 08:31:34) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies
</code></pre>

<h2>使CURL支持OPENSSL</h2>

<font color="red"><strong>【重点大坑】</strong></font>这个步骤千万要做，不然Vbot就无法主动发送消息了，会一直循环报一个特别奇葩的错误。
可以参考的博客：<a href="https://www.cnblogs.com/showker/p/4706271.html">https://www.cnblogs.com/showker/p/4706271.html</a>
首先，查看一下现在curl的状态：

<pre><code class="language-shell line-numbers">[root@localhost ~]# curl -V
curl 7.29.0 (x86_64-redhat-linux-gnu) libcurl/7.29.0 NSS/3.28.4 zlib/1.2.7 libidn/1.28 libssh2/1.4.3
Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp scp sftp smtp smtps telnet tftp 
Features: AsynchDNS GSS-Negotiate IDN IPv6 Largefile NTLM NTLM_WB SSL libz unix-sockets
</code></pre>

可以清楚的看到 <strong>NSS/3.28.4</strong>，并不是期望的 <strong>OPENSSL</strong>

<h5>安装openssl和openssl-devel</h5>

<pre><code class="language-shell line-numbers">yum install openssl openssl-devel
</code></pre>

<h5>尝试更新curl</h5>

<pre><code class="language-shell line-numbers">[root@localhost swoole-src-4.0.4]# yum update openssl curl
</code></pre>

检查 <code>curl -V</code>，如果已经是 <strong>OPENSSL</strong> 模式，则跳过下一步，否则继续

<h5>重新编译curl做替换</h5>

首先从github下载curl的源码包并解压

<pre><code class="language-shell line-numbers">[root@localhost swoole-src-4.0.4]# wget https://github.com/curl/curl/archive/curl-7_61_0.tar.gz
--2018-08-29 19:26:56--  https://github.com/curl/curl/archive/curl-7_61_0.tar.gz
[root@localhost swoole-src-4.0.4]# tar -zxvf curl-7_61_0.tar.gz
[root@localhost swoole-src-4.0.4]# cd curl-curl-7_61_0/
[root@localhost curl-curl-7_61_0]#
</code></pre>

开始 <code>./buildconf</code> <code>./configure</code> <code>make &amp;&amp; make install</code>
【注意】./buildconf 是为了确认编译环境是否有缺失，如果差某些包，yum安装一下即可。
比如：

<pre><code class="language-shell line-numbers">[root@localhost curl-curl-7_61_0]# ./buildconf 
buildconf: autoconf version 2.69 (ok)
buildconf: autom4te version 2.69 (ok)
buildconf: autoheader version 2.69 (ok)
buildconf: automake version 1.13.4 (ok)
buildconf: aclocal version 1.13.4 (ok)
buildconf: libtoolize not found.
  You need GNU libtoolize 1.4.2 or newer installed.
</code></pre>

执行以下指令安装 libtool：

<pre><code class="language-shell line-numbers">[root@localhost ~]# yum install libtool
</code></pre>

再执行 <code>./buildconf</code> 就会出现如下所示的结果

<pre><code class="line-numbers">[root@localhost curl-curl-7_61_0]# ./buildconf 
buildconf: autoconf version 2.69 (ok)
buildconf: autom4te version 2.69 (ok)
buildconf: autoheader version 2.69 (ok)
buildconf: automake version 1.13.4 (ok)
buildconf: aclocal version 1.13.4 (ok)
buildconf: libtoolize version 2.4.2 (ok)
buildconf: GNU m4 version 1.4.16 (ok)
buildconf: running libtoolize
libtoolize: putting auxiliary files in `.'.
libtoolize: copying file `./ltmain.sh'
libtoolize: putting macros in AC_CONFIG_MACRO_DIR, `m4'.
libtoolize: copying file `m4/libtool.m4'
libtoolize: copying file `m4/ltoptions.m4'
libtoolize: copying file `m4/ltsugar.m4'
libtoolize: copying file `m4/ltversion.m4'
libtoolize: copying file `m4/lt~obsolete.m4'
libtoolize: Remember to add `LT_INIT' to configure.ac.
buildconf: converting all mv to mv -f in local m4/libtool.m4
buildconf: running aclocal
buildconf: converting all mv to mv -f in local aclocal.m4
buildconf: running autoheader
buildconf: running autoconf
buildconf: running automake
configure.ac:125: installing './compile'
configure.ac:187: installing './config.guess'
configure.ac:187: installing './config.sub'
configure.ac:125: installing './install-sh'
configure.ac:133: installing './missing'
docs/examples/Makefile.am: installing './depcomp'
parallel-tests: installing './test-driver'
buildconf: OK
</code></pre>

<h5>编译安装</h5>

<pre><code class="language-shell line-numbers">[root@localhost curl-curl-7_61_0]# ./configure --without-nss --with-ssl
[root@localhost curl-curl-7_61_0]# make &amp;&amp; make install
</code></pre>

<strong>【特别注意】这里的 --without-nss --with-ssl 是指使用 SSL ，而不使用 NSS</strong>
编译结果里边注意查看下 SSL support：

<pre><code class="line-numbers">config.status: executing libtool commands
configure: Configured to build curl/libcurl:

  curl version:     7.61.0-DEV
  Host setup:       x86_64-unknown-linux-gnu
  Install prefix:   /usr/local
  Compiler:         gcc
  SSL support:      enabled (OpenSSL)
  SSH support:      no      (--with-libssh2)
  zlib support:     enabled
  brotli support:   no      (--with-brotli)
  GSS-API support:  no      (--with-gssapi)
  TLS-SRP support:  no      (--enable-tls-srp)
  resolver:         POSIX threaded
  IPv6 support:     enabled
  Unix sockets support: enabled
  IDN support:      no      (--with-{libidn2,winidn})
  Build libcurl:    Shared=yes, Static=yes
  Built-in manual:  enabled
  --libcurl option: enabled (--disable-libcurl-option)
  Verbose errors:   enabled (--disable-verbose)
  SSPI support:     no      (--enable-sspi)
  ca cert bundle:   /etc/pki/tls/certs/ca-bundle.crt
  ca cert path:     no
  ca fallback:      no
  LDAP support:     no      (--enable-ldap / --with-ldap-lib / --with-lber-lib)
  LDAPS support:    no      (--enable-ldaps)
  RTSP support:     enabled
  RTMP support:     no      (--with-librtmp)
  metalink support: no      (--with-libmetalink)
  PSL support:      no      (libpsl not found)
  HTTP2 support:    disabled (--with-nghttp2)
  Protocols:        DICT FILE FTP FTPS GOPHER HTTP HTTPS IMAP IMAPS POP3 POP3S RTSP SMB SMBS SMTP SMTPS TELNET TFTP
</code></pre>

<strong>【注意】</strong>这一步请在确定没有问题之后再往下进行

<h5>替换原有curl程序</h5>

替换之后，即可发现 curl 已经变成了 OPENSSL 模式，而非 NSS

<pre><code class="language-shell line-numbers">[root@localhost curl-curl-7_61_0]# mv /usr/bin/curl /usr/bin/curl.bak
[root@localhost curl-curl-7_61_0]# ln /usr/local/bin/curl /usr/bin/curl
[root@localhost curl-curl-7_61_0]# curl -V
curl 7.61.0-DEV (x86_64-unknown-linux-gnu) libcurl/7.61.0-DEV OpenSSL/1.0.2k zlib/1.2.7
Release-Date: [unreleased]
Protocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp 
Features: AsynchDNS IPv6 Largefile NTLM NTLM_WB SSL libz UnixSockets HTTPS-proxy
</code></pre>

<h2>重新编译php-curl插件</h2>

在 curl 变成 OPENSSL 模式之后，php-curl依旧是 NSS 模式，可以通过如下指令查证

<pre><code class="language-shell line-numbers">[root@localhost curl-curl-7_61_0]# php -r 'phpinfo();' | grep 'SSL Version'
SSL Version =&gt; NSS/3.34
</code></pre>

为了解决这个问题，我们需要手动重新编译 <code>php-curl</code>，这个步骤得在 curl 更新完成之后

<h5>下载php对应版本的源码包</h5>

7.1的源码包:<a href="http://cn2.php.net/get/php-7.1.21.tar.gz/from/this/mirror">http://cn2.php.net/get/php-7.1.21.tar.gz/from/this/mirror</a>
下载解压并进入 <code>php-7.1.21/ext/curl/</code> 目录

<pre><code class="language-shell line-numbers">[root@localhost ~]# wget http://cn2.php.net/get/php-7.1.21.tar.gz/from/this/mirror
[root@localhost ~]# mv mirror php7.1.tar.gz
[root@localhost ~]# tar -zxvf php7.1
[root@localhost ~]# cd php-7.1.21/ext/curl/
</code></pre>

<h5>使用phpize准备编译</h5>

确定文件 php-config 的位置，php-config 用于显示php的安装信息

<pre><code class="language-shell line-numbers">[root@localhost ~]# find / -name php-config
/usr/bin/php-config
</code></pre>

在 <code>/ext/curl/</code> 源目录中执行 <code>phpize --with-php-config /usr/bin/php-config</code>

<pre><code class="language-shell line-numbers">[root@localhost curl]# phpize --with-php-config /usr/bin/php-config
Configuring for:
PHP Api Version:         20160303
Zend Module Api No:      20160303
Zend Extension Api No:   320160303
</code></pre>

<h5>执行安装</h5>

<code>./configure</code> <code>make &amp;&amp; make install</code> 执行编译安装过程
<strong>【注意】</strong>需要先行安装 <code>gcc</code> <code>gcc-c++</code> <code>glibc-headers</code>，否则报错，安装指令：<code>yum install gcc gcc-c++ glibc-headers</code>

<pre><code class="line-numbers">[root@localhost curl]# ./configure 
......
configure: creating ./config.status
config.status: creating config.h
config.status: executing libtool commands
[root@localhost curl]# make &amp;&amp; make install
.....
Installing shared extensions:     /usr/lib64/php/modules/
</code></pre>

出现最后一句话说明安装成功
最后再检查下 php-curl 的模式

<pre><code class="language-shell line-numbers">[root@localhost curl]# php -r 'phpinfo();' | grep 'SSL Version'
SSL Version =&gt; OpenSSL/1.0.2k
</code></pre>

<h2>安装Swoole插件</h2>

Swoole是一个强大的异步框架，可以用于搭建各种服务，譬如 HTTP服务，WebSocket等，这里不需要我们去学习如何使用Swoole，只需要安装上就可以了。
Swoole官网：<a href="https://www.swoole.com/">https://www.swoole.com/</a>
安装教程：<a href="https://wiki.swoole.com/wiki/page/6.html">https://wiki.swoole.com/wiki/page/6.html</a>

<h4>下载并使用源码包</h4>

如果没有安装 <code>wget</code> 工具，请先 <code>yum install wget</code>

<pre><code class="language-shell line-numbers">wget https://github.com/swoole/swoole-src/archive/v4.0.4.tar.gz
tar -zxvf v4.0.4.tar.gz
cd swoole-src-4.0.4/
</code></pre>

<h5>使用phpize准备编译</h5>

在 Swoole 源目录中执行 <code>phpize --with-php-config /usr/bin/php-config</code>

<pre><code class="language-shell line-numbers">[root@localhost swoole-src-4.0.4]# phpize --with-php-config /usr/bin/php-config
Configuring for:
PHP Api Version:         20160303
Zend Module Api No:      20160303
Zend Extension Api No:   320160303
</code></pre>

<h5>执行安装</h5>

<code>./configure</code> <code>make &amp;&amp; make install</code> 执行编译安装过程

<pre><code class="language-shell line-numbers">[root@localhost swoole-src-4.0.4]# ./configure 
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for a sed that does not truncate output... /usr/bin/sed
checking for cc... cc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
[root@localhost swoole-src-4.0.4]# make &amp;&amp; make install
</code></pre>

安装完毕之后大概是这样：

<pre><code class="line-numbers">/bin/sh /root/swoole-src-4.0.4/libtool --mode=install cp ./swoole.la /root/swoole-src-4.0.4/modules
libtool: install: cp ./.libs/swoole.so /root/swoole-src-4.0.4/modules/swoole.so
libtool: install: cp ./.libs/swoole.lai /root/swoole-src-4.0.4/modules/swoole.la
libtool: finish: PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/sbin" ldconfig -n /root/swoole-src-4.0.4/modules
----------------------------------------------------------------------
Libraries have been installed in:
   /root/swoole-src-4.0.4/modules

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------

Build complete.
Don't forget to run 'make test'.

Installing shared extensions:     /usr/lib64/php/modules/
Installing header files:          /usr/include/php/
</code></pre>

<h5>检查下Swoole是否存在</h5>

<pre><code class="language-shell line-numbers">[root@localhost swoole-src-4.0.4]# ll /usr/lib64/php/modules/swoole.so 
-rwxr-xr-x. 1 root root 9228512 8月  29 19:10 /usr/lib64/php/modules/swoole.so
</code></pre>

编辑 <code>/etc/php.ini</code> 文件，添加扩展

<pre><code class="language-shell line-numbers">[root@localhost swoole-src-4.0.4]# vi /etc/php.ini
</code></pre>

找到这一段，加上 <code>extension=swoole.so</code>

<pre><code class="line-numbers">;;;;;;;;;;;;;;;;;;;;;;
; Dynamic Extensions ;
;;;;;;;;;;;;;;;;;;;;;;

; If you wish to have an extension loaded automatically, use the following
; syntax:
;
;   extension=modulename.extension
;
; For example, on Windows:
;
;   extension=msql.dll
;
; ... or under UNIX:
;
;
; ... or with a path:
;
;   extension=/path/to/extension/msql.so
;
; If you only provide the name of the extension, PHP will look for it in its
; default extension directory.
extension=swoole.so
</code></pre>

使用 <code>php -m | grep swoole</code> 检查扩展是否安装成功

<pre><code class="language-shell line-numbers">[root@localhost swoole-src-4.0.4]# php -m | grep swoole
swoole
</code></pre>

<h2>安装Redis</h2>

yum仓库里边就有，直接 yum 安装下就可以了

<pre><code class="line-numbers">[root@localhost ~]# yum install redis
</code></pre>

为了方便使用，编辑 <code>/etc/redis-config</code> 修改 <code>daemonize no</code> 为 <code>daemonize yes</code> 以守护进程的方式启动

<pre><code class="line-numbers">################################# GENERAL #####################################

# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
daemonize yes
</code></pre>

启动 redis-server 并连接测试

<pre><code class="line-numbers">[root@localhost ~]# redis-server /etc/redis.conf 
[root@localhost ~]# redis-cli 
127.0.0.1:6379&gt; set name hello
OK
127.0.0.1:6379&gt; get name
"hello"
127.0.0.1:6379&gt; exit
[root@localhost ~]# 
</code></pre>

<h2>环境搭建完毕，开始构建代码</h2>

<h5>使用 composer 安装vbot</h5>

composer 的安装不再赘述，参考官方文档：<a href="https://pkg.phpcomposer.com/#how-to-install-composer">https://pkg.phpcomposer.com/#how-to-install-composer</a>

<pre><code class="line-numbers">[root@localhost curl]# php -r "copy('https://install.phpcomposer.com/installer', 'composer-setup.php');"
[root@localhost curl]# php composer-setup.php
All settings correct for using Composer
Downloading...

Composer (version 1.6.5) successfully installed to: /root/php-7.1.21/ext/curl/composer.phar
Use it: php composer.phar

[root@localhost curl]# php -r "unlink('composer-setup.php');"
[root@localhost curl]# mv composer.phar /usr/bin/composer
[root@localhost curl]# composer -v
   ______
  / ____/___  ____ ___  ____  ____  ________  _____
 / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___/
/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /
\____/\____/_/ /_/ /_/ .___/\____/____/\___/_/
                    /_/
Composer version 1.6.5 2018-05-04 11:44:59
</code></pre>

推荐使用国内镜像，会快一些

<pre><code class="line-numbers">[root@localhost my-bot]# composer config -g repo.packagist composer https://packagist.phpcomposer.com
[root@localhost my-bot]#
</code></pre>

<h5>安装vbot</h5>

vbot是一个脚本程序，不需要跑在 LNMP 环境下，只需要 PHP + redis 就可以了。
新建一个目录 <code>my-bot</code>，然后 <code>composer require hanson/vbot</code>

<pre><code class="line-numbers">[root@localhost ~]# mkdir my-bot
[root@localhost ~]# cd my-bot/
[root@localhost my-bot]# composer require hanson/vbot
</code></pre>

可能会出现如下报错

<pre><code class="line-numbers">- illuminate/support v5.4.17 requires ext-mbstring * -&gt; the requested PHP extension mbstring is missing from your system.
    - illuminate/support v5.4.13 requires ext-mbstring * -&gt; the requested PHP extension mbstring is missing from your system.
    - illuminate/support v5.4.0 requires ext-mbstring * -&gt; the requested PHP extension mbstring is missing from your system.
    - Installation request for hanson/vbot ^2.0 -&gt; satisfiable by hanson/vbot[2.0.1, 2.0.10, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.0.9, v2.0].

  To enable extensions, verify that they are enabled in your .ini files:
    - /etc/php.ini
    - /etc/php.d/bz2.ini
    - /etc/php.d/calendar.ini
    - /etc/php.d/ctype.ini
    - /etc/php.d/curl.ini
    - /etc/php.d/exif.ini
    - /etc/php.d/fileinfo.ini
    - /etc/php.d/ftp.ini
    - /etc/php.d/gettext.ini
    - /etc/php.d/gmp.ini
    - /etc/php.d/iconv.ini
    - /etc/php.d/json.ini
    - /etc/php.d/phar.ini
    - /etc/php.d/shmop.ini
    - /etc/php.d/simplexml.ini
    - /etc/php.d/sockets.ini
    - /etc/php.d/tokenizer.ini
    - /etc/php.d/xml.ini
    - /etc/php.d/zip.ini
  You can also run `php --ini` inside terminal to see which files are used by PHP in CLI mode.

Installation failed, reverting ./composer.json to its original content.
</code></pre>

根据错误提示得知，我们需要安装 <code>php-mbstring</code> 扩展，yum 安装下即可

<pre><code class="line-numbers">[root@localhost my-bot]# yum install php71w-mbstring
</code></pre>

安装完成之后再进行 <code>composer require hanson/vbot</code> 就可以了]]></content:encoded>
		<excerpt:encoded><![CDATA[都知道微信公众号可以做客服，但是公众号却有着很多交互限制，比如不能主动给用户发送文本消息、语音、视频等，每月推送还有限制。如果使用 VBOT，就可以能做一个正常用户可以做到的事情，比如 获取天气API，如果下雨就给指定用户或群组发送消息提示带伞等功能。]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date><![CDATA[2018-10-12 09:52:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-10-12 01:52:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8vbot%e5%81%9a%e4%b8%80%e4%b8%aa%e8%87%aa%e5%8a%a8%e5%be%ae%e4%bf%a1%e5%ae%a2%e6%9c%8d%e7%b3%bb%e7%bb%9f%ef%bc%88%e4%b8%80%ef%bc%89%e7%8e%af%e5%a2%83%e3%80%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php7"><![CDATA[php7]]></category>
		<category domain="category" nicename="vbot"><![CDATA[vbot]]></category>
		<category domain="post_tag" nicename="vbot"><![CDATA[vbot]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<category domain="post_tag" nicename="%e5%be%ae%e4%bf%a1%e5%ae%a2%e6%9c%8d"><![CDATA[微信客服]]></category>
		<category domain="category" nicename="wechat"><![CDATA[微信相关]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[185]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582436455;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:250;}i:1;a:1:{s:2:"id";i:10;}i:2;a:1:{s:2:"id";i:255;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GIT工作流，如何正确的合并自己的代码到某个分支上</title>
		<link>https://blog.wj2015.com/2019/07/23/git%e5%b7%a5%e4%bd%9c%e6%b5%81%ef%bc%8c%e5%a6%82%e4%bd%95%e6%ad%a3%e7%a1%ae%e7%9a%84%e5%90%88%e5%b9%b6%e8%87%aa%e5%b7%b1%e7%9a%84%e4%bb%a3%e7%a0%81%e5%88%b0%e6%9f%90%e4%b8%aa%e5%88%86%e6%94%af/</link>
		<pubDate>Tue, 23 Jul 2019 13:48:47 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=301</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>背景</h2>

博主接触 GIT 也有一段时日了，但是来公司之前用的最多的也就 <code>git push origin master</code>, <code>git pull origin master</code> <code>git commit -m 'xxx'</code> 跟小伙伴在 master 上拉过来推过去，根本不适用于公司的多人协作开发的情况。遂写下此文，以便查阅。

<h2>需要用到的基础命令</h2>

<h3>本地仓库操作</h3>

<table>
<thead>
<tr>
  <th>命令</th>
  <th>描述</th>
  <th>示例</th>
</tr>
</thead>
<tbody>
<tr>
  <td>git init</td>
  <td>初始化仓库</td>
  <td>git init</td>
</tr>
<tr>
  <td>git add 文件</td>
  <td>将文件/目录从工作区加入到暂存区</td>
  <td>git add test.txt</td>
</tr>
<tr>
  <td>git commit -m '提交信息'</td>
  <td>本地提交暂存区的文件，并生成一个 commitId</td>
  <td>git commit -m '测试提交'</td>
</tr>
</tbody>
</table>

<h3>远程仓库操作</h3>

<table>
<thead>
<tr>
  <th>命令</th>
  <th>描述</th>
  <th>示例</th>
</tr>
</thead>
<tbody>
<tr>
  <td>git remote add 远程仓库名称 远程仓库地址</td>
  <td>添加一个远程仓库</td>
  <td>git remote add origin https://github.com/wangerzi/layui-excel.git</td>
</tr>
<tr>
  <td>git remote remove 远程仓库名称</td>
  <td>移除关联远程仓库</td>
  <td>git remote remove origin</td>
</tr>
<tr>
  <td>git pull 远程仓库名称 分支名</td>
  <td>拉取分支代码</td>
  <td>git pull origin master</td>
</tr>
<tr>
  <td>git push 远程仓库名称 分支名</td>
  <td>推送本地分支至远程</td>
  <td>git push origin task-任务1</td>
</tr>
<tr>
  <td>git checkout -b 分支名 远程仓库/远程分支</td>
  <td>新建一个本地分支，依赖某个远程分支</td>
  <td>git checkout -b task-任务1 origin/master</td>
</tr>
<tr>
  <td>git branch -u 远程仓库/远程分支</td>
  <td>更换当前本地分支跟踪的远程仓库</td>
  <td>git branch -u origin/task-任务1</td>
</tr>
</tbody>
</table>

<h2>多人合作中分支的构成</h2>

<h3>简单 master 和多个任务分支</h3>

博主所在公司前端项目就是这种形式，一个项目也许就一个人负责，master分支上维护线上最稳定的代码，并为每个任务建立各自的任务分支，同时只有一个分支的代码能够被测试，测试完毕即往master合并，下一次任务从最新的master上拉去代码。
比如这样：
<img src="https://blog.wj2015.com/wp-content/uploads/2019/07/8357c3f57badff18e9d0cb0c3302416d.png" alt="" />
建立任务分支或bugfix分支命令描述如下：
需要注意：<code>checkout -b task-任务1 origin/master</code> 切出来的分支，默认对应远程分支为 master，需要手动更改为新建的任务分支

<pre><code class="language-shell line-numbers"># 从 master 拉去最新代码并将本地分支推向远程
git checkout -b task-任务分支 origin/master
git push origin task-任务分支
git branch -u origin/task-任务分支
# 修改/新增部分代码并推送到远程
git add .
git commit -m '备注'
git push
</code></pre>

上线操作命令描述如下：

<pre><code class="language-shell line-numbers">git checkout master
git pull
git merge origin/task-任务1
git push
</code></pre>

一旦有两个人同时做一个需求，并且需要同时提测时，需要建立一个临时分支，然后把两个任务的分支同时往这个分支合并。
命令描述如下：

<pre><code class="language-shell line-numbers"># 从远程master拉取代码，合并两个任务分支
git checkout -b task-统一提测分支 origin/master
git merge origin/task-任务1
git merge origin/task-任务2
# 将合并完毕的分支推送到远程，并设置分支跟踪
git push origin task-统一提测分支
git branch -u origin/task-统一提测分支
</code></pre>

<h3>主干分支+测试分支+任务分支</h3>

公司后端用的就是这个模式，后端人数比较多，一次迭代需求可能会有多个人参与，并且后端RPC（远程过程调用）需要协助的地方比较多，会存在并行开发的情况。所以RPC协助、迭代需求等需要在一个环境同时存在并运行，所以有一个 dev(测试)环境。
在这种模式中，测服代码往往是几个任务分支合并在一起的结果，测试人员在与dev分支环境下测试代码准确性，上线时各个分支往master上合并，dev分支相对master独立，不合并到master。
工作流程命令描述如下：

<pre><code class="language-shell line-numbers"># dev 源自master
git checkout -b dev origin/master
# 从 master 拉去最新代码并将本地分支推向远程
git checkout -b task-任务分支 origin/master
git push origin task-任务分支
git branch -u origin/task-任务分支
# 修改/新增部分代码
git add .
git commit -m '备注'
git push
# 提测，合并到 dev 分支
git checkout develop
# 先拉下来dev最新代码，再推送
git pull
git merge task-任务分支
git push
# 上线 - 拥有master分支的推送权限
git checkout master
git pull master
git merge task-任务分支
git push
# 上线2 - gitlab等在线工作台提mergeRequest前需要合并master到任务分支，避免冲突
# 备注：当前分支在 task-任务分支
git checkout task-任务分支
git merge master
git push
# 接下来提交合并申请
</code></pre>

其实从项目管理的角度来看，这样的工作流容易造成一些问题，比如有两个分支并行开发，比如：task-任务1，task-任务2，任务1先开发，先上线，任务2后开发，后上线，在任务1提测一段时间后，任务2提测。
测试人员验证的是 task-任务1+task-任务2 的代码（dev分支同时合并俩任务分支），但是上线却是任务1先上，所以并不能保证task-任务1的分支一定是无误的。不过这个问题也可以从任务划分上避免掉，比如任务一的模块和文件变动范围与任务二的模块和文件变动范围没有交集

<h3>主干分支+测试分支+开发联调分支+任务分支</h3>

这种模式属于上一种模式的改进，合并到测试分支的代码一定是同一批次上线的，开发联调分支是需要做前后端联调等情况时用的。

开发流程代码描述如下：

<pre><code class="language-shell line-numbers"># 测试分支和开发源自 master
git checkout -b test origin/master
git checkout -b dev origin/master
# 新建开发分支与之前相同，不再赘述
# ... 建立开发分支 task-任务1，task-任务2，task-任务3
# task-任务1，task-任务2 同时上线，task-任务3 后上线
# 三个分支均往联调环境合并，方便联调
git checkout develop
git pull
git merge task-任务1
git merge task-任务2
git merge task-任务3
git push

# 第一种操作 - 新建提测分支
git checkout -b test-20190723-任务X提测 origin/master
git push origin test-20190723-任务X提测
git branch -u origin/test-20190723-任务X提测
# 合并任务分支
git merge task-任务1
git merge task-任务2
git push
# 合并到测试分支
git checkout test
git pull
git merge origin/test-20190723-任务X提测
git push
# 测完上线
git checkout master
git pull
git merge origin/test-20190723-任务X提测

# 第二种操作 - 直接测试分支合并俩任务分支，上线时也合并俩任务分支，不再赘述
git checkout test
git pull
git merge task-任务1
git merge task-任务2
git push
</code></pre>

<h3>git flow 工作流</h3>

这种模式网上资料很多，比如这篇文章 <a href="https://www.cnblogs.com/wish123/p/9785101.html">https://www.cnblogs.com/wish123/p/9785101.html</a> ，写的十分详细
在这种模式中，每一次上线都有一个 <code>release</code> 分支，每个 <code>release</code> 分支就相当于一次发版，每次 <code>master</code> 分支上的提交都需要打 tag 用于标记版本号，分支作用如下表：

<blockquote>
  这里有个名词叫 release 分支，就是即将上线的分支，测试的目的是保证这个分支的代码功能正确，如果测试过程中遇到bug直接在 release 分支上修改即可，测试没有问题将次分支合并到 master
</blockquote>

<table>
<thead>
<tr>
  <th>分支名称</th>
  <th>作用</th>
</tr>
</thead>
<tbody>
<tr>
  <td>master</td>
  <td>主干分支，每个Commit都应该打Tag</td>
</tr>
<tr>
  <td>feature</td>
  <td>任务分支，用于任务开发，开发完毕应该合并到 develop（没写完就不要合进去了，不然影响release，合并完建议删除）</td>
</tr>
<tr>
  <td>develop</td>
  <td>开发分支，各个任务分支都往这上边合并</td>
</tr>
<tr>
  <td>release-vxxx</td>
  <td>可以理解为发版分支，基于 develop ，一定周期内的开发任务统一在一个release中测试，测试中出现的BUG直接commit在release分支中，测试完毕后提交到master</td>
</tr>
<tr>
  <td>hotfix</td>
  <td>热修复分支，一般用于处理紧急BUG，开发完毕后合并到 develop 以及 master，master上打TAG</td>
</tr>
</tbody>
</table>

<h2>总结</h2>

上述模式可能也仅仅适合体量中小的公司，开发、测试等资源均比较有限，如此结构沟通成本和操作成本会更低一点。更大规模的软件开发协作，git工作流会更加的规范化与流程化，博主还未接触研究，诸君共勉。]]></content:encoded>
		<excerpt:encoded><![CDATA[介绍工作中使用git多人协作的常用命令以及各种开发方式下各个分支构成和作用]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date><![CDATA[2019-07-23 21:48:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-23 13:48:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[git%e5%b7%a5%e4%bd%9c%e6%b5%81%ef%bc%8c%e5%a6%82%e4%bd%95%e6%ad%a3%e7%a1%ae%e7%9a%84%e5%90%88%e5%b9%b6%e8%87%aa%e5%b7%b1%e7%9a%84%e4%bb%a3%e7%a0%81%e5%88%b0%e6%9f%90%e4%b8%aa%e5%88%86%e6%94%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<category domain="post_tag" nicename="%e5%a4%9a%e4%ba%ba%e5%8d%8f%e4%bd%9c"><![CDATA[多人协作]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[988]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[376]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[364]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582334961;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:69;}i:1;a:1:{s:2:"id";i:360;}i:2;a:1:{s:2:"id";i:432;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>YUM报错，Error: xz compression not available</title>
		<link>https://blog.wj2015.com/2018/11/09/yum%e6%8a%a5%e9%94%99%ef%bc%8cerror-xz-compression-not-available/</link>
		<pubDate>Fri, 09 Nov 2018 04:05:09 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>遇到的问题</h2>

博主的服务器版本是 Centos6.8，今天想更新以下PHP版本，然后去安装最新的 <code>webstatic</code>，于是找到如下两条命令

<pre><code class="language-shell line-numbers">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm  
rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
</code></pre>

没有仔细看安装的RPM地址，然后就执行了，安装过程倒是没有报错，不过当我在执行 <code>yum search</code>、 <code>yum install</code> 的时候问题就出来了

<pre><code class="language-shell line-numbers">[root@JeffreyWang nextcloud]# yum search php72w
Loaded plugins: fastestmirror, security
Repository epel is listed more than once in the configuration
Loading mirror speeds from cached hostfile
 * webtatic: sp.repo.webtatic.com
**Error: xz compression not available**
</code></pre>

报错，<strong>Error: xz compression not available</strong>

<h2>修复问题</h2>

<h3>问题出现原因</h3>

YUM源版本不符

<h3>解决思路</h3>

<ul>
<li>将错误的源删掉</li>
<li>删除yum缓存和webstatic缓存，否则问题还会出现</li>
<li>安装正确的yum源</li>
</ul>

所以，执行如下命令：

<pre><code class="language-shell line-numbers"># 删除错误源
[root@JeffreyWang nextcloud]# yum remove epel-release
Loaded plugins: fastestmirror, security
Setting up Remove Process
Resolving Dependencies
There are unfinished transactions remaining. You might consider running yum-complete-transaction first to finish them.
--&gt; Running transaction check
---&gt; Package epel-release.noarch 0:7-11 will be erased
--&gt; Processing Dependency: epel-release &gt;= 7 for package: webtatic-release-7-3.noarch
--&gt; Running transaction check
---&gt; Package webtatic-release.noarch 0:7-3 will be erased

--&gt; Finished Dependency Resolution
# 删除缓存，注意：与 epel7 相关的缓存均需要删除，比如我这里安装的 webstatic，否则报错依旧
[root@JeffreyWang nextcloud]# rm -rf /var/cache/yum/x86_64/6/epel/
[root@JeffreyWang nextcloud]# rm -rf /var/cache/yum/x86_64/6/webtatic/*
# 安装对应系统的最新 epel
[root@JeffreyWang nextcloud]# rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm
</code></pre>

<h2>总结</h2>

网上博客里边的指令不要随意跑！！！]]></content:encoded>
		<excerpt:encoded><![CDATA[如果不小心安装了不兼容的YUM源，比如 Centos6 安装了 Centos7 的 epel 或者 webstatic，就会报如下错误：Error: xz compression not available，本文介绍了如何解决这个问题。]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date><![CDATA[2018-11-09 12:05:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-09 04:05:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[yum%e6%8a%a5%e9%94%99%ef%bc%8cerror-xz-compression-not-available]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="yum"><![CDATA[yum]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[306]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[209]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581714144;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:287;}i:1;a:1:{s:2:"id";i:152;}i:2;a:1:{s:2:"id";i:255;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JS中Function.apply() 的骚操作</title>
		<link>https://blog.wj2015.com/2018/11/20/js%e4%b8%adfunction-apply-%e7%9a%84%e9%aa%9a%e6%93%8d%e4%bd%9c/</link>
		<pubDate>Tue, 20 Nov 2018 12:50:02 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>基本介绍</h2>

<h3>Function.apply()是什么</h3>

apply() 方法是 JS中所有函数默认都有的方法，IE5+支持，如果需要 IE5 的支持的话，可以参考博客 <a href="https://www.jb51.net/article/44151.htm">https://www.jb51.net/article/44151.htm</a>

都知道，在JS中可以通过 <code>this</code> 关键字获取当前执行环境，比如：

<pre><code class="language-javascript line-numbers">var obj = {
    name: 'Wang',
    init: function(){
        this.name = 'Jeffrey';
    }
};
obj.init()
console.log(obj.name);// 输出Jeffrey
</code></pre>

而 <code>apply</code> 就可以改变这个上下文环境，比如下边这个例子就是将 obj1 的执行环境变成了 obj2 的执行环境，执行 obj1 的 <code>init</code> 之后，却将 obj2 的属性改变了。

<pre><code class="language-javascript line-numbers">var obj = {
    name: 'Wang',
    init: function(name){
        this.name = name;
    }
};
var obj2 = {}；
obj.init.apply(obj2, ['Test'])
console.log(obj2.name);// 输出 Test
</code></pre>

<code>apply()</code> 有两个参数，第一个参数是上下文环境的对象，第二个参数是函数列表，支持数组形式传递

<h3>apply()和call()的区别</h3>

<code>call()</code> 方法也可以改变函数执行的上下文环境，但是与 <code>apply()</code> 有一定的区别，注意看以下代码：

<pre><code class="language-javascript line-numbers">var obj = {
    name: 'Wang',
    desc: '',
    init: function(name, desc){
        this.name = name;
        this.desc = desc;
    }
};
var obj2 = {}；
obj.init.apply(obj2, ['Test', 'Hello World'])
console.log(obj2.name);// 输出 Test
console.log(obj2.desc);// 输出 Hello World
obj.init.call(obj2, 'Test2', 'Hello World!')
console.log(obj2.name);// 输出 Test2
console.log(obj2.desc);// 输出 Hello World!
</code></pre>

<blockquote>
  apply 传递参数的方式是数组，call 传递参数的方式是函数列表
</blockquote>

<h3>所谓骚操作</h3>

骚操作，，就是一般想不到，然后偶尔打代码的时候突然灵光一闪，一些骚操作就能达到 简化代码，增加效率等功效。

<h5>骚操作：数组合并</h5>

假设现在有『数组A』(1, 2)，还有『数组B』(3, 4, 5)，我们希望把 『数组B』 的数据追加到 『数组A』中，了解<code>contact</code> 函数的童鞋，可能会写出这样的代码：

<pre><code class="language-javascript line-numbers">var A = [1, 2];
var B = [3, 4, 5];

A = A.contact(B);
console.log(A);// 输出 1,2,3,4,5
</code></pre>

原理是，contact函数能够连接多个数组，在<strong>不改变原有数组的前提</strong>下，将所有列表合并在一起作为返回值返回到调用方。

所以，在这个过程中，会出现一个临时『数组C』，拥有 A+B的长度，对于只想合并 AB 数组的需求来说，是一种内存浪费。

所以，有如下骚操作：

<pre><code class="language-javascript line-numbers">var A = [1, 2];
var B = [3, 4, 5];

A.push.apply(A, B);
console.log(A);// 输出 1,2,3,4,5
</code></pre>

<strong>解析：</strong>

调用A数组的 <code>push</code> 函数的 <code>apply</code> 函数，将上下文环境设为『数组A』，参数列表设为 『数组B』，由于 <code>push</code> 方法支持如下调用： <code>puth(item1, item2, item3)</code>，所以就将数组参数转换为参数列表，从而实现数组合并。并且，<strong>支持IE5+</strong>

相同的调用原理还可以用于 <code>unshift</code> ，合并 AB 数组并将 B 数组的数据放在前边。

<h5>骚操作：求数组中的最大最小值</h5>

JS中提供了 <code>min()</code> 和 <code>max()</code>，他们都支持一个特点：『动态参数』，意思是传入 <code>min(1,2,3)</code> 会返回1，传入 <code>max(1,2,3,4,5)</code> 会返回5。

所以衍生了如下操作：

<pre><code class="language-javascript line-numbers">var A = [1, 2, 3];
var B = [1, 2, 3, 4, 5];

var ans1 = min.apply(null, A);
var ans2 = max.apply(null, B);
console.log(ans1, ans2);// 输出 1 5
</code></pre>

<h3>总结</h3>

<code>apply</code> 和 <code>call</code> 均可以改变上下文执行环境，<code>apply</code> 可以动态传入数组参数， <code>call</code> 可以按照正常调用函数的方式执行函数，各有特点， <code>apply</code> 配合数组、对象还可以巧妙的玩出各种骚操作，增加效率和乐趣！]]></content:encoded>
		<excerpt:encoded><![CDATA[apply 和 call 均可以改变上下文执行环境，apply 可以动态传入数组参数， call 可以按照正常调用函数的方式执行函数，各有特点， apply 配合数组、对象还可以巧妙的玩出各种骚操作，增加效率和乐趣！]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date><![CDATA[2018-11-20 20:50:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-20 12:50:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[js%e4%b8%adfunction-apply-%e7%9a%84%e9%aa%9a%e6%93%8d%e4%bd%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apply"><![CDATA[apply]]></category>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<category domain="category" nicename="web-front"><![CDATA[前端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[315]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[390]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[103]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581693579;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:410;}i:1;a:1:{s:2:"id";i:321;}i:2;a:1:{s:2:"id";i:69;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP中array_map()、array_walk()的使用总结</title>
		<link>https://blog.wj2015.com/2018/12/07/php%e4%b8%adarray_map%e3%80%81array_walk%e7%9a%84%e4%bd%bf%e7%94%a8%e6%80%bb%e7%bb%93/</link>
		<pubDate>Fri, 07 Dec 2018 02:10:19 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=321</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h1>一句话描述</h1>

array_map() 把数组每个元素都执行一下回调函数，回调函数的返回值作为数组对应key的新值
array_walk() 将数组每个元素都调用一下回调函数，回调函数返回值仅控制是否继续执行

<h1>参数描述</h1>

array array_map ( callable $callback , array $array1 [, array $... ] )
<strong>【解析】</strong> array_map 传入无限个参数，第一个参数是回调函数，第二个及以后的参数是作用的目标数组
bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )
<strong>【解析】</strong> array_walk 传入三个参数，第一个参数是作用的目标数组，第二个参数是回调函数，第三个参数比较少用，可以传入用户自定义的数据

<h1>用途</h1>

<code>array_map()</code> 可以用于遍历数组元素，并生成一个新的数组；<code>array_walk()</code> 会将回调函数直接作用于每个数组元素上；
但是两者在使用上是有一定的区别存在的，然后借用 linus 一句名言：<code>talk is cheap, show me your code!</code>，请上代码！

<h4>背景</h4>

假设我们有一组学生数据如下，接下来的演示操作将基于此数据

<pre><code class="language-php line-numbers">&lt;?php
    $students = array(
        array('name' =&gt; '张三', 'age' =&gt; 21),
        array('name' =&gt; '赵四', 'age' =&gt; 22),
        array('name' =&gt; '王五', 'age' =&gt; 21)
    );
    $prefix = array(
        '尼古拉丁',
        '尼古拉斯',
        '史上最帅',
    );
    $score = array(
        9,
        8,
        10,
    );
</code></pre>

<h5>需求1：将所有学生的分数 * 10</h5>

<strong>使用特性：</strong> 遍历单个数组
解法1：经典 <code>foreach</code>
<strong>【解析】</strong> <code>$value</code> 使用引用的方式传递，可以直接修改数组的值

<pre><code class="language-php line-numbers">&lt;?php
    foreach ($students as &amp;$value) {
        $value['score'] *= 10;
    }
    print_r($students);
</code></pre>

解法2：<code>array_map</code> 迭代
<strong>【解析】</strong> 如果第二个参数往后只有一个数组，则会遍历此数组，并将数组的值作为回调函数的第一个参数传递进去(注意：只有值会被传递进去)，然后保持原数组的key不变，回调函数对应的返回值为新的value组成新数组并返回。

<pre><code class="language-php line-numbers">&lt;?php
    $students = array_map(function($value) {
        $value['score'] *= 10;
        return $value;
    }, $students);
    print_r($students);
</code></pre>

解法2：<code>array_walk</code> 迭代
<strong>【解析】</strong> 第一个参数传入目标数组，第二个参数传入一个回调函数，第三个参数传入一个用户自定义的值，比如这里需要 * 10，我们就可以把这个数字作为第三个参数传递进去。

迭代时，会将数组的 value key 作为回调函数的 第一个参数和第二个参数，userdata 作为第三个参数传入（注意：如果需要改变数组的数据，第一个参数请使用引用传递）

<pre><code class="language-php line-numbers">&lt;?php
    array_walk($students, function(&amp;$value, $key, $userdata) {
        $value['score'] *= $userdata;
    }, 10);
    print_r($students);
</code></pre>

<strong>结果均为：</strong>

<pre><code class="language-php line-numbers">Array
(
    [0] =&gt; Array
        (
            [name] =&gt; 张三
            [age] =&gt; 21
            [score] =&gt; 90
        )

    [1] =&gt; Array
        (
            [name] =&gt; 赵四
            [age] =&gt; 22
            [score] =&gt; 80
        )

    [2] =&gt; Array
        (
            [name] =&gt; 王五
            [age] =&gt; 21
            [score] =&gt; 100
        )

)
</code></pre>

<h5>需求2：将头衔 $prefx 拼接在 name 属性前</h5>

<strong>使用特性：</strong> 第三方数据传入
解法1：经典 <code>foreach</code>
<strong>【解析】</strong> <code>$value</code> 使用引用的方式传递，可以直接修改数组的值

<pre><code class="language-php line-numbers">&lt;?php
    foreach ($students as $key =&gt; &amp;$value) {
        $value['name'] = $prefix[$key].'·'.$value['name'];
    }
</code></pre>

解法2：array_map 匿名函数使用 use 传入三方参数，并使用 array_map 多数组参数的特性
<strong>【解析】</strong> <code>array_map</code> 可以接受多个数组，并将多个数组的值依次作为回调函数的 第一个、第二个……参数传入，由于传入单数组不会回调数组的key，所以需要使用 array_keys($students) 提取数组的键作为回调的第二个参数。

<pre><code class="language-php line-numbers">&lt;?php
    $students = array_map(function ($value, $key) use ($prefix) {
        $value['name'] = $prefix[$key].'·'.$value['name'];
        return $value;
    }, $students, array_keys($students));
</code></pre>

解法3: array_walk 第三个参数传入第三方参数
<strong>【解析】</strong> 与 foreach 的写法类似，不过变成了函数迭代的形式

<pre><code class="language-php line-numbers">&lt;?php
    array_walk($students, function(&amp;$value, $key, $userdata) {
        $value['name'] = $userdata[$key].'·'.$value['name'];
    }, $prefix);
</code></pre>

<strong>结果均为：</strong>

<pre><code class="language-php line-numbers">Array
(
    [0] =&gt; Array
        (
            [name] =&gt; 尼古拉丁·张三
            [age] =&gt; 21
        )

    [1] =&gt; Array
        (
            [name] =&gt; 尼古拉斯·赵四
            [age] =&gt; 22
        )

    [2] =&gt; Array
        (
            [name] =&gt; 史上最帅·王五
            [age] =&gt; 21
        )

)
</code></pre>

<h5>需求3：将头衔 $prefix 和 $score 还有 $students 中的 name 组成新的数组</h5>

<strong>使用特性：</strong> array_map 的多数组参数
<strong>使用场景：</strong> 一般用于组合多个相同长度数组的元素，并形成有关联关系的数组
解法：使用 array_map 的多数组参数可以很方便的组合多个数组

<pre><code class="language-php line-numbers">&lt;?php
    $new_arr = array_map(function($val1, $val2, $val3){
        return [
            'prefix' =&gt; $val1,
            'score' =&gt; $val2,
            'name' =&gt; $val3['name'],
        ];
    }, $prefix, $score, $students);
    print_r($new_arr);
</code></pre>

<strong>输出结果：</strong>

<pre><code class="language-php line-numbers">Array
(
    [0] =&gt; Array
        (
            [prefix] =&gt; 尼古拉丁
            [score] =&gt; 9
            [name] =&gt; 张三
        )

    [1] =&gt; Array
        (
            [prefix] =&gt; 尼古拉斯
            [score] =&gt; 8
            [name] =&gt; 赵四
        )

    [2] =&gt; Array
        (
            [prefix] =&gt; 史上最帅
            [score] =&gt; 10
            [name] =&gt; 王五
        )

)
</code></pre>

<strong>【注】</strong>foreach 或者 array_walk 均可以实现这个效果，可以自行探索下

<h4>回调函数传入普通方法或者对象的方法</h4>

callback 参数除了可以传入 「匿名函数」 之外，还可以传入 普通方法、实例化的对象方法、类的静态方法等

<h5>回调普通方法</h5>

<pre><code class="language-php line-numbers">function addVal($value) {
    return $value + 10;
}
$arr = array(1, 2, 3, 4);
$arr = array_map('addVal', $arr);
print_r($arr);
</code></pre>

<h5>回调对象的某个方法</h5>

<pre><code class="language-php line-numbers">class Example {
    public function addVal($val) {
        return $val + 10;
    }
}
$exampleObj = new Example();
$arr = array(1, 2, 3, 4);
$arr = array_map(array($exampleObj, 'addVal'), $arr);
print_r($arr);
</code></pre>

<h5>回调类的静态方法</h5>

<pre><code class="language-php line-numbers">class Example {
    public static function addVal($val) {
        return $val + 10;
    }
}
$arr = array(1, 2, 3, 4);
$arr = array_map(array('Example', 'addVal'), $arr);
print_r($arr);
</code></pre>

<strong>输出结果</strong>

<pre><code class="language-php line-numbers">Array
(
    [0] =&gt; 11
    [1] =&gt; 12
    [2] =&gt; 13
    [3] =&gt; 14
)
</code></pre>

<h4>速度和选择</h4>

参考网上的各种测试，三种方法里边，<code>foreach</code> 的速度最快，其次是 <code>array_map</code>，最后是 <code>array_walk</code>，但是 <code>array_walk</code> 写起来会灵活一些，特别是第三个参数 <code>userdata</code>，可以很方便的传入第三方数据，而不用想办法通过 全局变量、 function use 等方式传入三方参数。
因为 array_map 和 array_walk 均支持传入函数处理，所以在代码复用性上会有一定的优势。]]></content:encoded>
		<excerpt:encoded><![CDATA[除了 foreach() 之外，PHP还提供了其他遍历数组的方法，比如文中的 array_map、array_walk 等，但是在使用、效率和复用性上均有差别！]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date><![CDATA[2018-12-07 10:10:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-07 02:10:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e4%b8%adarray_map%e3%80%81array_walk%e7%9a%84%e4%bd%bf%e7%94%a8%e6%80%bb%e7%bb%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="array"><![CDATA[array]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<category domain="post_tag" nicename="%e8%bf%ad%e4%bb%a3%e5%99%a8"><![CDATA[迭代器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[325]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[193]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[301]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1580793545;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:69;}i:1;a:1:{s:2:"id";i:410;}i:2;a:1:{s:2:"id";i:276;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>数据库索引总结</title>
		<link>https://blog.wj2015.com/2019/03/22/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%b4%a2%e5%bc%95%e6%80%bb%e7%bb%93/</link>
		<pubDate>Fri, 22 Mar 2019 13:23:14 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=354</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>写在前面</h2>

此文部分文字图片来自公众号『架构师之路』，“数据库索引，到底是什么做的？”读了感觉很有帮助，特此记录，原文链接：<a href="https://mp.weixin.qq.com/s/larV76LMe_JXb7dz-LvNTg">https://mp.weixin.qq.com/s/larV76LMe_JXb7dz-LvNTg</a>

<h2>数据库为什么需要设计索引？</h2>

举一个通俗的例子，比如我们想在字典上查“赟”这个字的读音，那么我们先把“赟”这个字拆解出<strong>偏旁部首</strong>，然后根据字典的目录查到这个字<strong>位于字典的666页</strong>，然后我们快速的翻到666页找到这个字读yun(一声)，这里的<strong>目录就相当于索引，可以帮助我们快速找到某个字对应在字典中的页数</strong>
类比传统的关系数据库，其通过二维表描述一个实体，我们经常通过列的筛选条件去找到对应的行，比如有一张规模为1000W用户数据表，需要查找年龄大于22 的所有用户。

<pre><code class="language-sql line-numbers">select * from user where age &gt; 22;
</code></pre>

如果没有索引一条一条查，得查1000W次（全表扫描），但是如果我们有 <code>age</code> 字段的有序目录，就可以很快的根据目录找到对应的用户列了。

<h2>索引结构为什么是树形的？</h2>

学过数据结构的我们应该知道，加速查找常见的数据结构有两类：
<strong>1) 哈希</strong>，如HashMap，查询/插入/修改/删除的平均时间复杂度都是O(1)
<strong>2) 树</strong>，如平衡二叉树，查询/插入/修改/删除的平均时间复杂度都是O(lg(n))

<em>注意：MYSQL 的 innodb 引擎不支持 HASH 索引</em>

<strong>HASH索引适合单行查找（不涉及范围）</strong>，比如登录时的通过 <code>name</code> 找用户信息，会把 name 算一下HASH，并直接在索引的HASHMAP中找到对应的行即可。

<pre><code class="language-sql line-numbers">select * from user where name = 'zhangsan';
</code></pre>

<strong>有序的树形索引，在处理排序、分组、比较时依旧能保持 O(log(N))的效率</strong>，而哈希型的索引则会退化为O(N)

<pre><code class="language-sql line-numbers">select * from user where age &gt; 22;
</code></pre>

<strong>批注：数据表的删除会导致索引树的重建，影响删除效率</strong>

<h2>为什么使用B+索引</h2>

常见的树有如下几种：

<h3>1) 二叉搜索树</h3>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/03/d7e7200f8a13f508f59015104d9830d6.png" alt="" />

<h5>特性：</h5>

<ol>
<li>所有节点都存储一个数据</li>
<li>节点左侧的值比当前节点的值小，右侧比当前节点的值大</li>
</ol>

<h5>问题：</h5>

<ol>
<li>数据量大的时候，树的高度比较高，查询较慢</li>
<li>一个节点存储一个记录，导致一次查询可能会有很多次磁盘IO</li>
</ol>

<h3>2) B树</h3>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/03/1e1f46d5d6490c9f3556a8e1de8a53e6.png" alt="" />

<h5>特性：</h5>

<ol>
<li>M叉搜索，除根节点外，最靠左的的指针域中指向小于最靠左数据域的值，中间的指针域指向大于左侧数据域并小于右侧数据域的节点，右侧的指针域指向大于右侧数据域的节点</li>
<li>所有节点都存储数据</li>
<li>中序遍历可以获取所有的节点</li>
</ol>

<h3>3)B+树</h3>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/03/d99793ab0324affa14fd5050d88fe9b5.png" alt="" />

<h5>特性：</h5>

<ol>
<li>非叶子节点不存储数据，索引更小更适合内存存储，叶子节点存储的数据更紧密适合硬盘存储</li>
<li>范围查找更有优势，定位左右节点之后，中间的节点即为结果</li>
<li>非叶子节点不存储数据只存储索引，相同内存情况B+树能存更多索引</li>
</ol>

<h3>能够作为索引的结构的判断依据</h3>

<h4>1）存储器特性</h4>

内存读写比磁盘读写快很多

<h4>2) 磁盘预读取</h4>

每次读取磁盘是一页一页的读取，通常一页的数据量是4K

<h4>3) 局部性原理</h4>

尽量准许“数据读取集中”、“使用到一个数据，大概率会使用其附近数据”提高磁盘IO

<h3>总结</h3>

索引在实际数据库操作中，可能只是 <code>INDEX(age)</code> 之类的一句话，但是提速的效果确实很惊人的，一个高度为3的索引树即可索引5亿数据，不过索引也要用对地方，因为MYSQL 如果判断出用索引还不如全表搜索的话，就会退化为全表。]]></content:encoded>
		<excerpt:encoded><![CDATA[索引在实际数据库操作中，可能只是 `INDEX(age)` 之类的一句话，但是提速的效果确实很惊人的，一个高度为3的索引树即可索引5亿数据，不过索引也要用对地方，因为MYSQL 如果判断出用索引还不如全表搜索的话，就会退化为全表。]]></excerpt:encoded>
		<wp:post_id>354</wp:post_id>
		<wp:post_date><![CDATA[2019-03-22 21:23:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-22 13:23:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b0%e6%8d%ae%e5%ba%93%e7%b4%a2%e5%bc%95%e6%80%bb%e7%bb%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="b-tree"><![CDATA[B+ tree]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="category" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="%e7%b4%a2%e5%bc%95"><![CDATA[索引]]></category>
		<category domain="post_tag" nicename="%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86"><![CDATA[索引原理]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[358]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[120]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[396]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582033063;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:174;}i:1;a:1:{s:2:"id";i:10;}i:2;a:1:{s:2:"id";i:461;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>令最新JS-XLSX支持样式的改造方法</title>
		<link>https://blog.wj2015.com/2019/05/01/js-xlsx%e6%94%af%e6%8c%81%e6%a0%b7%e5%bc%8f/</link>
		<pubDate>Wed, 01 May 2019 07:19:24 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=360</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>背景</h2>

最近五一小长假，统一处理下之前开源的 <a href="https://github.com/wangerzi/layui-excel">Layui导出插件 lay-excel</a> 反馈的部分问题，这个插件核心使用的是经过改造的 protobi/js-xlsx，支持设置样式但是不支持诸如 导出文件压缩、边距设置等功能，还存在很多BUG，效率也不高。
为解决这些问题，博主开始着手改造最新 JS-XLSX 让其支持样式设置，断点调试再加上代码对比，最后改造成功。

改造完毕的 xlsx.js 在此，可自行引入：
<a href="https://github.com/wangerzi/layui-excel/blob/master/src/xlsx.js">https://github.com/wangerzi/layui-excel/blob/master/src/xlsx.js</a>
记得配合 jszip.js 使用，否则报错：
<a href="https://github.com/wangerzi/layui-excel/blob/master/src/jszip.js">https://github.com/wangerzi/layui-excel/blob/master/src/jszip.js</a>

<h2>开始前的准备</h2>

<blockquote>
  SheetJs/js-xlsx是目前依旧维护的最新版本，protobi/js-xlsx 是大约两年前的支持设置样式的版本，很多比较实用的功能都没有。
</blockquote>

<table>
<thead>
<tr>
  <th>开源项目名称</th>
  <th>地址</th>
  <th>用于</th>
</tr>
</thead>
<tbody>
<tr>
  <td><a href="https://github.com/SheetJS/js-xlsx">SheetJS / js-xlsx</a></td>
  <td><a href="https://github.com/SheetJS/js-xlsx">https://github.com/SheetJS/js-xlsx</a></td>
  <td>导出的基础逻辑</td>
</tr>
<tr>
  <td><a href="https://github.com/protobi/js-xlsx">protobi / js-xlsx</a></td>
  <td><a href="https://github.com/protobi/js-xlsx">https://github.com/protobi/js-xlsx</a></td>
  <td>可以设置样式，用于补全样式功能</td>
</tr>
</tbody>
</table>

<h2>改造思路</h2>

博主做了个插件预览放在了服务器上，如果想了解具体的改造原理，可以跟着思路在 <a href="http://excel.wj2015.com">http://excel.wj2015.com</a> 上自行调试一下

<h3>断点调试，找有关样式设置的代码</h3>

<ul>
<li>点击批量设置样式按钮，在调用行处打断点</li>
</ul>

<pre><code class="language-javascript line-numbers">var wbout = XLSX.write(wb, {bookType: type, type: 'binary', cellStyles: true});
</code></pre>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/05/59cb58df4b8239af744e7dedb4c202dd.png" alt="" />

<ul>
<li>发现xlsx导出进入了此函数</li>
</ul>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/05/0d060dd000f14d4248d9a0b690d158dc.png" alt="" />

<ul>
<li>进一步调试，发现了差异</li>
</ul>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/05/ec1dbef1c7bb6294902479f9476f6dad.png" alt="" />

<h4>根据支持样式的版本，补全缺失代码</h4>

<ul>
<li>补全样式代码</li>
</ul>

<blockquote>
  进入最新版<a href="https://github.com/SheetJS/js-xlsx/blob/master/dist/xlsx.js">https://github.com/SheetJS/js-xlsx/blob/master/dist/xlsx.js</a>，搜索 <code>StyleBuilder</code> 发现没有这个类，但是在 <a href="https://github.com/protobi/js-xlsx/blob/master/dist/xlsx.js">https://github.com/protobi/js-xlsx/blob/master/dist/xlsx.js</a> 发现了这个类，与其依赖一起复制过来
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/05/53ca8f3c054d618a5c642f00b64d2a70.png" alt="" />

<ul>
<li>复制到目标文件暴露全局变量之前</li>
</ul>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/05/9d9e1b38659099dbf158141ef8946282.png" alt="" />

<ul>
<li>查找 <code>style_builder</code> 这个变量在 <code>protobi/js-xlsx</code> 中有哪些地方使用到了，依次复制到 <code>SheetJS/protobi</code> 中</li>
</ul>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/05/a236429e076ed4b49cdaf83b0a9917eb.png" alt="" />
<img src="https://blog.wj2015.com/wp-content/uploads/2019/05/19a56922a11ed2b160636e0a739abb6e.png" alt="" />
PS:几年过去了，这里的逻辑基本没变，所以放心复制好了

<ul>
<li>最后，测试一下导出，发现可以设置样式了</li>
</ul>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/05/31876adf7ddaf845e9a6be32dcb9cd4f.png" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[SheetJs/js-xlsx是目前依旧维护的稳定版本，protobi/js-xlsx 是大约两年前的支持设置样式的版本，很多比较实用的功能都没有。博主希望将 protobi/js-xlsx 样式设置的功能添加到 SheetJs/js-xlsx 的最新代码中。]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date><![CDATA[2019-05-01 15:19:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-01 07:19:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[js-xlsx%e6%94%af%e6%8c%81%e6%a0%b7%e5%bc%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="excel"><![CDATA[excel]]></category>
		<category domain="post_tag" nicename="js-xlsx"><![CDATA[js-xlsx]]></category>
		<category domain="post_tag" nicename="style"><![CDATA[style]]></category>
		<category domain="category" nicename="web-front"><![CDATA[前端开发]]></category>
		<category domain="post_tag" nicename="%e5%af%bc%e5%87%ba%e6%a0%b7%e5%bc%8f"><![CDATA[导出样式]]></category>
		<category domain="post_tag" nicename="%e6%94%b9%e9%80%a0"><![CDATA[改造]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[363]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[916]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[6669]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582386664;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:301;}i:1;a:1:{s:2:"id";i:442;}i:2;a:1:{s:2:"id";i:69;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>565</wp:comment_id>
			<wp:comment_author><![CDATA[xu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jellmc2@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.111.214.108]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-11-25 12:29:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-11-25 04:29:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[搞了好久都没弄好。幸运的是搜到了您的文章，解决了我的问题，非常感谢。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1606278563]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1606278563.976402;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608529049.790522;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>655</wp:comment_id>
			<wp:comment_author><![CDATA[Jie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[admin@wj2015.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.164.179.72]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-12-21 13:38:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-12-21 05:38:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[还有效就好，毕竟这篇文章也比较久了~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>565</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1608529109]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1608529109.337827;s:5:"event";s:11:"check-error";s:4:"user";s:3:"Jie";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1520</wp:comment_id>
			<wp:comment_author><![CDATA[stephen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1770024423@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[113.67.228.215]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-12-22 15:22:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-12-22 07:22:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[貌似只要修改一个单元格的样式,其余所有单元格的样式就会一起被改掉成相同的样式, 你们没有这样的问题么]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>565</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1640157767]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1640157767.109015;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1649558046.794908;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1554</wp:comment_id>
			<wp:comment_author><![CDATA[HNER]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1484287873@QQ.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[112.66.227.196]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-08 16:31:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-08 08:31:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[感谢您~~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1641630664]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1641630664.559234;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1649558040.056752;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>phpunit单元测试基础汇总</title>
		<link>https://blog.wj2015.com/2019/07/31/php%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95%e5%9f%ba%e7%a1%80%e6%b1%87%e6%80%bb/</link>
		<pubDate>Wed, 31 Jul 2019 07:17:03 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=379</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>什么是单元测试</h2>

<blockquote>
  单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。
</blockquote>

在php里边，最小单元可以指一个函数、或者类，需要验证的就是每个函数，每个类的功能与我们预想的一致。

<h2>单元测试有什么意义</h2>

<ul>
<li>可以<strong>减少一些细节错误的发生</strong>，比如应该报错的情况没有报错，入参、结果是否与需求对应上等。</li>
<li><strong>便于日后修改维护</strong>，实际工作中存在不少情况是做出了一版功能，但是上线后需要对里边的细节进行调整，有单元测试的话改起来会更加放心，并且完善单元测试的过程也是进一步理解需求的过程。</li>
<li>更容易<strong>发现平时无法走到的异常分支</strong>，而这个分支的处理逻辑可能人工测试需要经历很多步骤才能走到，省时间</li>
</ul>

最近在工作中也尝试着为开发中的功能写单元测试，切实意识到了单元测试的好处，需求里边有一个比较复杂的时间推算逻辑，最开始自认为各种情况考虑周全然后劈里啪啦写完，不过运行了事先写好的单元测试之后，依旧发现了几个隐藏比较深问题（<strong>再自信也得过一遍测试啊</strong>）。
修复问题后提测的过程中遇到了需求变更，不少关键代码需要改动，正常这种情况自测的话会很费劲，因为需要数据库找各种各样情况的数据去跑接口，然后数据对不上改完还得重新跑接口自测。但是这次先把单元测试规定正确后，放心大胆的按照自己的想法改造代码，经历了 改代码 > 跑测试 > 改代码 > 跑测试的循环后，快速交付了需求。

<h2>单元测试的一些概念</h2>

之前也接触过php、python、JS之类的语言，对这些语言的单元测试也有一定了解，下边先看一下单元测试中通用的一些概念。

<h3>断言</h3>

想要更加细致的了解断言的话，这里推荐一篇博客：<a href="https://www.jianshu.com/p/9b8c88deed6a">https://www.jianshu.com/p/9b8c88deed6a</a>
在软件测试特别是在单元测试时,必用的一个功能就是“断言”（Assert)，顾名思义，编写程序时，常会做出一定的假设，那断言就是用来捕获假设的异常。
下边举个栗子：
一个简单的函数 add() 拥有两个参数，功能是返回两个参数的和，当我需要验证这个函数的正确性的时候就需要模拟两个入参并 <strong>判断函数的返回值是否为两个入参之和</strong>，判断返回值是否准确这个过程即为断言。

<pre><code class="language-php line-numbers">function add($a, $b)
{
    return $a + $b;
}
</code></pre>

<h3>基境</h3>

每一个单元测试方法都是一个独立的个体，每次单元测试完毕，需要将数据恢复到正确的状态中，不至于被其他测试方法给影响。
在phpunit中，给出的 TestCase 基类即有两个方法，<code>setUp</code> 和 <code>setDown</code> 分别用于为每个单元测试创建测试对象和清理测试对象

<h3>数据供给器</h3>

对同一类情况进行测试，通常可以用数据供给器传入不同入参和相应的预期返回值。
测试方法可以接受任意参数。这些参数由数据供给器方法提供。在phpunit中使用 @dataProvider 标注来指定使用哪个数据供给器方法。

<h2>php如何集成单元测试</h2>

PHP的单元测试依赖一个测试框架：phpunit（官方文档：<a href="https://phpunit.readthedocs.io/zh_CN/latest/index.html">https://phpunit.readthedocs.io/zh_CN/latest/index.html</a>）

<h3>如何安装</h3>

可以通过phar的方式安装

<pre><code class="language-shell line-numbers">$  wget https://phar.phpunit.de/phpunit-7.0.phar
$  chmod +x phpunit-7.0.phar
$  sudo mv phpunit-7.0.phar /usr/local/bin/phpunit
$  phpunit --version
</code></pre>

也可以通过 composer 进行统一管理

<pre><code class="language-shell line-numbers">$ composer require phpunit/phpunit
</code></pre>

在 <code>composer.json</code> 中会出现如下依赖

<pre><code class="language-json line-numbers">{
    "require": {
        "phpunit/phpunit": "^7.5"
    }
}
</code></pre>

并且会出现 <code>vendor/bin/phpunit</code> 文件，直接运行即可

<h3>如何编写单元测试</h3>

所有类需要继承 <code>PHPUnit\Framework\TestCase</code>，<code>setUp</code> 函数用于初始化测试对象，<code>setDown</code> 函数用于清理测试对象，更多规范
更具体写法可以查看底部的 <code>举个栗子</code>

<h3>phpunit常用断言方法</h3>

更多断言方法详见 phpunit 官方文档，基本都能顾名思义。

<table>
<thead>
<tr>
  <th>断言函数</th>
  <th>作用</th>
  <th>示例</th>
</tr>
</thead>
<tbody>
<tr>
  <td>assertEquals(\$except, \$value)</td>
  <td>断言相等</td>
  <td>$this->assertEquals(2, 1 + 1)</td>
</tr>
<tr>
  <td>assertEmpty($value)</td>
  <td>断言为空</td>
  <td>$this->assertEmpty([])</td>
</tr>
<tr>
  <td>assertNotEmpty($value)</td>
  <td>断言不为空</td>
  <td>$this->assertNotEmpty([1, 2, 3])</td>
</tr>
<tr>
  <td>assertTrue($value)</td>
  <td>断言为真</td>
  <td>$this->assertTrue(1 === 1)</td>
</tr>
<tr>
  <td>assertFalse($value)</td>
  <td>断言为假</td>
  <td>$this->assertFalse(1 === '1')</td>
</tr>
<tr>
  <td>expectException(\Exception $e)</td>
  <td>断言本次测试会出现特定异常</td>
  <td>$this->expectException(\Exception::class); throw new \Exception('测试', 1002);</td>
</tr>
<tr>
  <td>expectExceptionCode($code)</td>
  <td>断言异常状态码</td>
  <td>$this->expectExceptionCode(1002); throw new \Exception('测试', 1002);</td>
</tr>
<tr>
  <td>expectExceptionMessage($msg)</td>
  <td>断言异常信息</td>
  <td>$this->expectExceptionMessage('测试'); throw new \Exception('测试', 1002);</td>
</tr>
<tr>
  <td>expectOutputString($msg)</td>
  <td>断言输出</td>
  <td>$this->expectOutputString('Hello');echo "Hello";</td>
</tr>
<tr>
  <td>getActualOutput()</td>
  <td>获取实际输出</td>
  <td>echo "Hello";\$result = \$this->getActualOutput();</td>
</tr>
</tbody>
</table>

<h3>如何运行单元测试</h3>

<pre><code class="language-bash line-numbers"># 运行全部测试
phpunit
# 运行某个分组的单元测试
phpunit --group GroupA
# 运行指定测试类的所有测试用例
phpunit tests/xxxxTest.php
# 运行所有测试类中满足filter条件的方法
phpunit --filter xxxFunc
# 运行某个测试类中满足filter条件的
</code></pre>

<h3>phpunit.xml 是什么</h3>

phpunit.xml 是一个XML格式的配置文件，能够配置单元测试中的一些默认行为，比如环境变量、启动文件、日志记录等，官方文档如下<a href="https://phpunit.readthedocs.io/zh_CN/latest/configuration.html">https://phpunit.readthedocs.io/zh_CN/latest/configuration.html</a>
一个样例配置如下所示：

<pre data-language=XML><code class="language-markup line-numbers">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--phpunit标签是配置中的核心，这里配置了启动文件 "./tests/bootstrap.php"--&gt;
&lt;phpunit backupGlobals="false"
         backupStaticAttributes="false"
         bootstrap="./tests/bootstrap.php"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"&gt;
    &lt;!--测试套件：非常多的测试用例放在一起即可成为测试套件，执行时会扫描包含的所有 *Test.php文件--&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="Unit"&gt;
            &lt;directory suffix="Test.php"&gt;./tests/Unit&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;
    &lt;filter&gt;
        &lt;!--这里配置了白名单，只有这里边的代码会被统计覆盖率--&gt;
        &lt;whitelist processUncoveredFilesFromWhitelist="true"&gt;
            &lt;directory suffix=".php"&gt;./app/library&lt;/directory&gt;
            &lt;directory suffix=".php"&gt;./app/models&lt;/directory&gt;
        &lt;/whitelist&gt;
    &lt;/filter&gt;
    &lt;!--这里配置了PHP的环境变量--&gt;
    &lt;php&gt;
        &lt;server name="APP_ENV" value="product"/&gt;
        &lt;server name="BCRYPT_ROUNDS" value="4"/&gt;
        &lt;server name="CACHE_DRIVER" value="array"/&gt;
        &lt;server name="MAIL_DRIVER" value="array"/&gt;
        &lt;server name="QUEUE_CONNECTION" value="sync"/&gt;
        &lt;server name="SESSION_DRIVER" value="array"/&gt;
    &lt;/php&gt;
    &lt;!--这里是日志记录，把覆盖率信息保存到 ./tests/codeCoverage--&gt;
    &lt;logging&gt;
        &lt;log type="coverage-html" target="./tests/codeCoverage"/&gt;
    &lt;/logging&gt;
&lt;/phpunit&gt;

</code></pre>

<h3>如何查看代码覆盖率</h3>

执行 phpunit 之后，根据 <code>&lt;logging&gt;</code> 中的配置，会自动生成代码覆盖率信息至 <code>./tests/codeCoverage/</code>，打开其中 <code>index.html</code> 即可查看覆盖率信息。

<h2>举个栗子</h2>

以一个简单的斐波拉契数列计算函数为例

<blockquote>
  斐波那契数列由0和1开始，之后的斐波那契系数就是由之前的两数相加而得出。
</blockquote>

<h4>输入输出分析</h4>

根据函数特点，我们可以通过验证已知情况和特殊情况的方式去验证，经过分析结果如下

<h4>正常输入的已知情况：</h4>

<table>
<thead>
<tr>
  <th>入参</th>
  <th>预期返回</th>
  <th>描述</th>
</tr>
</thead>
<tbody>
<tr>
  <td>0</td>
  <td>0</td>
  <td>规则</td>
</tr>
<tr>
  <td>1</td>
  <td>1</td>
  <td>规则</td>
</tr>
<tr>
  <td>2</td>
  <td>1</td>
  <td>0 + 1 = 1</td>
</tr>
<tr>
  <td>3</td>
  <td>2</td>
  <td>1 + 1 = 2</td>
</tr>
<tr>
  <td>4</td>
  <td>3</td>
  <td>1 + 2 = 3</td>
</tr>
<tr>
  <td>5</td>
  <td>5</td>
  <td>2 + 3 = 5</td>
</tr>
<tr>
  <td>6</td>
  <td>8</td>
  <td>3 + 5 = 8</td>
</tr>
<tr>
  <td>...</td>
  <td>...</td>
  <td>...</td>
</tr>
<tr>
  <td>12</td>
  <td>144</td>
  <td>55 + 89 = 144</td>
</tr>
</tbody>
</table>

<h4>异常输入的情况处理</h4>

处理为0，或者抛出异常均可

<table>
<thead>
<tr>
  <th>入参</th>
  <th>预期返回</th>
  <th>描述</th>
</tr>
</thead>
<tbody>
<tr>
  <td>-1</td>
  <td>0</td>
  <td>非正常输入处理为0</td>
</tr>
<tr>
  <td>''</td>
  <td>0</td>
  <td>非正常输入处理为0</td>
</tr>
<tr>
  <td>1.1</td>
  <td>0</td>
  <td>非正常输入处理为0</td>
</tr>
<tr>
  <td>'文字'</td>
  <td>0</td>
  <td>非正常输入处理为0</td>
</tr>
</tbody>
</table>

<h4>编写测试类</h4>

<code>tests/FunctionTest.php</code>

<pre><code class="language-php line-numbers">use PHPUnit\Framework\TestCase;
class FunctionsTest extends TestCase
{
    /**
     * @dataProvider fibon_normal_provider
     * @param $input
     * @param $except
     */
    public function test_fibon_normal($input, $except)
    {
        $this-&gt;assertEquals($except, fibon($input));
    }

    public function fibon_normal_provider()
    {
        return [
            [0, 0],
            [1, 1],
            [2, 1],
            [3, 2],
            [4, 3],
            [5, 5],
            [6, 8],
            [12, 144],
        ];
    }

    /**
     * @dataProvider fibon_error_provider
     * @param $input
     * @param $except
     */
    public function test_fibon_error($input, $except)
    {
        $this-&gt;assertEquals($except, fibon($input));
    }

    public function fibon_error_provider()
    {
        return [
            [-1, 0],
            [1.1, 0],
            ['', 0],
            ['文字', 0],
        ];
    }
}
</code></pre>

<h4>函数功能实现</h4>

（PS:此法效率很差，约莫是$O(n^2)$的复杂度，仅用于此处演示）
<code>functions.php</code>

<pre><code class="language-php line-numbers">function fibon($a)
{
    if (!is_int($a)) {
        return 0;
    }
    if ($a &lt;= 0) {
        return 0;
    } elseif ($a == 1) {
        return 1;
    } else {
        return fibon($a - 1) + fibon($a - 2);
    }
}
</code></pre>

<h4>运行结果</h4>

<pre><code class="language-shell line-numbers">vagrant@homestead:~/code/bmtrip/platoReceivable$ phpunit tests/FunctionsTest.php --filter test_fibon
PHPUnit 7.5.14 by Sebastian Bergmann and contributors.

............                                                      12 / 12 (100%)

Time: 5.77 seconds, Memory: 26.00 MB

OK (12 tests, 12 assertions)

Generating code coverage report in HTML format ... done
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。]]></excerpt:encoded>
		<wp:post_id>379</wp:post_id>
		<wp:post_date><![CDATA[2019-07-31 15:17:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-31 07:17:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95%e5%9f%ba%e7%a1%80%e6%b1%87%e6%80%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="phpunit"><![CDATA[phpunit]]></category>
		<category domain="post_tag" nicename="%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95"><![CDATA[单元测试]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[124]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[150]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[383]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581868531;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:301;}i:1;a:1:{s:2:"id";i:255;}i:2;a:1:{s:2:"id";i:174;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript基本类型总结</title>
		<link>https://blog.wj2015.com/2019/09/03/javascript%e5%9f%ba%e6%9c%ac%e7%b1%bb%e5%9e%8b%e6%80%bb%e7%bb%93/</link>
		<pubDate>Mon, 02 Sep 2019 16:14:35 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=410</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>背景</h2>

最近仔细看了看Javascript的变量相关章节，包括网道阮一峰大神写的 <a href="https://wangdoc.com/javascript">JavaScript教程</a>，以及被誉为JS圣经的《JavaScript权威指南》，故对变量的基础类型做一个总结

<h3>变量有什么类型？</h3>

JS中的数据类型总体分为两类：原始类型和对象类型

<h4>原始类型</h4>

包括数字、字符串、布尔值、null、undefined

<h4>对象类型</h4>

除了原始类型，其他都是对象类型，Object（普通对象）、Function（函数）、Array（数组）

<blockquote>
  PS: 虽然字符和数字也能通过对象的方式调用方法，但是这只是JS自动进行的包装对象，比如：
</blockquote>

<pre><code class="language-javascript line-numbers">'1,2'.split();// '1,2' 会被转换为 String('1,2')
var a = 3.1415926;
var b = a.toFixed(2)// a 会被转换为 Number(a)
var c = new Number(111); c === 111// false 包装对象与原属性不全等
Number(111) === 111 // true, Number(111) 是显示转换的意思，结果是 111，所以全等

var str = 'test';
str.number = 10;// 包装String对象
console.log(str.number);// undefined，注意这个地方，包装对象的生命周期只在那一个语句，下一个语句就没了

var arr = [];
arr.number = 123;
console.log(arr.number);// 123，这里是因为 [] 本来就是对象，与包装对象不同
</code></pre>

包装对象的详解可以参考如下博客：<a href="https://blog.csdn.net/lhjuejiang/article/details/79623505">https://blog.csdn.net/lhjuejiang/article/details/79623505</a>

<h3>类型转换</h3>

由于JS是一个弱类型的语言，所以在不同数据类型的数据进行比较或者操作的时候，需要进行类型转换，类型转换分强制转换（也称显式转换）以及自动转换（也称隐式转换）

<h4>强制转换</h4>

使用 Number() String() Boolean() 等构造函数进行强制转换，也相当于显示新增了包装对象，相比 parseInt()，parseFloat() 等辅助函数更加严格

<pre><code class="language-javascript line-numbers">Number('1') // 1
Number(true) // 1
Number(false) // 0
Number('1.2e8') // 120000000 PS:科学计数法
Number('0b1001')// 9 PS:二进制
Number('0xF') // 15 PS:十六进制
Number('0o777') // 511 PS:八进制
Number('1x') // NaN

// valueOf 用于返回对象自身，默认 return this，如果返回对象则调用原对象的 toString() 方法，如果 toString() 依旧返回对象，则报错无法转换
Number({
    valueOf: function() {
        return 123;
    }
}) // 123
Number({
    valueOf: function() {
        return {}
    },
    toString: function() {
        return {}
    }
})// 报错 Uncaught TypeError: Cannot convert object to primitive value

String(true) // 'true'
String(1.) // '1'
String(1.1) // '1.1'
String(-0) // '0'
String(-Infinity) // -Infinity
String(Infinity) // Infinity

Boolean('') // false
Boolean(0) // false
Boolean(null) // false
Boolean(NaN) // false
Boolean(undefined) // false
Boolean([]) // true PS:除了上边的，其他转出来都是 true
Boolean({}) // true
</code></pre>

<h4>自动转换</h4>

JS在不同类型数据互相运算时，非布尔值求布尔值，非数值类型使用 + - * / ，会自动根据场景调用相应的强制转换函数，既能转为字符又能转为数字时，优先数字

<h5>自动转Boolean</h5>

在需要用到布尔判断时，会导致此转换，比如 (if/else、三目运算符之类的)

<pre><code class="language-javascript line-numbers">if (
    '' == false &amp;&amp;
    null == false &amp;&amp;
    undefined == false &amp;&amp;
    0 == false &amp;&amp;
    NaN == false
){
    console.log(111);// true
}
[] ? 111 : 000 // 111
</code></pre>

<h5>自动转数字</h5>

涉及 + - * / 等操作会转换为数字

<pre><code class="language-javascript line-numbers">1 + '2' // 3
1 + 's' // NaN
true + 1 // 2
'c' - 1 // NaN
</code></pre>

<h5>自动转字符</h5>

字符 + 非字符 会被转换为字符串

<pre><code class="language-javascript line-numbers">'abc' + 1 // abc1
'1' + 0 // 10
'5' + undefined // 5undefined
'5' + function(){} // 5function(){}
</code></pre>

<h3>如何检查变量类型</h3>

JavaScript是一个弱类型语言，我们可以用内置的三种方法判断一个值到底属于什么类型

<ul>
<li>typeof 运算符</li>
<li>instanceof 运算符</li>
<li>Object.prototype.toString 方法</li>
</ul>

<h4>typeof判断变量类型的各种情况</h4>

<pre><code class="language-javascript line-numbers">typeof 123 // number
typeof '123' // string
typeof false // boolean

f = function() {}
typeof f // function
typeof undefined // undefined
typeof xxxxx // 未定义变量不报错，返回 undefined

typeof {} // object
typeof window // object
typeof [] // object，数组的typeof是object
typeof null // object，null的typeof也是object
</code></pre>

需要注意的点：数组、null 调用 typeof 都是 object。因为在JS中，数组本质上是一种特殊的对象，而null是因为最开始的JS把null作为对象的一种特殊值，为了向前兼容，就一直 typeof null === 'object' 了

<h4>instanceof 通过原型链判断数据类型</h4>

instanceof 返回一个 Boolean，表示对象的原型链中是否存在某个构造函数（原始定义：对象是否为某个构造函数的实例）。

<blockquote>
  关于原型链，这里简单提及下，一个对象的 prototype 都指向其构造函数的 prototype，其中有一个方法 Object.getPrototypeOf 返回对象的原型，最终的最终都会指向 Object，而 Object.prototype = null，整个原型链到了尽头，原型链的更为详细的介绍可点击：<a href="https://wangdoc.com/javascript/oop/prototype.html#%E5%8E%9F%E5%9E%8B%E9%93%BE">参考博客</a>
</blockquote>

一些实例如下：

<pre><code class="language-javascript line-numbers">[] instanceof Array // true 因为原型链里有 Array 这个构造函数
[] instanceof Object // true 因为原型链里有 Object 这个构造函数
Array instanceof Object // true，因为Array是一个特殊的对象
[] instanceof null // 报错，Right-hand side of 'instanceof' is not an object，因为null不是个对象

var func = function() {}
func instanceof Function // true，原型链中有Function
func instanceof Object // true，Function的原型是 Object
Function instanceof Object // true，函数是一个特殊对象
</code></pre>

<h4>Object.prototype.toString()</h4>

toString() 用于返回一个对象的字符串形式，用于在自动类型转换时得到想要的字符形式。一些样例具体如下：

<pre><code class="language-javascript line-numbers">var obj = {};
obj.toString() // [object Object]
var obj2 = {name: 'xxx'};
obj2.toString = function() {
    return 'Hello '+this.name
}
obj2.toString() // Hello xxx
obj2 == 'Hello xxx' // true

var obj3 = []
obj3.toString() // '' 空字符串，因为数组是空的
var obj4 = [1, 2, 3]
obj4.toString() // '1,2,3'
</code></pre>

由于对象的 toString 可以被重载，如果要用于类型判断的话，需要用到 <code>Object.prototype.toString.apply(obj)</code> 的方式，显示格式 [object 构造函数]，比如 <code>[object Object]</code>, <code>[object Number]</code>, <code>[object String]</code>,<code>[objct Function]</code>，不过有个问题是无法精确判断 字符对象 和 字符串，因为返回都是 <code>[object String]</code>

<blockquote>
  <code>apply</code> 是 <code>Function</code> 对象的一个方法，可以更改函数执行上下文，意思是执行 <code>Object.prototype.toString</code> 函数，但是执行过程中的 <code>this</code> 指向外部注入的 <code>obj</code>，如果还是看不明白可以参考博主之前写的另外一篇博客 <a href="https://blog.wj2015.com/2018/11/20/js%E4%B8%ADfunction-apply-%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/">JS中Function.apply() 的骚操作</a>
</blockquote>

<pre><code class="language-javascript line-numbers">Object.prototype.toString.apply({}) // [object Object]
Object.prototype.toString.apply([]) // [object Array]
Object.prototype.toString.apply('') // [object String]
Object.prototype.toString.apply(String('')) // [object String]
Object.prototype.toString.apply(123) // [object Number]
Object.prototype.toString.apply(NaN) // [object Number]

Object.prototype.toString.apply(String) //[object Function]
Object.prototype.toString.apply(function(){return 111}) //[object Function]

Object.prototype.toString.apply(undefined)// [object Undefined]
Object.prototype.toString.apply(null) // [object Null]
Object.prototype.toString.apply(true) // [object Boolean]
</code></pre>

<h2>总结</h2>

变量类型是JS的基础之一，也是平时很容易忽视的地方，稍不注意就容易产生莫名其妙的BUG，特此总结]]></content:encoded>
		<excerpt:encoded><![CDATA[最近仔细看了看Javascript的变量相关章节，包括网道阮一峰大神写的 [JavaScript教程](https://wangdoc.com/javascript)，以及被誉为JS圣经的《JavaScript权威指南》，故对变量的基础类型做一个总结]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date><![CDATA[2019-09-03 00:14:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-02 16:14:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript%e5%9f%ba%e6%9c%ac%e7%b1%bb%e5%9e%8b%e6%80%bb%e7%bb%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="web-front"><![CDATA[前端开发]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b"><![CDATA[数据类型]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581946050;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:69;}i:1;a:1:{s:2:"id";i:379;}i:2;a:1:{s:2:"id";i:461;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[179]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[418]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[336]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何将vim改造为python的IDE</title>
		<link>https://blog.wj2015.com/2019/11/29/%e5%a6%82%e4%bd%95%e5%b0%86vim%e6%94%b9%e9%80%a0%e4%b8%bapython%e7%9a%84ide/</link>
		<pubDate>Fri, 29 Nov 2019 02:34:50 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=432</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

博主最近尝试使用 Linux 办公，对比了一下现有 Linux 发行版，再结合之前的折腾经验，最后选择了 deepin 15.11，听说11月23号之后会发布 v20，到时候找机会再升级。
Linux环境下自带 python3.7，但是由于 pycharm 比较占内存，希望能找到一个轻量的 IDE 来编写代码，然后就想到了传说中的编辑器之神 VIM ！

<h2>基础操作</h2>

VIM 的三种模式，命令行模式、插入模式、末行模式 就不在此赘述了，常用快捷键可以参考如下博客：<a href="https://www.cnblogs.com/wsxdev/p/11546217.html">https://www.cnblogs.com/wsxdev/p/11546217.html</a>
Vim 可以自定义配置文件，个人的配置文件在 <code>~/.vimrc</code>，全局的配置文件在 <code>/etc/vim/vimrc</code> 中

<h3>自动缩进</h3>

Python对缩进比较严格，需要调整 <code>~/.vimrc</code> 中的配置

<pre><code class="language-ini line-numbers">au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |
</code></pre>

调整后效果如下：
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/d9bce684bb0d4959782201e5429410bb.png" alt="" />

<h3>粘贴代码混乱</h3>

比如将如下 python 代码在 vim 插入模式下，粘贴进去

<pre><code class="language-python line-numbers">a = 1
if a &gt; 1:
    print('&gt; 1')
else:
    if a = 1:
        print('= 1')
    else:
        print('&lt; 1')
</code></pre>

如果不做任何设置，粘贴进去是这样的，发现代码错乱
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/85af5371803f2efb88d33ecd920c783b.png" alt="" />

解决方法：
使用 <code>:set paste</code> 进入粘贴模式， <code>:set nopaste</code> 退出粘贴模式

粘贴模式下，粘贴效果如下
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/5a936a5e5f4982ac830c3b48f7dd7c49.png" alt="" />

<h3>代码折叠</h3>

编辑 <code>~/.vimrc</code>，新增如下：

<pre><code class="language-ini line-numbers">" Enable folding
set foldmethod=indent
set foldlevel=99
" 通过空格键快速打开和关闭折叠
nnoremap &lt;space&gt; za
</code></pre>

配置完毕后，按空格即可折叠代码
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/d8f2ed5fd27657a5d2d0ae5d3e988a24.png" alt="" />

<h2>插件篇</h2>

vim 默认的功能最多自带关键字颜色区分、自动补全等，想要一些强大的功能就需要强大的插件来完成。

<h3>如何管理插件</h3>

可以使用强大的 vundle 管理

<h5>安装 vundle</h5>

<pre><code class="language-shell line-numbers">$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
正克隆到 '/home/wang/.vim/bundle/Vundle.vim'...
remote: Enumerating objects: 1, done.
remote: Counting objects: 100% (1/1), done.
remote: Total 3140 (delta 0), reused 0 (delta 0), pack-reused 3139
接收对象中: 100% (3140/3140), 935.39 KiB | 420.00 KiB/s, 完成.
处理 delta 中: 100% (1106/1106), 完成.
</code></pre>

然后在 <code>~/.vimrc</code> 中加入此配置

<pre><code class="language-ini line-numbers">" 在此设置运行时路径 
set rtp+=~/.vim/bundle/Vundle.vim
" vundle初始化 
call vundle#begin()
" 或者传递一个 Vundle 安装插件的路径
"call vundle#begin('~/some/path/here')

" 让 Vundle 管理 Vundle, 必须
Plugin 'VundleVim/Vundle.vim'

" 保持 Plugin 命令 在 vundle#begin 和 end 之间

"每个插件都应该在这一行之前  
call vundle#end()            " 这是必需的 
filetype plugin indent on    " 这是必需的 
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
</code></pre>

<h4>安装插件</h4>

打开vim输入<code>:BundleInstall</code>。
<code>:BundleInstall</code>命令会安装在<code>.vimrc</code>文件中列出来的所有插件。
<code>:BundleInstall &lt;plugin-name&gt;</code> 安装指定的插件。

<h4>清理未用插件</h4>

打开vim输入<code>:BundleClean</code>
从命令行安装<code>vim +:BundleClean</code>。

<h4>搜索插件</h4>

打开vim输入<code>:BundleSearch &lt;text-list&gt;</code>
从命令行搜索<code>vim +:BundleSearch &lt;text-list&gt;</code>。

<h3>NERDTree 目录树</h3>

在 vundle 的插件范围内，新增如下信息

<pre><code class="language-ini line-numbers">" NERDTree 插件
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'git://github.com/scrooloose/nerdtree.git'
Plugin 'git://github.com/Xuyuanp/nerdtree-git-plugin.git'
</code></pre>

编辑 <code>~/.vimrc</code> 新增如下：

<pre><code class="language-ini line-numbers">map &lt;F4&gt; :NERDTreeToggle&lt;CR&gt;
</code></pre>

然后在 vim 中执行 <code>:PluginInstall</code>，进入如下界面，等待安装完毕即可
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/046dc2169d2c9586b9fb5b2d297c068d.png" alt="" />

所有操作完毕后，按 F4 即可在目录树和代码区切换
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/78d44c97fa3cff17cc6d75871b61a73d.png" alt="" />

<h3>编辑模式运行 python</h3>

<code>~/.vimrc</code> 设置一下快捷键即可

<pre><code class="language-ini line-numbers">" Python 的运行
map &lt;F7&gt; :call PRUN()&lt;CR&gt;
func! PRUN()
exec "w"
exec "!clear"
exec "!time python3 %"
endfunc
</code></pre>

按下 F7 之后，得到运行结果
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/47a37cdf4747684a0364db607f49ccde.png" alt="" />

<h2>参考文献</h2>

<a href="https://www.jianshu.com/p/1839f1fb3f08">vim 插件管理器 Vundle 安装与配置</a>
<a href="https://www.cnblogs.com/wsxdev/p/11546217.html">linux中vim编辑器三种模式及常用命令的使用</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[博主最近尝试使用 Linux 办公，对比了一下现有 Linux 发行版，再结合之前的折腾经验，最后选择了 deepin 15.11，听说11月23号之后会发布 v20，到时候找机会再升级。
Linux环境下自带 python3.7，但是由于 pycharm 比较占内存，希望能找到一个轻量的 IDE 来编写代码，然后就想到了传说中的编辑器之神 VIM ！]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date><![CDATA[2019-11-29 10:34:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-29 02:34:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e5%b0%86vim%e6%94%b9%e9%80%a0%e4%b8%bapython%e7%9a%84ide]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="vim"><![CDATA[vim]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1580704673;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:255;}i:1;a:1:{s:2:"id";i:379;}i:2;a:1:{s:2:"id";i:287;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019-11-06]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[440]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[262]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>214</wp:comment_id>
			<wp:comment_author><![CDATA[孟超]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[2205101365@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.mengchao.xyz</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[117.136.87.64]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-12-01 16:03:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-12-01 08:03:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咱们用的插件管理器不一样，哈哈]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1575627638.320568;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1575187421]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1575187421.488538;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>常见web登陆授权方式及原理</title>
		<link>https://blog.wj2015.com/2019/11/30/%e5%b8%b8%e8%a7%81web%e7%99%bb%e9%99%86%e6%8e%88%e6%9d%83%e6%96%b9%e5%bc%8f%e5%8f%8a%e5%8e%9f%e7%90%86/</link>
		<pubDate>Sat, 30 Nov 2019 09:41:54 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=442</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本文主要针对 web 授权登陆部分从原理到实现的探讨，首先会从 HTTP 协议的原理讲起，再根据 HTTP 协议的特点探讨如何进行登陆凭证传输和授权；最后整理下常见的授权登陆模式。

<h2>一些准备</h2>

<h3>了解下 HTTP 协议的特点</h3>

<h4>什么是 HTTP 协议？</h4>

HTTP 协议，就是浏览器与 web 服务器交互的一种规范；浏览器需要根据 HTTP 协议的规范发起请求，服务器也需要根据 HTTP 协议的规范返回响应数据；
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/13263206-789acd89ebc8afef.jpeg" alt="" />

<h4>一个 HTTP 请求包含了什么信息？</h4>

首先看一个 HTTP 请求的样例

<pre><code class="language-text line-numbers">POST http://www.baidu.com?id=1 HTTP/1.0
Accept: text/html
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7
Cache-Control: max-age=0
Connection: keep-alive
Cookie: BIDUPSID=261A05061D8C4F2F40046ED513E0E666;
DNT: 1
Host: www.baidu.com
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: none
Sec-Fetch-User: ?1
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36

name=1&amp;password=2
</code></pre>

结构如下：
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/13263206-dde2fc0423a9f861.jpeg" alt="" />
请求方法包含， GET/POST/PUT/PATCH/DELETE/OPTIONS 等，其余相关知识就先不展开了。

<h4>一个标准的 HTTP 服务器响应是怎样的？</h4>

首先看一下样例

<pre><code class="language-text line-numbers">HTTP/1.0 200 OK
Cache-Control: private
Connection: Keep-Alive
Content-Encoding: gzip
Content-Type: text/html;charset=utf-8
Content-Length: 12345
Date: Fri, 29 Nov 2019 07:26:29 GMT
Expires: Fri, 29 Nov 2019 07:26:29 GMT
Server: BWS/1.1
Set-Cookie: BDSVRTM=104; path=/
Set-Cookie: BD_HOME=1; path=/
Set-Cookie: H_PS_PSSID=1455_21098_18560_20697_30089_22158; path=/; domain=.baidu.com
Strict-Transport-Security: max-age=172800
Traceid: 1575012389282792346617750770023830247734
Transfer-Encoding: chunked
X-Ua-Compatible: IE=Edge,chrome=1

&lt;html&gt;
.....
&lt;/html&gt;
</code></pre>

结构如下：
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/13263206-af1aeca1688f4185.jpeg" alt="" />
常见响应状态码包括，200/404/502/500/304/302 等

<h4>HTTP 协议的特点</h4>

HTTP 是无状态的，这次请求和上次请求完全分离；服务器无法判断用户的身份，需要在浏览器的请求头中以特殊的标记获知用户的身份(鉴权)。

<h5>如何在 Chrome 中查看请求头、响应头等信息</h5>

打开 chrome 浏览器，进入 <code>http://www.baidu.com</code>，按 <code>F12</code>再 <code>F5</code> 刷新一下，点击 <code>Network</code>页签，选择第一个请求，下滑找到 <code>Request Headers</code> 的内容如下。
<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/a85a32f2bee1008a036968076d1ee29b.png" alt="" />

<h3>什么是域名，什么是子域名，什么又是跨域</h3>

域名可以当做是服务器的地址别名，域名首先被 DNS 服务解析到 IP，通过 IP 就能与服务器进行通信了；比如本站的域名就是 <code>wj2015.com</code>，是 <code>.com</code> 顶级域下的一级域名；<code>blog.wj2015.com</code> 是本博客的域名，是 <code>wj2015.com</code> 下的一个二级子域名，也叫作二级域名；
博主之前使用过的 <code>wj2015.com.cn</code>，这是一个<code>.cn</code>顶级域下的二级域名，<code>blog.wj2015.com.cn</code> 就是其下的一个三级子域名。

<h4>跨域的简短介绍</h4>

跨域是浏览器上为了用户安全提出来的一个概念；满足如下三个条件之一的，即跨域：

<ul>
<li>不同域名(如：http://blog.wj2015.com 与 http://excel.wj2015.com)</li>
<li>不同端口(如：http://blog.wj2015.com:80 与 http://blog.wj2015.com:8080)</li>
<li>不同协议(如：http://blog.wj2015.com 与 https://blog.wj2015.com)</li>
</ul>

如果请求的服务端与当前页面是跨域的，那么则无法通过正常方法发送 GET/POST 等请求，比如：
在 <code>blog.wj2015.com</code> 的页面中，请求 <code>www.baidu.com</code> 的某个接口

<pre><code class="language-javascript line-numbers">$.ajax({
    url: 'http://www.baidu.com',
});
</code></pre>

报错结果如下：

<blockquote>
  Access to XMLHttpRequest at 'https://www.baidu.com/' from origin 'https://blog.wj2015.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
</blockquote>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/a47357734194cadcbb2bc0e3c45f6c69.png" alt="" />

<h5>为何提到跨域？</h5>

因为实际项目中的登陆授权，可能横跨多个业务；而多个业务可能是跨子域名的、跨端口的、甚至是需要给任意域名的请求者授权，所以还需要了解下哪些请求不受跨域限制。

不受跨域限制的一般都是资源类的数据

<ul>
<li>script 脚本加载，可以用 JSONP 实现跨域</li>
<li>img/video/audio 媒体资源加载，可以隐藏式的伪造其他域名的 Get 请求</li>
<li>iframe 嵌入式页面，但是跨域情况下，父页面不能获取子页面数据，可以用来隐藏式的伪造其他域名的 Post 请求</li>
</ul>

<h3>可别再 Cookie 和 Session 傻傻分不清了</h3>

Cookie 是存储在 <strong>浏览器端</strong> 的少量数据，每次请求均会将其放置于 <code>Request Headers</code> 中的 <code>Cookies:</code>中，数据以 <code>;</code> 分隔
Session 是存储在 <strong>浏览器端</strong> 的数据，通过客户端上传的 SessionId（凭证）查找存储于服务器对应的数据，服务端可以在响应头 <code>Set-Cookie</code> 中控制浏览器端的 Cookie 。
Cookie 和 Session 有关系呢？之前提到 HTTP 是一个无状态的协议，服务器想要确认你是否是之前请求的那个客户端，就需要要传输一个凭证（可以理解为唯一的身份证号），而常规做法就是把这个凭证存放在 Cookie 中，每次请求都会自动带上凭证，后端自动匹配凭证，获取 Session 信息。

<h2>登陆授权</h2>

<h3>什么是凭证</h3>

凭证就相当于服务端给客户端颁发的临时身份证号，用来标记客户端身份

<h3>常见授权登陆模式</h3>

安全性问题
颁发凭证大致可分为两种类型，一种是无论用户是否登陆都颁发凭证；另一种是只有通过验证才会颁发访问凭证，两者仅有细微区别。

<h4>Cookie、Session 模式</h4>

上面提到了，Session 是通过 Cookie 中的 SessionId 来标记用户信息的，所以会存在如下的优势和劣势
优势：

<ul>
<li>发起请求浏览器自动带上凭证，处理起来统一方便</li>
<li>做一定配置可以实现跨子域名授权</li>
</ul>

劣势：

<ul>
<li>每次请求都会带 Cookie，哪怕在图片、js 等资源加载时也会带上，有一定的资源浪费</li>
<li>无法做到跨域名（非子域）授权</li>
<li>有平台限制，部分平台没有 Cookie 概念，比如小程序</li>
</ul>

<h4>AccessToken 模式,使用自定义 Header 携带凭证</h4>

这种模式一般是通过登陆验证后会颁发给客户端的凭证，客户端自行存储，比如 Web 浏览器就可以选择存在 LocalStroage，SessionStorage 等，请求的时候放到 Headers、Get 参数等。
优势：

<ul>
<li>多平台通用，安卓、IOS、PC 客户端、小程序等都能使用</li>
<li>可以做到跨域名授权</li>
<li>相比 Cookie 方案，减少请求中携带 Cookie 的数据</li>
<li>防 CSRF
劣势：</li>
<li>前后端均需要加特殊逻辑处理 Token 的有效性、获取对应数据等，会造成一定麻烦</li>
</ul>

<h4>JWT（JSON WEB TOKEN）</h4>

JWT 是一种将数据完全存放于客户端的一种认证机制，使用签名保证数据准确性；
JWT 数据由头部、荷载、签名组成

<h5>头部</h5>

主要指定版本以及签名方式

<pre><code class="language-json line-numbers">{
"typ": "JWT",
"alg": "HS256"
}
</code></pre>

需要进行 Base64 生成字符串

<h5>荷载</h5>

用于存放实际数据，过期时间，签发时间等

<pre><code class="language-json line-numbers">{ "iss": "Online JWT Builder",
  "iat": 1416797419,
  "exp": 1448333419,
  "aud": "www.example.com",
  "sub": "jrocket@example.com",
  "GivenName": "Johnny",
  "Surname": "Rocket",
  "Email": "jrocket@example.com",
  "Role": [ "Manager", "Project Administrator" ]
}
</code></pre>

依旧需要 Base64 生成字符串

<h5>签名</h5>

将上方得到的两个字符串拼接在一起，根据 头部 定义的加密算法以及服务器上保护良好的密钥，生成签名

将头部、荷载、签名拼接在一起，即为 JWT

优势：

<ul>
<li>服务器无需存储 SESSION 数据</li>
<li>密钥保管良好的话，安全性有保障，不用担心用户端篡改数据
劣势：</li>
<li>每次获取、颁发、修改都需要校验/生成签名，造成修改数据很麻烦</li>
<li>依附 Cookie，容易造成请求头部过大等问题</li>
</ul>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/aa3fe6d311484c7c0a0fb97b3ab9f090.png" alt="" />

<h3>跨子域名解决方案</h3>

默认情况下，Cookie 仅对当前域名有效，当服务端返回<code>Set-Cookie</code> 颁发凭证的时候，配置 <code>Path:/</code>，则其顶级域名即会带上设置的 Cookie 信息，即可简单实现跨子域名授权；

由于 Accesson-Token 跨域限制，如果需要跨子域名，或者完全跨域 需要用下面一种 跨域登陆中心 的解决方案。

<h3>跨域登陆中心解决方案</h3>

<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/45f1b602bbbaad27c3e2f183a7b09956.png" alt="" />

<h3>Oauth2</h3>

Oauth2 也是一种跨域的登陆中心解决方案，日常见到的微信授权登录、QQ 授权登陆等均使用此模式。
Oauth2 一共有四种授权模式，授权码模式、简化模式、密码模式、客户端模式；
下方流程图仅针对微信的三方登陆，更加具体的 Oauth2 可查阅下方参考资料；

<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/9b8932dd82fc327add294927048d683f.png" alt="" />

<img src="https://blog.wj2015.com/wp-content/uploads/2019/11/3c548c71f26a69b8e2c561e5a6113099.png" alt="" />

<h2>参考资料</h2>

<a class="wp-editor-md-post-content-link" href="https://www.jianshu.com/p/cc1fea7810b2">HTTP 学习笔记</a>
<a class="wp-editor-md-post-content-link" href="http://jalan.space/2019/05/03/2019/oauth2.0-and-wechat-oauth/">谈谈 OAuth 2.0 与微信授权登录</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[本文主要针对web授权登陆部分从原理到实现的探讨，首先会从 HTTP 协议的原理讲起，再根据HTTP协议的特点探讨如何进行登陆凭证传输和授权；最后整理下常见的授权登陆模式。]]></excerpt:encoded>
		<wp:post_id>442</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 17:41:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 09:41:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b8%b8%e8%a7%81web%e7%99%bb%e9%99%86%e6%8e%88%e6%9d%83%e6%96%b9%e5%bc%8f%e5%8f%8a%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[443]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1581948022;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:174;}i:1;a:1:{s:2:"id";i:379;}i:2;a:1:{s:2:"id";i:10;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[206]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[236]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>机器学习(1)-概览</title>
		<link>https://blog.wj2015.com/2020/02/16/%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a01-%e6%a6%82%e8%a7%88/</link>
		<pubDate>Sun, 16 Feb 2020 08:05:00 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=461</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

系列博客均提取自李宏毅教授的机器学习课程，配套笔记如下：https://datawhalechina.github.io/leeml-notes/#/chapter1/chapter1 ，B站视频地址如下：https://www.bilibili.com/video/av59538266

<h2>机器学习的目标和手段</h2>

人工智能是人们想要达到的目标，机器学习是达成目标的一个手段，希望机器拥有自我学习的能力，而深度学习就是机器学习的其中一种方法。

<h2>机器学习的三个步骤</h2>

语音识别也好、图片识别也罢，都有一个共同的特点，就是需要找到一个 <code>function(函数)</code>，把原始数据（语音、文字、图片）输入进去，得到我们期望的结果，就比如输入一张图片的信息，得到图片对应的文字转换结果，输入一篇邮件内容，得到这是否是一封垃圾邮件等。

整个机器学习分为两个部分，一个部分是 <code>training(训练)</code>，另一个部分是 <code>testing(测试)</code>

就跟“把大象放进冰箱”一样，机器学习也分为三个步骤
- 定义函数集合（自动生成很多个函数）
- 衡量一个函数是好还是不好
- 选择最好的一个函数

<img src="https://blog.wj2015.com/wp-content/uploads/2020/02/a8ddcd26dcd3752bca88bc2c65d66428.png" alt="" />

<h2>相关技术以及其特点</h2>

<img src="https://blog.wj2015.com/wp-content/uploads/2020/02/f8413664fb5e5e6e6dc8e3eed2c8c1bb.png" alt="" />

<h3>监督学习</h3>

监督学习有一个很大的特点，就是需要准备大量训练资料，以筛选出合适的最佳的函数
<img src="https://blog.wj2015.com/wp-content/uploads/2020/02/ea89e8334fc1b72dff79b5827bcc0983.png" alt="" />

<h4>预测场景</h4>

比如我们希望输入昨日和前日的PM2.5，预测明日的PM2.5，就需要提供一些训练资料，比如如下表格的资料

<table>
<thead>
<tr>
  <th>第一天</th>
  <th>第二天</th>
  <th>第三天</th>
</tr>
</thead>
<tbody>
<tr>
  <td>02月14日 PM2.5 63</td>
  <td>02月15日 PM2.5 64</td>
  <td>02月16日 PM2.5 65</td>
</tr>
<tr>
  <td>02月15日 PM2.5 64</td>
  <td>02月16日 PM2.5 65</td>
  <td>02月17日 PM2.5 60</td>
</tr>
<tr>
  <td>02月16日 PM2.5 65</td>
  <td>02月17日 PM2.5 60</td>
  <td>02月17日 PM2.5 70</td>
</tr>
</tbody>
</table>

根据训练资料筛选出最佳的函数后，我们就可以输入昨天和今天的PM2.5数据拿到明天的预测数值

<h4>分类场景</h4>

比如想要识别垃圾邮件，输入是邮件内容，输出为是或否(0/1)，就需要准备大量的垃圾邮件和正常邮件的训练资料，筛选出最佳函数后，输入新的邮件内容，最终得到是否为垃圾邮件
或者存在多分类场景，比如新闻分类，输入新闻正文内容，输出其中一个分类： <code>体育</code>、<code>政治</code>、<code>金融</code>、<code>其他</code>，训练筛选出最佳函数后，输入新的新闻正文，最终得到新闻分类

<h3>半监督学习</h3>

<img src="https://blog.wj2015.com/wp-content/uploads/2020/02/64067b8aa977635e8798c065360a2fbb.png" alt="" />

比如需要分类一张图片是 猫/狗，如果按照监督学习的思路，需要准备大量的被标记为 猫/狗/其他 的照片，但是半监督学习相关的技术能使用没有打标记的图片，配合部分打了标记的图片，筛选出合适的函数（模型），减少标记工作量

<h3>迁移学习</h3>

同样是分类 猫/狗，但是目前只有少量的标记图片，然后还有一堆与其不想关的图片，可以利用这些图片为模型带来一些帮助
PS:视频浅尝辄止，个人理解是类似排除法的思路

<h3>无监督学习</h3>

也就是谷歌之前的，机器本来不认识猫，但是通过自我学习，识别出一张图片是否是猫；
还比如输入很多动物的图片，让模型自动生成世界上没有的动物，像是牛头蛇身、狗头马身等，随手用鼠标涂抹，自动生成风景图片等。
下边是博主搜集的例子，能自动生成不存在的人脸 <a href="https://thispersondoesnotexist.com/">https://thispersondoesnotexist.com/</a>

<h3>监督学习中的结构化学习</h3>

比如语音识别、人脸识别等场景，输入语音 <code>Hello World！</code>，会输出为对应的文字，给定一张照片，输出照片中的所有人脸数据
<img src="https://blog.wj2015.com/wp-content/uploads/2020/02/1d44de915fb6b7a8bb575a0e65d045af.png" alt="" />

<h3>强化学习</h3>

就像是一个打分系统，比如目标是训练一个聊天机器人，我们不会告诉机器人正确回答应该是什么，但是会给机器人的答复打分，最后目标就是机器人的回复越来越自然。
PS:不过实际产品上看，就算是微软出的聊天机器人小冰，很多回复也不自然，都是以转移话题的形式继续聊
<img src="https://blog.wj2015.com/wp-content/uploads/2020/02/922110bdecada0acff19b6a3d6b3afe6.png" alt="" />

<h2>总结</h2>

机器学习可以分为三步，定义一个函数集合（自动生成），衡量函数是好还是不好（规则），选择一个最好的函数（自动）；
机器学习可细分为 监督学习、半监督学习、迁移学习、无监督学习、监督学习中的结构化学习、强化学习 等，核心思想是通过大量的训练资料和期望需求得到最佳处理函数，最终希望机器能拥有自我学习的能力；]]></content:encoded>
		<excerpt:encoded><![CDATA[人工智能是人们想要达到的目标，机器学习是达成目标的一个手段，希望机器拥有自我学习的能力，而深度学习就是机器学习的其中一种方法。]]></excerpt:encoded>
		<wp:post_id>461</wp:post_id>
		<wp:post_date><![CDATA[2020-02-16 16:05:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-16 08:05:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a01-%e6%a6%82%e8%a7%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[cwp_meta_box_check]]></wp:meta_key>
			<wp:meta_value><![CDATA[No]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1582361705;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:354;}i:1;a:1:{s:2:"id";i:174;}i:2;a:1:{s:2:"id";i:10;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[105]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[78]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>深度学习的数学-神经单元、激活函数、Sigmoid</title>
		<link>https://blog.wj2015.com/2020/02/23/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e5%8d%95%e5%85%83%e3%80%81%e6%bf%80%e6%b4%bb%e5%87%bd%e6%95%b0%e3%80%81sigmoid/</link>
		<pubDate>Sun, 23 Feb 2020 08:36:27 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=504</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

阅读《深度学习的数学》书中第一部分提到了关于 神经元、神经单元、激活函数以及一个非常具有代表性的 Sigmoid 函数，本博客的目的既是对此做一个总结

<h2>正文</h2>

<h3>生物学中的神经元</h3>

生物中的神经元可归纳为如下几个知识点

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/4fe312a30061c14e8a3b2ceed9adc8ff.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/4fe312a30061c14e8a3b2ceed9adc8ff.png" alt="" /></a>

<ul>
<li>每个神经元由胞体、轴突和树突组成

<ul>
<li>轴突上的突触可以用来接受其他神经元的信号</li>
<li>树突用来发送信号</li>
</ul></li>
<li>很多个神经元形成神经网络</li>
<li>如果一个神经元收到的其他神经元传递的<strong>带权重信号之和</strong>不超过某个固定大小的值，则不做出任何反应</li>
<li>如果一个神经元收到其他神经元传递的<strong>带权重信号之和</strong>超过某个固定大小的值，则向其他相连的神经元传递<strong>固定强度</strong>的信号，俗称<strong>“点火”</strong></li>
</ul>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/e9c14f347efd8d0f6e1bb7121e2ef4e4.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/e9c14f347efd8d0f6e1bb7121e2ef4e4.png" alt="" /></a>

<h3>深度学习中的神经单元</h3>

根据生物学上的神经元规律来看，一个神经单元拥有带权值的一个或多个输入，输出分为『有输出/无输出』，带权值之和大于某个固定值则输出信号

所以，假设神经元输出为 <code>y</code>，固定值为 <code>θ</code>，输入信号的权值和输入信号的强度为 <code>wn</code> 和 <code>xn</code>
可得到如下表达式：
<code>w1*x1 + w2*x2 + ... wn*xn &lt; θ =&gt; y=0</code>
<code>w1*x1 + w2*x2 + ... wn*xn &gt; θ =&gt; y=1</code>

<h4>数学上的表达</h4>

数学上有一个 <code>单位阶跃函数</code>的定义，自变量大于0时，函数值为1；自变量小于0时，函数值为0，自变量为0时函数值为不确定或不定义
单位阶跃函数的数学定义如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/636c311a0b959f10fefd33e438a776af.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/636c311a0b959f10fefd33e438a776af.png" alt="" /></a>

结合神经单元的表达式，可得到
<code>z = w1*x1 + w2*x2 + ... + wn*xn - θ</code>

<strong>点火</strong>的数学表达式即可确定为
<code>y = u(w1*x1 + w2*x2 + ... + wn*xn - θ)</code>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/cdb747b628d8506daf042ef2b6f0dacd.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/cdb747b628d8506daf042ef2b6f0dacd.png" alt="" /></a>

<h3>激活函数</h3>

上述 <strong>点火</strong> 的数学表达式其实就是一个激活函数，但是 <code>u</code> 一般表示单位阶跃函数，<code>- θ</code> 也不够一般化，所以式子换成了这个样子：
<code>y = a(w1*x1 + w2*x2 + ... + wn*xn + b)</code>

输出也不限于 0/1，也可能是其他变量，书中提到可类比 “兴奋度”、“反应度”
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/df9852cb76a83b868c5b8c5060018a6c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/df9852cb76a83b868c5b8c5060018a6c.png" alt="" /></a>
其中 <code>a</code> 就是激活函数，是建模者定义的函数，有一个代表就是 <code>Sigmoid</code> 函数
其中 <code>b</code> 被称作 <strong>偏置</strong>，相当于 <code>-θ</code>，<code>θ</code> 表示一个神经元的感受能力，<code>θ</code> 越高越不容易被点火（迟钝），<code>θ</code>越低越容易被点火（敏感）
至此 一个神经元可以如下图表示
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/bc6f331021d64206646e8fc2a18c6b8f.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/bc6f331021d64206646e8fc2a18c6b8f.png" alt="" /></a>

<h4>Sigmoid</h4>

激活函数的代表就是 <code>Sigmoid</code> 函数，书中介绍其，定义如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/ccdc877796770b79c618bb62b7d400d9.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/ccdc877796770b79c618bb62b7d400d9.png" alt="" /></a>
其函数图像可由下图所示，对应的输入和权重映射到 y 的输出，y越接近1兴奋度越高，越接近0兴奋度越低
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/0269a1865034d017200c286e334a159e.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/0269a1865034d017200c286e334a159e.png" alt="" /></a>

<h2>总结</h2>

由生物学中的神经元特性推导出深度学习中的神经单元模型
在生物学中，对每一组输入的权值求和，超过阈值即输出1（激发态，点火），否则输出0（静息态）
深度学习中的神经单元，使用激活函数来表示一个神经元在一定的输入下的激活状态，表达式如下 <code>y = a(x1*w1 + x2*w2 + ... xn*wn + b)</code>
上述表达式中的 <code>a</code> 即为激活函数，<code>b</code> 为偏置，越高则神经元越敏感
<code>Sigmoid</code> 是激活函数的代表，输出接近1表示兴奋度越高，接近0表示兴奋度越低]]></content:encoded>
		<excerpt:encoded><![CDATA[阅读《深度学习的数学》书中第一部分提到了关于 神经元、神经单元、激活函数以及一个非常具有代表性的 Sigmoid 函数，本博客的目的既是对此做一个总结]]></excerpt:encoded>
		<wp:post_id>504</wp:post_id>
		<wp:post_date><![CDATA[2020-02-23 16:36:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-23 08:36:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e5%8d%95%e5%85%83%e3%80%81%e6%bf%80%e6%b4%bb%e5%87%bd%e6%95%b0%e3%80%81sigmoid]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[122]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[200]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Thinkphp5的自定义异常处理及其底层实现</title>
		<link>https://blog.wj2015.com/2020/02/23/thinkphp5%e7%9a%84%e8%87%aa%e5%ae%9a%e4%b9%89%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86/</link>
		<pubDate>Sun, 23 Feb 2020 09:55:09 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=508</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

在很多php的项目中，错误信息的输出返回都通过异常抛出的方式进行，特别是在后端校验过程中，或者后端处理过程中突然遇到需要中断程序执行的情况，相比返回<code>['code' =&gt; 999, 'message' =&gt; 'error']</code>，抛出异常无疑更简单明了
众所周知，php里边自定义异常处理函数需要用到内置方法 <code>set_exception_handler</code>，而在 Thinkphp5 中可以由开发者自定义异常处理类进行接管

<h2>正文</h2>

<h3>涉及到的配置参数及类</h3>

如果需要自定义异常处理，则需要在 <code>app.php</code> 中配置 <code>exception_handle</code> 参数
参数支持回调模式和自定义类，正如官方文档所说

<pre><code class="language-php line-numbers">'exception_handle'       =&gt; function($e) {
  // 参数验证错误
  if ($e instanceof \think\exception\ValidateException) {
    return json($e-&gt;getError(), 422);
  }

  // 请求异常
  if ($e instanceof \think\exception\HttpException &amp;&amp; request()-&gt;isAjax()) {
    return response($e-&gt;getMessage(), $e-&gt;getStatusCode());
  }
},
// 异常处理handle类 留空使用 \think\exception\Handle
'exception_handle'       =&gt; '\\app\\common\\exception\\Http',
</code></pre>

自定义类需要继承 <code>think\exception\Handle</code> 并实现 render()，支持 <code>return new Response()</code> 直接向前端响应数据

比如在我的项目中，在 <code>app/common/exception</code> 下定义了 <code>BaseException extends \think\Exception</code>，以后不同模块的自定义异常类都会继承 <code>BaseException</code>，在自定义异常处理类中判断 <code>$e instanceof BaseException</code> 即可进行个性化处理

<code>app/common/exception/BaseException.php</code>

<pre><code class="language-php line-numbers">&lt;?php
/**
 * Created by PhpStorm.
 * User: 94468
 * Date: 2020/2/10
 * Time: 2:12
 */

namespace app\common\exception;


use think\Exception;

class BaseException extends Exception
{
}
</code></pre>

在 <code>app/common/exception/Http.php</code> 中实现了控制器抛出的验证器异常和基于 <code>BaseException</code> 的异常，并统一格式输出和错误日志记录，在实际使用过程中就特别方便

<code>app/common/exception/Http.php</code>

<pre><code class="language-php line-numbers">&lt;?php
/**
 * Created by PhpStorm.
 * User: 94468
 * Date: 2020/2/10
 * Time: 0:33
 */

namespace app\common\exception;


use Exception;
use think\exception\ErrorException;
use think\exception\Handle;
use think\exception\ValidateException;
use think\facade\Log;

class Http extends Handle
{
    public function render(Exception $e)
    {
        if ($e instanceof ValidateException) {
            Log::info('Exception-Validate:' . $e-&gt;getMessage());
            return json([
                'code' =&gt; 888,
                'message' =&gt; $e-&gt;getMessage(),
                'data' =&gt; [],
            ]);
        }

        if ($e instanceof BaseException) {
            Log::error('Exception-Logic:' . $e-&gt;getMessage());
            return json([
                'code' =&gt; $e-&gt;getCode() ?: 777,
                'message' =&gt; $e-&gt;getMessage(),
                'data' =&gt; [],
            ]);
        }

        if ($e instanceof ErrorException) {
            Log::error('Exception-Error:' . $e-&gt;getMessage());
            return json([
                'code' =&gt; $e-&gt;getCode() ?: 666,
                'message' =&gt; $e-&gt;getMessage(),
                'data' =&gt; [],
            ]);
        }
        Log::error('Unknown-Error:' . $e-&gt;getMessage());
        return json([
            'code' =&gt; $e-&gt;getCode() ?: 555,
            'message' =&gt; env('APP_DEBUG') ? $e-&gt;getMessage() : '系统错误',
            'data' =&gt; []
        ]);
//        return parent::render($e);
    }
}
</code></pre>

<h3>底层是如何实现的</h3>

首先，定位到 <code>thinkphp/library/think/Error.php</code> 错误处理类，在其 <code>register()</code> 中可看到对 php 的异常处理函数注册方法<code>set_exception_handler</code> 的调用

<pre><code class="language-php line-numbers">    /**
     * 注册异常处理
     * @access public
     * @return void
     */
    public static function register()
    {
        error_reporting(E_ALL);
        set_error_handler([__CLASS__, 'appError']);
        set_exception_handler([__CLASS__, 'appException']);
        register_shutdown_function([__CLASS__, 'appShutdown']);
    }
</code></pre>

再顺着看 <code>appException</code> 方法，发现使用了 <code>self::getExceptionHandler()</code> 获取异常处理对象，对象是由变量 <code>self::$exceptionHandler</code> 决定的，默认 <code>\\think\\exception\\Handle</code>

<pre><code class="language-php line-numbers">    /**
     * 注册异常处理
     * @access public
     * @return void
     */
    public static function register()
    {
        error_reporting(E_ALL);
        set_error_handler([__CLASS__, 'appError']);
        set_exception_handler([__CLASS__, 'appException']);
        register_shutdown_function([__CLASS__, 'appShutdown']);
    }
    /**
     * Exception Handler
     * @access public
     * @param  \Exception|\Throwable $e
     */
    public static function appException($e)
    {
        if (!$e instanceof \Exception) {
            $e = new ThrowableError($e);
        }

        self::getExceptionHandler()-&gt;report($e);

        if (PHP_SAPI == 'cli') {
            self::getExceptionHandler()-&gt;renderForConsole(new ConsoleOutput, $e);
        } else {
            self::getExceptionHandler()-&gt;render($e)-&gt;send();
        }
    }
</code></pre>

看到这里并没有看到 <code>app.php</code> 中的 <code>exception.handler</code> 如何发挥作用的，那么继续往下看，由于 <code>self::$exceptionHandler</code> 由 <code>setExceptionHandler</code> 决定，透过编辑器可以找到其调用方如下图所示：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/69a4786f0b48d4cc4439fd6bbf677380.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/69a4786f0b48d4cc4439fd6bbf677380.png" alt="" /></a>
在 <code>thinkphp/library/think/App.php</code> 的 <code>initialize()</code> 中，可看到如下所示代码

<pre><code class="language-php line-numbers">// 注册异常处理类
if ($this-&gt;config('app.exception_handle')) {
    Error::setExceptionHandler($this-&gt;config('app.exception_handle'));
}
</code></pre>

<code>initialize()</code> 是在应用启动时(执行 <code>run()</code>)执行的初始化函数，
<code>public/index.php</code>

<pre><code class="language-php line-numbers">&lt;?php
// [ 应用入口文件 ]
namespace think;

// 加载基础文件
require __DIR__ . '/../thinkphp/base.php';

// 支持事先使用静态方法设置Request对象和Config对象

// 执行应用并响应
Container::get('app')-&gt;run()-&gt;send();
</code></pre>

<code>App.php</code>

<pre><code class="language-php line-numbers">   /**
     * 执行应用程序
     * @access public
     * @return Response
     * @throws Exception
     */
    public function run()
    {
        try {
            // 初始化应用
            $this-&gt;initialize();

            // 监听app_init
            $this-&gt;hook-&gt;listen('app_init');
        }
    }
</code></pre>

以及在同文件的 <code>containerConfigUpdate()</code> 中也能看到类似代码

<pre><code class="language-php line-numbers">$config = $this-&gt;config-&gt;get();

// 注册异常处理类
if ($config['app']['exception_handle']) {
    Error::setExceptionHandler($config['app']['exception_handle']);
}
</code></pre>

这个函数可以顺着 <code>initialize()</code> -> <code>init()</code> -> <code>containerConfigUpdate</code> 找到，作用是对不同模块中的配置进行一次更新

<pre><code class="language-php line-numbers">public function init($model)
{
    // 定位模块目录
    $module = $module ? $module . DIRECTORY_SEPARATOR : '';
    $path   = $this-&gt;appPath . $module;

    // 加载初始化文件
    if (is_file($path . 'init.php')) {
        include $path . 'init.php';
    } elseif (is_file($this-&gt;runtimePath . $module . 'init.php')) {
        include $this-&gt;runtimePath . $module . 'init.php';
    } else {
        // ... 中间代码
    }
    // ... 中间代码
    $this-&gt;setModulePath($path);

    if ($module) {
        // 对容器中的对象实例进行配置更新
        $this-&gt;containerConfigUpdate($module);
    }
}
</code></pre>

<h2>总结</h2>

php中使用 <code>set_exception_handler</code> 处理异常，而Thinkphp5中可在 <code>app.php</code> 中自定义 <code>excpetion_handler</code> 处理类的方式统一方便的处理异常]]></content:encoded>
		<excerpt:encoded><![CDATA[在很多php的项目中，错误信息的输出返回都通过异常抛出的方式进行，特别是在后端校验过程中，或者后端处理过程中突然遇到需要中断程序执行的情况，相比返回`['code' => 999, 'message' => 'error']`，抛出异常无疑更简单明了]]></excerpt:encoded>
		<wp:post_id>508</wp:post_id>
		<wp:post_date><![CDATA[2020-02-23 17:55:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-23 09:55:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[thinkphp5%e7%9a%84%e8%87%aa%e5%ae%9a%e4%b9%89%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<category domain="post_tag" nicename="%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86"><![CDATA[异常处理]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[509]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[120]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>深度学习的数学-神经网络、输入层、隐藏层、输出层</title>
		<link>https://blog.wj2015.com/2020/02/24/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e3%80%81%e8%be%93%e5%85%a5%e5%b1%82%e3%80%81%e9%9a%90%e8%97%8f%e5%b1%82%e3%80%81%e8%be%93%e5%87%ba/</link>
		<pubDate>Mon, 24 Feb 2020 03:28:18 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=513</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

前文中了解到，神经网络由多个神经单元组成，而本篇博客将会了解到深度学习由多个神经网络组成，并且分为 输入层、隐藏层和输出层，隐藏层涉及到的知识点最多，是本文的重点

<h2>正文</h2>

阶层型的神经网络主要结构如下图所示，通过输入层激活信号，再通过隐藏层提取特征，不同隐藏层神经单元对应不同输入层的神经单元权重和自身偏置均可能不同，输入层兴奋传递到隐藏层兴奋，最后输出层根据不同的隐藏层权重和自身偏置输出结果
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/57794a6eae1dcda7e6787b457441e90b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/57794a6eae1dcda7e6787b457441e90b.png" alt="" /></a>

<h3>一个例子</h3>

借用书中的一个例子，目标是识别一个 4 * 3 的黑白图像是0还是1，例子中输入层采用了 12 个神经节点来对应 4 * 3 个像素点，然后隐藏层再使用 3 个神经单元进行特征提取，最后输出层再使用两个神经节点标记识别结果是 0 或 1
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/694cab0316340054b7064a78f29b6921.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/694cab0316340054b7064a78f29b6921.png" alt="" /></a>

<h3>输入层</h3>

如上图所示，十二个神经单元对应 4 * 3 像素（黑白），如果该像素是黑的，则对应神经元兴奋，否则静息

<h3>输出层</h3>

输出层负责输出最后结果，输出层有两个节点，如果识别结果偏向0，那么第一个节点兴奋度会高于第二个节点，如果识别结果偏向1，那么第二个节点兴奋度会高于第一个节点

<h3>隐藏层</h3>

背负了 <strong>特征提取</strong> 的伟大使命，隐藏层每一个节点会对输入层的兴奋有不同的接收权重，从而更加偏向于某种识别模式
比如书中举例，隐藏层第一个神经单元对应下图模式A，也就是对应输入层 4、7号神经单元接收权重比较高，对其他神经单元接受权重比较低，如果超过了神经单元自身的偏置（阈值）则会引发隐藏层的兴奋，向输出层传递兴奋信息，隐藏层其他神经单元同理
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/1ba3c811916d63e63d59a20193fc629d.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/1ba3c811916d63e63d59a20193fc629d.png" alt="" /></a>

<h3>各个层如何向上传递信息</h3>

根据上边的介绍可知，输入层每个神经单元直接对应原始数据，然后向隐藏层提供信息，隐藏层每个神经单元对不同的输入层神经单元有不同的权重，从而偏向于对某种识别模式兴奋；多个隐藏层的神经单元兴奋后，输出层的神经单元根据不同隐藏层的兴奋加上权重后，给到不同的兴奋度，这个兴奋度就是模型最终识别的结果。

<h4>神经网络中权重和偏置的作用</h4>

根据上述信息可知，权重会影响神经单元对输入信息敏感程度，比如隐藏层的神经单元通过控制权重形成识别模式偏向，输出层的神经单元调整对隐藏层神经单元的权重，可以形成输出结果的偏向；
而偏置，可以理解为敏感度，如果没有设置合适的偏置，一些“噪音”就会影响模型识别的结果，或者一些本该被识别出来的场景，但是在传递过程中被屏蔽掉了。

<h4>有监督学习下，如何确认权重</h4>

在这里需要引入一个概念，『损失函数』又称为代价函数（cost function），计算方法为预测值与学习资料中偏差值之和(误差)的平方，有监督学习就是经过一些『学习资料』的训练，让模型预测的『误差』尽量的小。
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/990dc4aabfeec7eac6f907c3b1f9e145.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/990dc4aabfeec7eac6f907c3b1f9e145.png" alt="" /></a>

<h2>总结</h2>

神经网络由多个神经单元组成，深度学习中的神经网络可分为三层，分别是 输入层、隐藏层和输出层，每一层都有对应的神经网络与下一层连接。
输入层主要用于获取输入的信息，比如黑白照片的像素是黑色的还是白色的，大小主要取决于输入信息规模；
隐藏层主要进行『特征提取』，调整权重让隐藏层的神经单元对某种模式形成反应
输出层用于对接隐藏层并输出模型结果，调整权重以对不同的隐藏层神经元刺激形成正确的反应，输出的兴奋度即为结果
其中，偏置（阈值）可以排除一些“噪音”影响，监督学习下通过『损失函数』来衡量模型是否合理，计算方法是 预测值与正解之差(误差) 求和再平方；目标是通过学习资料的训练，让误差更小；]]></content:encoded>
		<excerpt:encoded><![CDATA[前文中了解到，神经网络由多个神经单元组成，而本篇博客将会了解到深度学习由多个神经网络组成，并且分为 输入层、隐藏层和输出层，隐藏层涉及到的知识点最多，是本文的重点]]></excerpt:encoded>
		<wp:post_id>513</wp:post_id>
		<wp:post_date><![CDATA[2020-02-24 11:28:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-24 03:28:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e3%80%81%e8%be%93%e5%85%a5%e5%b1%82%e3%80%81%e9%9a%90%e8%97%8f%e5%b1%82%e3%80%81%e8%be%93%e5%87%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0"><![CDATA[深度学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1430]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[483]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>深度学习的数学-需要了解的函数</title>
		<link>https://blog.wj2015.com/2020/02/25/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e9%9c%80%e8%a6%81%e4%ba%86%e8%a7%a3%e7%9a%84%e5%87%bd%e6%95%b0/</link>
		<pubDate>Tue, 25 Feb 2020 01:46:09 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=518</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本篇博客主要介绍深度学习中需要掌握的函数，包括一次函数、二次函数、单位阶跃函数、指数函数、sigmoid函数等概念

<h2>正文</h2>

<h3>一次函数及多元一次函数</h3>

首先时最基础的一次函数，中学数学告诉我们，一次函数满足表达式 <code>y = a*x + b</code>，其中 <code>a</code> 是斜率表示直线的倾斜程度，<code>b</code>是截距表示x=0时直线与y轴交点的y值
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/7f49ba2a404c907ce7c00cddad317c18.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/7f49ba2a404c907ce7c00cddad317c18.png" alt="" /></a>
在之前的章节中，提到了神经单元会根据多个输入乘以权重，根据是否到达临界值 θ ，从而判断自身是否兴奋，其数学表达式可以表现为如下形式：
<code>z = w1*x1+w2*x2+w3*x3 + ...wn*xn + b</code>
书中提到，由于一次函数的特性，x1,x2,x3...xn 为确认值的时候，输入z，w1,w2,w3...wn,b 是一次函数关系，使用 『误差反向传播法』推导时，会相对简单

<blockquote>
  误差反向传播法
  自从40年代赫布(D.O. Hebb)提出的学习规则以来，人们相继提出了各种各样的学习算法。其中以在1986年Rumelhart等提出的误差反向传播法，即BP(error BackPropagation)法影响最为广泛。
  　BP算法的基本思想是，学习过程由信号的正向传播与误差的反向传播两个过程组成。
  　　1）正向传播：输入样本－>输入层－>各隐层（处理）－>输出层
  　　注1：若输出层实际输出与期望输出（教师信号）不符，则转入2）（误差反向传播过程）。
  　　2）误差反向传播：输出误差（某种形式）－>隐层（逐层）－>输入层 其主要目的是通过将输出误差反传，将误差分摊给各层所有单元，从而获得各层单元的误差信号，进而修正各单元的权值（其过程，是一个权值调整的过程）。
  　　注2：权值调整的过程，也就是网络的学习训练过程（学习也就是这么的由来，权值调整）。
</blockquote>

<h3>二次函数及多元二次函数</h3>

根据中学的数学知识可知，一元二次函数表达式为 <code>y = a*x^2 + b*x + c (a!=0)</code>，函数图像如下，特点是存在一个全局最小值(或最大值)
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/f1ba618a7bebde6e2145b65383151614.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/f1ba618a7bebde6e2145b65383151614.png" alt="" /></a>
而拥有两个变量的二次函数，数学表达式就是这样 <code>y = a*x1^2 + b*x2^2 + c*x1*x2 + p*x1 + q*x2 + r</code>
画在三维坐标系上，就会是这样，依旧能找到y的全局最低点/最高点
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/3b2ef328657f6b5ad0ec03381c8696ef.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/3b2ef328657f6b5ad0ec03381c8696ef.png" alt="" /></a>

<h3>单位阶跃函数</h3>

该函数定义十分简单，x小于0时，函数值为0，x大于等于0时，函数值为1，一般作为激活函数

<blockquote>
  所谓激活函数（Activation Function），就是在人工神经网络的神经元上运行的函数，负责将神经元的输入映射到输出端。
</blockquote>

简单意思就是说，输入需要到达一定的阈值才能被激活，就像之前的神经单元激活函数可以表现为
<code>y = u(w1*x1 + w2*x2 + ... wn*xn - θ)</code>，其中θ就是阈值

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/76f5c00cb373aa7d0c3eeb3fb261f692.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/76f5c00cb373aa7d0c3eeb3fb261f692.png" alt="" /></a>

<h3>指数函数</h3>

指数函数的数学表达式为 <code>y = a^x(a为正常数，且不为1)</code>，<code>a</code> 称为指数函数的底数，其中有一个特殊的底数 e=2.71828，称之为自然对数的底，有很多神奇的性质；
更多关于e的前世今生可以观看这个视频：https://www.bilibili.com/video/av27013943
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/6baeae453330638b118d8ef64e82cf8a.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/6baeae453330638b118d8ef64e82cf8a.png" alt="" /></a>

<h3>sigmoid函数</h3>

sigmoid函数是及学习中非常著名的激活函数，与前方提到的单位阶跃函数不同，<strong>sigmoid函数是光滑的随处可导</strong>，单位阶跃函数在0处不可导
函数表达式如下所示，exp是指数函数的简略记法
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/bcecede6338c8b3c0ecea1d14376d0f8.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/bcecede6338c8b3c0ecea1d14376d0f8.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/1e668337787d386e7cce8bfcc8179d56.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/1e668337787d386e7cce8bfcc8179d56.png" alt="" /></a>

<h3>正态分布</h3>

在实际建模过程中，需要对神经单元的权重和偏置设置初始值，而初始值设置是随机的，使用满足动态分布的随机数，比较容易取得好结果
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/42c0014f7f086e04f12fe54876b0f297.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/42c0014f7f086e04f12fe54876b0f297.png" alt="" /></a>
其中，μ是期望值，σ是标准差，其图形如下，横轴表示样本的值，纵轴表示出现的概率，预测变量时就可以根据概率曲线对其发生的概率进行预测
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/f2f8d6b959f170f8ee9ae8da6796ccba.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/f2f8d6b959f170f8ee9ae8da6796ccba.png" alt="" /></a>

<h2>总结</h2>

本片博客中主要介绍一些函数相关的知识，比较重要的就是 单位阶跃函数和sigmoid函数以及正态分布，还引出了激活函数等概念。]]></content:encoded>
		<excerpt:encoded><![CDATA[本篇博客主要介绍深度学习中需要掌握的函数，包括一次函数、二次函数、单位阶跃函数、指数函数、sigmoid函数等概念]]></excerpt:encoded>
		<wp:post_id>518</wp:post_id>
		<wp:post_date><![CDATA[2020-02-25 09:46:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-25 01:46:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e9%9c%80%e8%a6%81%e4%ba%86%e8%a7%a3%e7%9a%84%e5%87%bd%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[115]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[112]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>深度学习的数学-数列递推和Σ</title>
		<link>https://blog.wj2015.com/2020/02/26/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e6%95%b0%e5%88%97%e9%80%92%e6%8e%a8%e5%92%8c%cf%83/</link>
		<pubDate>Wed, 26 Feb 2020 03:26:28 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=524</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本篇博客主要复习下高中数学中的数列，包括数列的三种表示形式，一种是通项公式，另一种是递推关系式，另一种是联立递推关系式 神经单元的输入计算就涉及到这种递推式；另外还介绍了Σ运算的规则及常用形式。

<h2>正文</h2>

<h3>数列基本概念</h3>

数列是数的序列，比如如下偶数数列

<blockquote>
  2,4,6,8,10
</blockquote>

其中第一个数称为<strong>首项</strong>，第二个数称为<strong>第2项</strong>，第三个数称为<strong>第3项</strong>，第n个数称为<strong>第n项</strong>
如果一个数列是有限项的，那么这个数列被称为<strong>有穷数列</strong>，有穷数列中，最后一项被称为<strong>末项</strong>

<h3>数列的通项公式</h3>

在数列的表示中，一般用 <code>a1</code>表示首项，<code>a2</code>表示第2项，<code>an</code>表示第n项，那么如果有一个式子能将 <code>an</code> 用关于 <code>n</code> 的式子表示出来，那么数列的每一个值就都能得到确定，那么这个式子就叫做数列的<strong>通项公式</strong>

比如，通项公式 an = 2n，那么把 n 从 1 到 n 带入进去，就会得到如下数列

<blockquote>
  2, 4, 6, 8, ...
</blockquote>

比如我们得到了如下数列：

<blockquote>
  1,3,5,7,9, ...
</blockquote>

也很容易就能推断出其通项公式为 <code>an = 2*n-1</code>

<h3>数列的递推关系式</h3>

数列也可以用相邻项来表示，举个最常见的例子，也就是著名的斐波拉契数列，有个特征就是当n>2时，第n项等于第n-1项及n-2项之和

<blockquote>
  1,1,2,3,5,8,13,21,34,55,89,144,.....
</blockquote>

当n = 1或n=2时，数列值为0，当 n > 2 时，
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/80b891031290cc8affe7b048dd1b5acc.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/80b891031290cc8affe7b048dd1b5acc.png" alt="" /></a>

用递推关系式表达这个数列很简单也很容易理解，但如果要用通项公式就会是下图这个样子：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/1f2f6ddd2529ed80bacbe32beeee154b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/1f2f6ddd2529ed80bacbe32beeee154b.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/3e17be8393d898540afd2ef558f68483.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/3e17be8393d898540afd2ef558f68483.png" alt="" /></a>
具体推导方法不做具体介绍，详情可参考百科：https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145?fromtitle=%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97&amp;fromid=10078434&amp;fr=aladdin

计算机比较擅长递推公式的计算，比如斐波拉契序列在 python 中就可以很快速的实现

<pre><code class="language-python line-numbers">arr = [1, 1]
for i in range(2, 12):
    arr.append(a[i - 1] + a[i - 2])
</code></pre>

<h3>数列的联立递推关系式</h3>

参考下书中的例题，其中 a1 = b1 = 1
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/d36678b14e051aed092af24d661601c6.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/d36678b14e051aed092af24d661601c6.png" alt="" /></a>

可以推导出 <code>a2 = a1 + 2*b1 + 2 = 5;b2 = 2*a1 + 3*b1 + 1 = 6;.....</code>
得到两个数列：

<blockquote>
  a = 1, 5, 19, ...
  b = 1, 6, 29, ...
</blockquote>

这就是联立递推式，在程序中也比较好实现

<pre><code class="language-python line-numbers">a = [1]
b = [1]
for i in range(1, 12):
    a.append(a[i-1] + 2*b[i-1] + 2)
    b.append(2*a[i-1] + 3*b[i-1] + 1)
print(a, b)
</code></pre>

<h4>联立递推式在神经网络中的应用</h4>

a(l,j) 表示第l层，第j个神经单元
w(l,jk) 表示第l层，第j个神经元对应上一层第k个神经元
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/759b7cf0ea5cceb7c62ccdca55a83a90.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/759b7cf0ea5cceb7c62ccdca55a83a90.png" alt="" /></a>
以隐藏层到输出层的神经单元信息传递为例，其规则满足如下递推式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/00c5723d5cd1c42bcc3ca80a43a88b9f.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/00c5723d5cd1c42bcc3ca80a43a88b9f.png" alt="" /></a>

<h3>Σ符号的含义</h3>

Σ读作Sigma，表示求和
比如我想对数列 {an} 的<code>首项</code>到<code>第n项</code>求和，那么可以表示为
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/849b2378847b008586e92445f5b92777.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/849b2378847b008586e92445f5b92777.png" alt="" /></a>
其中Σ下方的k=1表示初始值，上方的n表示最终值，右侧的带k的表达式（如：ak），表示取数列中的哪一项

<h4>Σ的几种常见用法</h4>

比如，求数列 a1 + a2 + a3 + a4 + a5 可以这样表示：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/131639e3af4bc2ddacb87af765214098.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/131639e3af4bc2ddacb87af765214098.png" alt="" /></a>
求 1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 + 7^2，可以这样表示：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/a3e7d8b39bec89e49f8e2defcdad9bb9.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/a3e7d8b39bec89e49f8e2defcdad9bb9.png" alt="" /></a>
求 2^1 + 2^2 + ... 2^m，可以这样表示
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/4a5fd894177bb47467181f9da2249243.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/4a5fd894177bb47467181f9da2249243.png" alt="" /></a>

<h4>Σ的几个性质及证明</h4>

Σ具有线性性质，比如 <code>Σ(ak + bk) = Σ(ak) + Σ(bk)</code>,<code>Σ(c*a) = c*Σ(a)</code>
证明过程如下，挺好看懂的
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/85059e447ef824b28a3c38526e582f24.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/85059e447ef824b28a3c38526e582f24.png" alt="" /></a>

<h2>总结</h2>

本篇主要介绍数列相关内容，包括其通项公式表示法、递推表示法、联立递推表示法（重点）；以及Σ的定义、常见用法及性质。]]></content:encoded>
		<excerpt:encoded><![CDATA[本篇博客主要复习下高中数学中的数列，包括数列的三种表示形式，一种是通项公式，另一种是递推关系式，另一种是联立递推关系式 神经单元的输入计算就涉及到这种递推式；另外还介绍了Σ运算的规则及常用形式。]]></excerpt:encoded>
		<wp:post_id>524</wp:post_id>
		<wp:post_date><![CDATA[2020-02-26 11:26:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-26 03:26:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e6%95%b0%e5%88%97%e9%80%92%e6%8e%a8%e5%92%8c%cf%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[212]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[152]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>深度学习的数学-向量与矩阵</title>
		<link>https://blog.wj2015.com/2020/02/26/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%90%91%e9%87%8f%e4%b8%8e%e7%9f%a9%e9%98%b5/</link>
		<pubDate>Wed, 26 Feb 2020 13:44:24 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=527</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本篇主要学习下线代中向量与矩阵相关的知识，包括多维向量内积与机器学习中递推的关系，矩阵的基础概念和计算等；在书中也只提到与机器学习有关联的基础知识点，整体难度不算高；

<h2>正文</h2>

<h3>向量的定义</h3>

假设现在有两个点 A和B，那么 A->B 就是一个<strong>有位置</strong>（A的位置）<strong>有方向</strong>（A指向B的方向）<strong>有大小</strong>（AB线段的长度）的向量
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/71fcf9abe4cf84ccdf69198ee36452be.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/71fcf9abe4cf84ccdf69198ee36452be.png" alt="" /></a>
一个向量可以由如下三种方式表达
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/5eae25838ca2d51298397b331f3dcd95.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/5eae25838ca2d51298397b331f3dcd95.png" alt="" /></a>

<h4>坐标表示</h4>

如果我们建立一个直角坐标系，把A点移动到坐标原点，B点相对A点的位置不变，那么B点的坐标就可以看作是向量 A->B 的坐标表示
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/9dc05c87e6d85424c9dafb5923d78d82.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/9dc05c87e6d85424c9dafb5923d78d82.png" alt="" /></a>
也可以把这个定义推广到三维甚至N维直角坐标系上，下图表示 A(1, 1, 1) 向量
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/985fc8e016335ab5e75cc5ab7310ec7c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/985fc8e016335ab5e75cc5ab7310ec7c.png" alt="" /></a>

<h4>向量的大小</h4>

向量的大小用 |a| 表示，与绝对值符号相同
向量的大小即向量的长度，通过直角坐标系可以很方便的理解，比如 a = (3, 4)，根据勾股定理，该向量的大小就是 5
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/eebd483f2154a38c1a629abb68e290f4.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/eebd483f2154a38c1a629abb68e290f4.png" alt="" /></a>

再推广到三维，a = (1, 2, 2)，那么向量 a 的大小就是：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/8e41f1fd1b9b902f1acb977167f7b704.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/8e41f1fd1b9b902f1acb977167f7b704.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/b80cf4d035409a3f04f44ea88e121fc2.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/b80cf4d035409a3f04f44ea88e121fc2.png" alt="" /></a>

<h3>向量内积</h3>

向量的内积定义为两个向量的大小乘以向量夹角的 cos
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/3adbe84110de2eb8aec197b121aaaeed.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/3adbe84110de2eb8aec197b121aaaeed.png" alt="" /></a>
a和b，只要有一个为0，那么内积就是0
同理，这种解法也适用于三维向量
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/633f2e284855ccfe75ec2c866da93599.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/633f2e284855ccfe75ec2c866da93599.png" alt="" /></a>

<h4>柯西不等式</h4>

因为任意的θ都会另 -1 &lt; cos(θ) &lt; 1，所以很容易推出下面的不等式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/fa8a9531d9237ac930c4ed8fa52d5948.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/fa8a9531d9237ac930c4ed8fa52d5948.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/c49c95822909e699acfca2adce0cdbb9.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/c49c95822909e699acfca2adce0cdbb9.png" alt="" /></a>
结合这个不等式，可以得到如下三种情况
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/5edb3c5e8e9b1bcb6dad9e807a8e299d.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/5edb3c5e8e9b1bcb6dad9e807a8e299d.png" alt="" /></a>

<ul>
<li>两个向量方向相反时，内积最小</li>
<li>两个向量方向相同是，内积最大</li>
<li>两个向量方向夹脚在 0 ~ 180° 时，内积大小会从最大到最小</li>
</ul>

书中特意提到，第一条性质（两个向量方向相反时，内积最小） 是日后梯度下降法的基本原理
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/dfd75925865f3209460b5497e6dc9045.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/dfd75925865f3209460b5497e6dc9045.png" alt="" /></a>

<h4>内积的坐标表示</h4>

还是首先以二维直角坐标系为例，内积可以以坐标的形式进行计算
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/e3bc35d08d0db9e3bead1c576531fd20.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/e3bc35d08d0db9e3bead1c576531fd20.png" alt="" /></a>
三维向量一样有这样的性质
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/d888ad0529ce9a4fbb313a34e108e287.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/d888ad0529ce9a4fbb313a34e108e287.png" alt="" /></a>

<h3>多维向量一般化（重点）</h3>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/e0000b6558885945cf7c390d9c5ea14c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/e0000b6558885945cf7c390d9c5ea14c.png" alt="" /></a>

<blockquote>
  关于推导，我也尝试用我撇脚的数学推算过，算了一两页纸发现越算越复杂，推不出来，找了个别人的推导过程，有兴趣的可以研究下
  https://blog.csdn.net/zhangyingjie09/article/details/88375120
</blockquote>

看到这个向量内积公式，有没有想到之前提到的神经单元的加权输入：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/a91264ac5dc6e42f7cc5abba14738c89.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/a91264ac5dc6e42f7cc5abba14738c89.png" alt="" /></a>

就可以表现为两个向量的内积加上偏置，向量 w = (w1, w2, w3, w4, ...)，x = (x1, x2, x3, x4, ...)，即：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/16524812f6b8be480b6dab3de161fd7f.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/16524812f6b8be480b6dab3de161fd7f.png" alt="" /></a>

<h3>矩阵的定义</h3>

矩阵是数的阵列，横排为行，竖排为列，行数与列数相同称为<strong>方阵</strong>（类比正方形）
以及如下图X,Y所示的 行向量和列向量
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/5a157249ae30df526ab61bc1bae971e5.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/5a157249ae30df526ab61bc1bae971e5.png" alt="" /></a>

可以定义一个 m行n列的向量，第 i 行 j 列的元素用 aij 表示，
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/c5a4aadb6e5914eca1b00ebfaceba22b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/c5a4aadb6e5914eca1b00ebfaceba22b.png" alt="" /></a>

<h4>单位矩阵</h4>

单位矩阵是一个特殊的矩阵，矩阵的斜对角线元素(aii)都是1，其他元素都是0
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/168d1ecbdf5f3d22d37ba15981087de5.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/168d1ecbdf5f3d22d37ba15981087de5.png" alt="" /></a>

<h3>矩阵的运算</h3>

<h4>矩阵比较、和差常数积</h4>

A和B相等的含义是两个矩阵对应的元素包括行数列数完全相等
两个矩阵的和、差、常数倍都符合四则运算，和与差都是相同位置的元素直接进行加减，常数倍的乘法直接乘到对应的元素中去，如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/33844b120320569680c367382817b80d.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/33844b120320569680c367382817b80d.png" alt="" /></a>

<h4>矩阵乘积（重点）</h4>

把<strong>向量A的i行</strong>看作行向量，<strong>向量B的j列</strong>看作列向量，<strong>其内积</strong>作为结果的 <strong>i行j列</strong> 的元素
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/a447cc6278ae257e1687b27e11f17daf.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/a447cc6278ae257e1687b27e11f17daf.png" alt="" /></a>

比如，两个向量乘积计算过程如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/a222c96bf0b5f0a2aea4fd8473ac1b1e.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/a222c96bf0b5f0a2aea4fd8473ac1b1e.png" alt="" /></a>

<h4>哈达玛积</h4>

Hadamard积适用于两个相同形状的矩阵，符号的含义是相同行数相同列数的数相乘，作为新矩阵对应函数和列数的值
下图表现了哈达玛积的计算过程，很直观
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/6a7e83e16e31ab8bf95a9a372bb56ccc.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/6a7e83e16e31ab8bf95a9a372bb56ccc.png" alt="" /></a>

<h4>转置矩阵</h4>

转置矩阵是将矩阵A的i行j列的元素转换为新矩阵的j行i列，转置矩阵在原矩阵左上角加上一个小t表示
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/2dbc8abbdac3f682df11ca709a798b78.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/2dbc8abbdac3f682df11ca709a798b78.png" alt="" /></a>

<h2>总结</h2>

本片博客主要介绍向量和矩阵的基础知识，其中多维向量内积与神经单元加权输入的关系（w = (w1, w2, w3, w4, ...)，b = (x1, x2, x3, x4, ...)，则 z = w*x + b）以及矩阵的乘积计算（i行j列 = A的i行向量与B的j列向量内积）是重点。]]></content:encoded>
		<excerpt:encoded><![CDATA[本篇主要学习下线代中向量与矩阵相关的知识，包括多维向量内积与机器学习中递推的关系，矩阵的基础概念和计算等；在书中也只提到与机器学习有关联的基础知识点，整体难度不算高；]]></excerpt:encoded>
		<wp:post_id>527</wp:post_id>
		<wp:post_date><![CDATA[2020-02-26 21:44:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-26 13:44:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%90%91%e9%87%8f%e4%b8%8e%e7%9f%a9%e9%98%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%90%91%e9%87%8f"><![CDATA[向量]]></category>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e7%9f%a9%e9%98%b5"><![CDATA[矩阵]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_e1e6f74e84848f49a39415d3ae7c48c7]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[266]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[165]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1271</wp:comment_id>
			<wp:comment_author><![CDATA[深度学习的数学-向量与矩阵 - 算法网]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://itpcb.com/a/971764</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.128.14.191]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-08-09 06:05:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-08-08 22:05:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 排版可能更好一点的永久原文链接：深度学习的数学-向量与矩阵 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1628684776.627432;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1628460331]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1628460331.823526;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>深度学习的数学-导数和偏导数</title>
		<link>https://blog.wj2015.com/2020/02/27/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%af%bc%e6%95%b0%e5%92%8c%e5%81%8f%e5%af%bc%e6%95%b0/</link>
		<pubDate>Thu, 27 Feb 2020 09:01:37 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=530</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本章主要记录机器学习里边比较重要且非常容易成为初学者拦路虎（没错就是博主我）的一个数学概念：导数和偏导数

<h2>正文</h2>

<h3>导数的定义</h3>

对于一个函数 f(x)，其导数的定义如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/01cc6087affe132f17585a75d58ccc41.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/01cc6087affe132f17585a75d58ccc41.png" alt="" /></a>
其中 lim Δx->0，表示右侧表达式在 Δx 趋近0的时候，应该是一个什么样的结果，比如 <code>f(x) = 3x</code> 的导数求解过程如下
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/13844196e8373aa55df4e0c45170d35c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/13844196e8373aa55df4e0c45170d35c.png" alt="" /></a>
已知函数<strong>f(x)</strong> ，求其 <strong>导函数</strong> 的过程叫做求导，当导函数的值存在的时候，称为函数<code>f(x)</code> 可导

<h4>导数的含义及常见函数导数</h4>

导数的含义在坐标系中表现为连续函数某一点的切线(l)的斜率，当Q无线接近于P的时候，PQ的斜率就无限接近切线l的斜率
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/7f903b27f9759cb09a3b944773b9ec77.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/7f903b27f9759cb09a3b944773b9ec77.png" alt="" /></a>

常见函数的导数公式：

<ul>
<li>(c)' = 0</li>
<li>(x)' = 1</li>
<li>(x^2)' = 2x</li>
<li>(x^3)' = 3x^2</li>
<li>(e^x)' = e^x</li>
<li>(e^(-x)) = - e^(-x)</li>
</ul>

<h3>导数的性质</h3>

导数具有线性的性质，即<strong>“和的导数为导数的和，常数倍的导数为导数的常数倍”</strong>，也就是如下图所示的公式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/93ec710822039f88c2cce4a030362ee7.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/93ec710822039f88c2cce4a030362ee7.png" alt="" /></a>

举个栗子，用导数的性质来求一个函数<code>f(x) = (2 - y)^2</code>，如果不用导数公式与式子，直接用定义 <code>f'(x) = (f(x + Δx) - f(x))/(Δx)</code> 的话，得算一分钟（说的就是博主本人）；
但是拆分多项时候，配合性质，几乎是一眼就能看出答案，过程如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/9fd0b2596b03c1b9686ae6324829f5b3.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/9fd0b2596b03c1b9686ae6324829f5b3.png" alt="" /></a>

<h3>分数的求导</h3>

分数的求导涉及到一个公式，并且在函数相关的博客中提到的 sigmoid 函数就比较适合用这种方式置换求导
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/a78b128af5564b4c8745443040223f6d.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/a78b128af5564b4c8745443040223f6d.png" alt="" /></a>

<blockquote>
  注：f(x) != 0
</blockquote>

而著名的激活函数 sigmoid，其定义如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/4fa13db796167ffa7832a39e817db574.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/4fa13db796167ffa7832a39e817db574.png" alt="" /></a>
可以用 <code>f(x) = 1 + e^(-x)</code> 带入到式子中，以分数求导的形式变换出如下格式的导数
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/642d8a1a30d864fd078de61829cbca51.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/642d8a1a30d864fd078de61829cbca51.png" alt="" /></a>
书中的变换过程如下，还是比较容易看懂的
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/6560910050bd007a707acea0638feddb.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/6560910050bd007a707acea0638feddb.png" alt="" /></a>

<h3>导数和函数最小值的关系（重点）</h3>

由于导数表示函数 <code>f(x)</code> 在点 x 处的斜率，那么不难想到，<code>f(x)</code> 在导数 <code>f'(x) = 0</code> 时函数切线斜率为0，与x轴平行，只会是如下几种情况之一

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/86a9740f204dd8770040d7cc35a3cfe8.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/86a9740f204dd8770040d7cc35a3cfe8.png" alt="" /></a>

那么可以推算出 <code>f'(a) = 0</code> 就是 <code>f(x)</code> 在 <code>x=a</code> 时最小值的必要条件

<blockquote>
  必要条件的定义：已知命题p、q，由p可以推出q，则q称为p的必要条件。
  意思是 f'(a) = 0 的时候，函数值f(a)不一定是最小值，但是当 f(a)是最小值的时候，f'(a) 一定为0
</blockquote>

<h4>函数的增减表</h4>

这时候，不知道各位脑海中是否还记得高中数学老师一再叮嘱的，求函数极值的时候一定要出现的一个表，叫 <strong>函数的增减表</strong>

以 <code>f(x) = 3*x^4-4*x^3-12*x^2+32</code> 函数为例，根据公式很容易就求出其导数为
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/32dc5b2410c56c529d9ea39147408596.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/32dc5b2410c56c529d9ea39147408596.png" alt="" /></a>

根据导数的特点，不难看出当 x=0,x=-1,x=2 时，导数取0，再在不同区间内随意取值判断导数正负，得到如下增减表
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/e6d04b829313e92f8a6d5376d9c06407.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/e6d04b829313e92f8a6d5376d9c06407.png" alt="" /></a>

根据增减表，可以得出f(x)的大概图像如下
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/dea44126bacd6f2dfb1ca3625612b017.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/dea44126bacd6f2dfb1ca3625612b017.png" alt="" /></a>

于是乎，当 x=2 的时候 <code>f(2) = 0</code> 是整个函数的极小值

<h3>偏导数</h3>

前边的博文主要在讲述一个自变量 x 如何求导数，但是神经网络里边的输入、权重、偏置都是一个可以调整的变量，那么多个自变量应该怎么求导呢？

<h4>多变量函数</h4>

在了解偏导数之前，先看一下多变量函数，含有多个自变量的函数就叫做多变量函数，多变量函数很难直观化，特别是超过两个自变量的函数

比如 <code>z = x^2 + y^2</code> 的图像长这样：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/e0a73c45152c2d688fb80dd96a9f335c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/e0a73c45152c2d688fb80dd96a9f335c.png" alt="" /></a>

<h4>偏导数的求解（重点）</h4>

偏导数故名思意，就是存在多个自变量（如：x,y,z）时，针对某一个变量进行求导，其他变量统统视为常数得到的结果
比如，关于函数 f(x,y)，其<strong>关于x的偏导数</strong> 定义如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/3af0c3e59d7e2022121478d21370cb5f.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/3af0c3e59d7e2022121478d21370cb5f.png" alt="" /></a>
<strong>关于y的偏导数</strong>定义如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/e365401c62f244538b789540bd2b2e5c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/e365401c62f244538b789540bd2b2e5c.png" alt="" /></a>
比如说 <code>z=w1*x1 + w2*x2 + b</code> 求关于 x1,w1,b 的偏导数，将非相关的变量都视作常数，很容易得到如下结果
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/8f985fe64f73de6feed784ce4e82e844.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/8f985fe64f73de6feed784ce4e82e844.png" alt="" /></a>

<h4>多变量函数的极值问题（重点）</h4>

多变量的最小值与单变量的最小值有异曲同工之妙，也有一个类似的必要条件，在函数的极值点，每个自变量的偏导数都是0
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/ab5ee2a9012b2ef56f68824dead44b07.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/ab5ee2a9012b2ef56f68824dead44b07.png" alt="" /></a>
分别求偏导数，斜率均为0时，函数整体取极值
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/c353e406c7634215dfb081c1129438f4.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/c353e406c7634215dfb081c1129438f4.png" alt="" /></a>

比如 <code>z = x^2+y^2</code>，求关于 x,y 的偏导数如下，极值就会在 x=0,y=0 处，与图像相符
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/63584e9979e3156453b956fb0da98fb7.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/63584e9979e3156453b956fb0da98fb7.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/e0a73c45152c2d688fb80dd96a9f335c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/e0a73c45152c2d688fb80dd96a9f335c.png" alt="" /></a>

<h4>躲不掉的拉格朗日</h4>

以博主贫瘠的高数基础，拉格朗日就只知道这个很有名，但就是不知道到底是啥
首先来看一波拉格朗日乘数法的介绍和定义

<blockquote>
  在数学中的最优化问题中，拉格朗日乘数法（以数学家Joseph-Louis Lagrange命名）是一种寻找多元函数在其变量受到一个或多个条件的约束时的极值的方法。
</blockquote>

现在有一个变量约束条件，需要求一个函数的极值，比如

<blockquote>
  当x^2+y^2=1时，求x+y的最小值。
</blockquote>

那么应该怎么求解呢，首先约束条件看可以看作一个函数 <code>g(x,y) = x^2+y^2</code>、<code>g(x,y) = C</code> 的形式，求 <code>f(x) = x + y</code> 的极小值

首先，按照下列规则构建一个函数 L，其中的 fx 就是期望求极小值的fx，gx就是约束条件 c 就是约束条件等于的常数项
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/382181ec7ecb842e67716b912bde19ee.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/382181ec7ecb842e67716b912bde19ee.png" alt="" /></a>

以前面一个式子为例，对构建的函数L关于 x,y 分别求偏导数，均令其等于0，得到两个式子，再通过 <code>g(x,y) = C</code> 得到第三个式子
联立解出 x,y,λ即可
书中的求解过程如下所示
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/4c44c3fce4bbe60930cd5cdb22291e4f.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/4c44c3fce4bbe60930cd5cdb22291e4f.png" alt="" /></a>

<h2>总结</h2>

本篇主要介绍了导数和偏导数的特点和求解，以及导数与函数增减性和极值的联系，像延展出来的多变量函数的极值求解问题以及拉格朗日乘数法，在日后神经网络的计算中均会得到体现。]]></content:encoded>
		<excerpt:encoded><![CDATA[本篇主要介绍了导数和偏导数的特点和求解，以及导数与函数增减性和极值的联系，像延展出来的多变量函数的极值求解问题以及拉格朗日乘数法，在日后神经网络的计算中均会得到体现。]]></excerpt:encoded>
		<wp:post_id>530</wp:post_id>
		<wp:post_date><![CDATA[2020-02-27 17:01:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-27 09:01:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%af%bc%e6%95%b0%e5%92%8c%e5%81%8f%e5%af%bc%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%81%8f%e5%af%bc%e6%95%b0"><![CDATA[偏导数]]></category>
		<category domain="post_tag" nicename="%e5%a4%9a%e5%8f%98%e9%87%8f%e5%87%bd%e6%95%b0"><![CDATA[多变量函数]]></category>
		<category domain="post_tag" nicename="%e5%af%bc%e6%95%b0"><![CDATA[导数]]></category>
		<category domain="post_tag" nicename="%e6%8b%89%e6%a0%bc%e6%9c%97%e6%97%a5"><![CDATA[拉格朗日]]></category>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%9e%81%e5%80%bc"><![CDATA[极值]]></category>
		<category domain="post_tag" nicename="%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0"><![CDATA[深度学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[591]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[249]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>深度学习的数学原理-复杂函数求导的链式传递及多变量近似公式</title>
		<link>https://blog.wj2015.com/2020/02/28/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6%e5%8e%9f%e7%90%86-%e5%a4%8d%e6%9d%82%e5%87%bd%e6%95%b0%e6%b1%82%e5%af%bc%e7%9a%84%e9%93%be%e5%bc%8f%e4%bc%a0%e9%80%92%e5%8f%8a%e5%a4%9a/</link>
		<pubDate>Fri, 28 Feb 2020 06:06:55 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=535</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

前文中对导数、偏导数已经有了概念并能进行简单计算，本篇主要介绍单变量和多变量的复合函数如何求导，以及近似公式的计算

<h2>正文</h2>

<h3>复杂函数求导</h3>

如果一个函数比较复杂，无论是用公式也好，还是用导数的定义强算也好，都比较麻烦，于是书中又介绍了关于复合函数的快速求导方法（高中数学知识），以及扩展了多变量复合函数的链式法则。

<h4>神经网络中的复合函数</h4>

这里又祭出那个十分熟悉的公式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/d82257e59778f41c417cce7cc8f2467b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/d82257e59778f41c417cce7cc8f2467b.png" alt="" /></a>

<blockquote>
  w1, w2, …, wn为各输入对应的权重，b为神经单元的偏置。输出函数是如下的x1, x2, …, xn的一次函数f和激活函数a的复合函数。
</blockquote>

可以把这个函数看为两个函数的复合函数
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/56817e2d494d4ea7ce55454a4d223fff.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/56817e2d494d4ea7ce55454a4d223fff.png" alt="" /></a>

<h4>单变量复合函数链式法则</h4>

当已知 <code>y = f(u)</code> <code>u = g(x)</code>，其导数可以依照下方所示的公式进行计算
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/fba40b6051139354f5d4e505a1ae187b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/fba40b6051139354f5d4e505a1ae187b.png" alt="" /></a>
仅看公式可能看不太明白，可以看一下书中的例题，例题中的符号有点难打，就直接贴图了。
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/4e9c77057da4ab5c2b73634c9fb81270.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/4e9c77057da4ab5c2b73634c9fb81270.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/458b99389277462a23f87e656fa616b8.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/458b99389277462a23f87e656fa616b8.png" alt="" /></a>

<h4>多变量函数链式法则</h4>

多变量函数的偏导数求导，也有一个链式法则。
比如变量<strong>z为u、v的函数</strong>，如果<strong>u、v分别为x、y的函数</strong>，则z为x、y的函数，<strong>z关于x求导</strong>时，先对<strong>u、v求导</strong>，然后<strong>与z的相应导数相乘</strong>，最后将乘积加起来。
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/b4602851640d4c47fe5b846f7d1b3c85.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/b4602851640d4c47fe5b846f7d1b3c85.png" alt="" /></a>

<h3>函数的近似公式</h3>

个人看下来，觉着作用是减少计算机计算量，书中强调这是梯度下降法的基础；

<h4>单变量函数的近似公式</h4>

根据导数公式，Δx->0 的时候，解出来的式子就是其一阶导数，如果Δ的值很小，那么下面的式子是成立的
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/72e85f5edc1109b13c15d3adfe7cd23d.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/72e85f5edc1109b13c15d3adfe7cd23d.png" alt="" /></a>
此时，将 f(x+Δx) 转换出来，就成了下面这个样子，这个式子就叫做<strong>单变量函数的近似公式</strong>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/2c94ffba3bb552b2bfd6815ae00a2068.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/2c94ffba3bb552b2bfd6815ae00a2068.png" alt="" /></a>
那么这个式子有什么用处呢？通过一个栗子来看一下

<blockquote>
  当f(x)=ex时，求x=0附近的近似公式。
</blockquote>

根据公式可以得到如下的结果：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/976bd20640884f6a69202151ccdcef22.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/976bd20640884f6a69202151ccdcef22.png" alt="" /></a>
取 x = 0，再将Δx换成X，可得到 <code>e^x = 1+x</code>
在图形中有这样的含义，意思是 x=0 的时候 e^x 与 1+x 的结果相似：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/aa9c59a2c191e5acff21d9dde0f5f95e.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/aa9c59a2c191e5acff21d9dde0f5f95e.png" alt="" /></a>

<h4>多变量函数的近似公式</h4>

这个公式可能比较好理解，但是不大好推导，x和y分别变化一个较小的数，其结果与 f(x, y) + x的偏导数<em>Δx + y的偏导数</em>Δy 近似相同
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/f51db77b8ec0078a49f26c3755a5e747.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/f51db77b8ec0078a49f26c3755a5e747.png" alt="" /></a>

可以通过书中的一个例子来理解这个公式

<blockquote>
  举个例子：当z=e^(x+y)时，求x=y=0附近的近似公式
</blockquote>

按照公式，不难得出 <code>f(x+Δx, y+Δy) = e^(x+y) + e^(x+y)*Δx + e^(x+y)*Δy = e^(x+y)*(1+Δx+Δy)</code>
带入 x+y = 0，并将 Δx 换为 x ，Δy 换成 y 即可
<code>1 + x + y</code>

书中还提到了简化多变量函数近似公式的方法，首先有个 Δz 定义为x和y同时进行一个很小的变化与原函数值的差值
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/8d48d500dfd6c487706b0546526d4e64.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/8d48d500dfd6c487706b0546526d4e64.png" alt="" /></a>

那么根据公式以及上述定义进行一下变换，可以得到
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/7c9d6e385d5d4af379fb86184dcab242.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/7c9d6e385d5d4af379fb86184dcab242.png" alt="" /></a>
再对变量数量进行推广
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/92f52441bc4f316d7f91217e34468534.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/92f52441bc4f316d7f91217e34468534.png" alt="" /></a>

有没有很眼熟，是不是很像向量的内积，所以书中又提到了这个公式可以用向量内积的形式体现
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/2b304a537c0dbcb4ebd57c56d670cede.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/2b304a537c0dbcb4ebd57c56d670cede.png" alt="" /></a>

<h2>总结</h2>

主要介绍了单变量和多变量复合函数求导，还有单变量和多变量的近似公式及其向量内积表示，为日后梯度下降的学习打下基础。]]></content:encoded>
		<excerpt:encoded><![CDATA[前文中对导数、偏导数已经有了概念并能进行简单计算，本篇主要介绍单变量和多变量的复杂函数]]></excerpt:encoded>
		<wp:post_id>535</wp:post_id>
		<wp:post_date><![CDATA[2020-02-28 14:06:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-28 06:06:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6%e5%8e%9f%e7%90%86-%e5%a4%8d%e6%9d%82%e5%87%bd%e6%95%b0%e6%b1%82%e5%af%bc%e7%9a%84%e9%93%be%e5%bc%8f%e4%bc%a0%e9%80%92%e5%8f%8a%e5%a4%9a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%a4%8d%e5%90%88%e5%87%bd%e6%95%b0%e6%b1%82%e5%af%bc"><![CDATA[复合函数求导]]></category>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d"><![CDATA[梯度下降]]></category>
		<category domain="post_tag" nicename="%e8%bf%91%e4%bc%bc%e5%85%ac%e5%bc%8f"><![CDATA[近似公式]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[483]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[287]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>344</wp:comment_id>
			<wp:comment_author><![CDATA[深度学习的数学-神经单元误差和反向传播 &#8211; Jeffrey Wang的个人博客]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com/2020/03/09/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e5%8d%95%e5%85%83%e8%af%af%e5%b7%ae%e5%92%8c%e5%8f%8d%e5%90%91%e4%bc%a0%e6%92%ad/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[123.206.67.59]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-03-09 11:49:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-03-09 03:49:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 在看推导之前，可以先复习一下单变量和多变量偏导数公式，可以参考之前写的一篇博客 深度学习的数学原理-复杂函数求导的链式传递及多变量近似公式 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1583726720.499408;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1583725776]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1583725776.155696;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>深度学习的数学-梯度下降</title>
		<link>https://blog.wj2015.com/2020/03/01/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d/</link>
		<pubDate>Sun, 01 Mar 2020 05:18:54 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=537</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本篇主要讲解一个机器学习中很重要但又很基础的概念：梯度下降，经常用于寻找最小值，在近似公式和向量内积的基础上很容易理解

<h2>正文</h2>

<h3>需要解决的问题和思路</h3>

首先，梯度下降是为了渐进的寻找最小值，根据书中的例子，如果我们知道了一个函数 <code>z = x^2 + y^2</code>，期望知道当 x 和 y 取什么值的时候，z 取值最小

根据之前偏导数学到的概念，z 关于 x 的偏导数为0，z 关于 y 的偏导数为0，是函数取最小值的<strong>必要条件</strong>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/c17c82b7ceea9fed4834a8f92d9b84cd.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/c17c82b7ceea9fed4834a8f92d9b84cd.png" alt="" /></a>

求解出来 x=0,y=0，对应图中的最低点
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/f8532ab830d9da64c9540ea53fb95a58.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/f8532ab830d9da64c9540ea53fb95a58.png" alt="" /></a>

这个方程相对计算机来说比较难解，需要首先求出偏导数，再进行多元方程求解过程；

<h3>近似公式和向量内积</h3>

在了解梯度下降采用的思路前，先复习下近似公式和向量内积
上一篇关于近似公式的博客讲到 Δz 定义如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/ee9e5b35c3ffe7fde5ca07097b396b8b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/ee9e5b35c3ffe7fde5ca07097b396b8b.png" alt="" /></a>
根据近似公式可以得到：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/afcb2d74c4f83efbda69768f029f2e36.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/afcb2d74c4f83efbda69768f029f2e36.png" alt="" /></a>
还有其向量形式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/cce9e21c3b66a822b73c9103ac09aac3.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/cce9e21c3b66a822b73c9103ac09aac3.png" alt="" /></a>

向量内积就联想到了向量内积的最小值性质，在a,b向量反向的时候，内积最小，同向的时候内积最大
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/000e87c4d3a65040e2eb19948735512d.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/000e87c4d3a65040e2eb19948735512d.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/cdbbbb90c79ecc9c03aa55c645243f54.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/cdbbbb90c79ecc9c03aa55c645243f54.png" alt="" /></a>

单独拿出这两个式子可能并不能立马让脑袋里电光火石，那么观察下面这张图，思考一下如果我们在 (x,y)点 <strong>让Δz最小，是否意味着 x 变动Δx，y变动Δy之后，函数下降最快</strong>（把Δz想成负的），就越快逼近极值点

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/f82d1eab65525c73f494c0d249a7c787.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/f82d1eab65525c73f494c0d249a7c787.png" alt="" /></a>

两个向量内积最小，自然是两个向量方向相反的时候，所以就自然而然的推出来二变量函数的梯度下降基本式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/e0debc4e5d5f98b354cdcef761c3f4a6.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/e0debc4e5d5f98b354cdcef761c3f4a6.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/4f9b25d0b42ef074a3aaf5e7653e23f4.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/4f9b25d0b42ef074a3aaf5e7653e23f4.png" alt="" /></a>

就像是我们在函数的顶部扔了一个小球，每次球运动的时候，都会顺着下降最快的方向运动一定距离，然后停下来重新计算下降最快的运动方向和距离，最后得到的运动轨迹就像R1一般，以最快的方向和位置下降到最低点
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/790d46b4b9c0842251e310f1325e9756.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/790d46b4b9c0842251e310f1325e9756.png" alt="" /></a>

<h3>多变量下的梯度下降法（重点）</h3>

上面主要理解了下两个变量的梯度下降法，主要是因为二维或三维图像相对比较好画并且好理解，但是深度学习中，变量维度非常多，所以只是一个或两个变量的梯度下降需要推广到多变量中。

书中的定义如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/3ef342a0ab7357f9b041fe955afbc811.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/3ef342a0ab7357f9b041fe955afbc811.png" alt="" /></a>
其中f在点(x1, x2, …, xn)处的梯度如下图所示
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/8261b4cfe7bf95b66faeb20eb0e7f1bc.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/8261b4cfe7bf95b66faeb20eb0e7f1bc.png" alt="" /></a>

所以在深度下降的过程中，只需要算出梯度把每个变量都改变 Δxn，即可逐渐逼近极值
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/40b87bd8432f123f9bf981b245845d1d.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/40b87bd8432f123f9bf981b245845d1d.png" alt="" /></a>

<h4>哈密顿算子▽</h4>

为了简化表示，书中降到了哈密顿算子▽，其定义如下
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/bba93390c9574ecef8b6d838a5aa05f0.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/bba93390c9574ecef8b6d838a5aa05f0.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/1c2e600c8f8f0d2b98447ef0507cf2d9.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/1c2e600c8f8f0d2b98447ef0507cf2d9.png" alt="" /></a>

所以梯度下降公式可以简化的表示为
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/09eae33633f78b24e9bb299b20c88d83.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/09eae33633f78b24e9bb299b20c88d83.png" alt="" /></a>

<h4>η的含义</h4>

可以看到 η 在式子中是一个大于1的微小常数，会影响每次位移的距离（书中形象的比喻为“步长”）
而这个值如果设置过大，可能就会导致越过极值点（因为每次走的步子太大了），反之可能困在非极值点（因为每次走的步子太小了，跨越不过去），据书中所述，这个参数被称为<strong>学习率</strong>，目前还没有一个具体的标准，需要不断地尝试从而获取到最优值。
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/784e7506d802e8bf06eb3ffa33d0b7b0.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/784e7506d802e8bf06eb3ffa33d0b7b0.png" alt="" /></a>
书中还特意说明了下用η代表步长是不严谨的，因为每次运动时，梯度的大小不一样（向量的大小，用根号x1^2+x2^2...xn^2计算），所以如下公式中的η才是步长
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/313b88c8c9665b2766446095e892bad4.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/313b88c8c9665b2766446095e892bad4.png" alt="" /></a>

<h2>总结</h2>

主要介绍了什么是梯度，如何通过让一个函数通过每一点的梯度向量和学习率η趋近于极值，还通过二变量下的梯度下降法推广到适用于神经网络的多变量下的梯度下降法]]></content:encoded>
		<excerpt:encoded><![CDATA[主要介绍了什么是梯度，如何通过让一个函数通过每一点的梯度向量和学习率η趋近于极值，还通过二变量下的梯度下降法推广到适用于神经网络的多变量下的梯度下降法]]></excerpt:encoded>
		<wp:post_id>537</wp:post_id>
		<wp:post_date><![CDATA[2020-03-01 13:18:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-01 05:18:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d"><![CDATA[梯度下降]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[178]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>333</wp:comment_id>
			<wp:comment_author><![CDATA[深度学习的数学-神经网络关系式、代价函数最优化 &#8211; Jeffrey Wang的个人博客]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com/2020/03/03/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e5%85%b3%e7%b3%bb%e5%bc%8f%e3%80%81%e4%bb%a3%e4%bb%b7%e5%87%bd%e</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[123.206.67.59]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-03-04 10:24:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-03-04 02:24:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 但是在实际的训练过程中，求导数的计算量比较大，更多是采用梯度下降的方式去求极值 之前也写了相关博客可供参考 深度学习的数学-梯度下降 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1583288662]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1583288662.509806;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1583289031.624668;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>350</wp:comment_id>
			<wp:comment_author><![CDATA[深度学习的数学-卷积神经网络的误差反向传播 &#8211; Jeffrey Wang的个人博客]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com/2020/03/12/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e7%9a%84%e8%af%af%e5%b7%ae%e5%8f%8d%e5%90%91%e</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[123.206.67.59]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-03-12 18:38:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-03-12 10:38:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 梯度下降如果有些忘了的话，链接在此：深度学习的数学-梯度下降 梯度就可以看作是代价函数的导数整体下降速度最快的分量，每个变量只需要顺着梯度做减法，即可以最快速度达到整体极值点的位置 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1584010046.021259;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1584009515]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1584009515.781899;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>652</wp:comment_id>
			<wp:comment_author><![CDATA[深度学习的数学-神经单元误差和反向传播 &#8211; Jeffrey Wang的个人博客]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com/2020/03/09/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e5%8d%95%e5%85%83%e8%af%af%e5%b7%ae%e5%92%8c%e5%8f%8d%e5%90%91%e4%bc%a0%e6%92%ad/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[123.206.67.59]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-12-21 13:26:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-12-21 05:26:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 之前提到的梯度下降法，可以通过算偏导数的形式来获得梯度，从而以最快的速度把所有偏导数降到0 但是有一个比较麻烦的问题是，神经网络的规模比较大，将平方误差的式子化简到以神经单元的权重和偏置的表示就很麻烦了，更别说还要对每个权重和梯度做偏导数 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1608528363]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608528363.366896;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608528944.176658;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>树莓派基于Docker快速搭建nextcloud，附性能测试</title>
		<link>https://blog.wj2015.com/2020/07/02/%e6%a0%91%e8%8e%93%e6%b4%be%e5%9f%ba%e4%ba%8edocker%e5%bf%ab%e9%80%9f%e6%90%ad%e5%bb%banextcloud%ef%bc%8c%e9%99%84%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95/</link>
		<pubDate>Thu, 02 Jul 2020 01:39:37 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=540</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

一年前兴起买的树莓派3B+，一番折腾最后成为了家里的电视投屏盒子（OSMC系统），我的自建云盘放在云服务器上，50G的空间快被塞满了，于是就想起来把尘封数月的树莓派复活过来，搭建一个 nextcloud，并且把之前的数据迁移过去。

<h2>正文</h2>

<h3>树莓派刷系统</h3>

如果与我一样有把树莓派作为电视盒子的需求的话，这里怒推一波 OSMC，使用了一年多稳定性还挺好的
链接在此：https://osmc.tv/download/
或者使用官方的 Raspbian ，属于比较纯粹的环境
链接在此：https://www.raspberrypi.org/downloads/

下载好的系统使用 win32diskimager 刷入内存卡即可，十分简单，这里贴一个安装链接供参考
https://www.jianshu.com/p/a337ccae5d2b

<h3>环境准备</h3>

首先，ssh进入树莓派，如果是 OSMC 系统的话，用户名和密码都是osmc
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/d2db55614f17f5a966cbdf47c7f359fd.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/d2db55614f17f5a966cbdf47c7f359fd.png" alt="" /></a>

连接结果如下：

<pre><code class="language-shell line-numbers">Connecting to 192.168.3.7:22...
Connection established.
To escape to local shell, press 'Ctrl+Alt+]'.

WARNING! The remote SSH server rejected X11 forwarding request.
Linux jeffrey 4.19.55-6-osmc #1 SMP PREEMPT Sun Nov 3 22:15:28 UTC 2019 armv7l

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Mon Mar  2 11:00:03 2020 from 192.168.3.10
osmc@jeffrey:~$
</code></pre>

<h4>调整时区</h4>

<pre><code class="language-shell line-numbers">root@osmc:/home/osmc/rasp-tools/frp_client# timedatectl set-timezone Asia/Shanghai
root@osmc:/home/osmc/rasp-tools/frp_client# date -R
Fri, 03 Apr 2020 12:38:43 +0800
root@osmc:/home/osmc/rasp-tools/frp_client# date
Fri Apr  3 12:38:47 CST 2020
</code></pre>

<h4>Docker安装</h4>

这里参考了这篇博客：https://docker_practice.gitee.io/install/raspberry-pi.html
整理下来，直接执行如下两行命令即可

<pre><code class="language-shell line-numbers">$ curl -fsSL get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh --mirror Aliyun
</code></pre>

<blockquote>
  如果是用的 osmc 系统，执行脚本会报如下错误：
</blockquote>

<pre><code class="language-shell line-numbers">osmc@jeffrey:~/rasp-tools$ sudo sh get-docker.sh --mirror Aliyun
# Executing docker install script, commit: f45d7c11389849ff46a6b4d94e0dd1ffebca32c1

ERROR: Unsupported distribution 'osmc'
</code></pre>

需要修改下 <code>get-docker.sh</code> 中第280行改为，因为 osmc 没有在里边有脚本配置，假装是 <code>debian</code> 就行了

<blockquote>
  lsb_dist="raspbian"
</blockquote>

安装完毕后输出大概是这样

<blockquote>
  Server: Docker Engine - Community
   Engine:
    Version:          19.03.6
    API version:      1.40 (minimum version 1.12)
    Go version:       go1.12.16
    Git commit:       369ce74
    Built:            Thu Feb 13 01:31:39 2020
    OS/Arch:          linux/arm
    Experimental:     false
   containerd:
    Version:          1.2.10
    GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
   runc:
    Version:          1.0.0-rc8+dev
    GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
   docker-init:
    Version:          0.18.0
    GitCommit:        fec3683
  If you would like to use Docker as a non-root user, you should now consider
  adding your user to the "docker" group with something like:
  
  sudo usermod -aG docker your-user
  
  Remember that you will have to log out and back in for this to take effect!
  
  WARNING: Adding a user to the "docker" group will grant the ability to run
           containers which can be used to obtain root privileges on the
           docker host.
           Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface
           for more information.
</blockquote>

根据提示，可以把当前用户加入到 docker 组，以便这个用户能方便的使用 docker 命令（需要重启）

<pre><code class="language-shell line-numbers">sudo usermod -aG docker osmc
</code></pre>

出于效率考虑，可以创建 <code>/etc/docker/daemon.json</code>，并写入如下内容：

<pre><code class="language-json line-numbers">{
    "registry-mirrors": ["http://hub-mirror.c.163.com"]
}
</code></pre>

使用 <code>systemctl start docker</code> 启动服务即可

<h4>docker-compose的安装</h4>

docker-compose 是基于 python 的一个 docker 编排工具，能方便的聚合现有docker镜像，使用起来十分方便

可以使用 <code>apt-get install docker-compose</code> 的形式安装

<h4>nextcloud</h4>

nextcloud 是一个开源网盘项目，基于 php7，功能非常的强悍，包括手机端、PC端、服务端的程序，在树莓派上只需要安装服务端就可以了，手机端和PC端都只是客户端，找到相关项目下载即可

服务端项目地址：<a class="wp-editor-md-post-content-link" href="https://github.com/nextcloud/server">https://github.com/nextcloud/server</a>
桌面端项目地址：<a class="wp-editor-md-post-content-link" href="https://github.com/nextcloud/desktop">https://github.com/nextcloud/desktop</a>
安卓项目地址：<a class="wp-editor-md-post-content-link" href="https://github.com/nextcloud/android">https://github.com/nextcloud/android</a>
IOS项目地址：<a class="wp-editor-md-post-content-link" href="https://github.com/nextcloud/ios">https://github.com/nextcloud/ios</a>

<h3>运行nextcloud</h3>

基于官方关于树莓派运行nextcloud的文档，找到了其中的 docker-compose.yaml，并针对树莓派的特性稍微做了些修改

<pre><code class="language-yaml line-numbers">version: '2'

volumes:
  nextcloud:
  db:

services:
  db:
    image: jsurf/rpi-mariadb
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    restart: always
    volumes:
      - ./db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=nyist123
      - MYSQL_PASSWORD=nyist123
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
  app:
    image: arm32v7/nextcloud:fpm
    volumes:
      - ./data:/var/www/html/data
    restart: always

  web:
    image: arm32v7/nginx
    ports:
      - 8089:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    volumes_from:
      - app
    restart: always
  redis:
    image: redis
    volumes_from:
      - app
    restart: always
networks:
  nextcloud:
</code></pre>

在 <code>docker-compose.yaml</code> 目录下使用 <code>docker-compose up -d</code> 开始拉取镜像然后后台运行

<pre><code class="language-shell line-numbers">root@osmc:/home/osmc/rasp-tools/nextcloud# docker-compose up -d
WARNING: Some networks were defined but are not used by any service: nextcloud
nextcloud_db_1 is up-to-date
nextcloud_app_1 is up-to-date
nextcloud_redis_1 is up-to-date
nextcloud_web_1 is up-to-date
</code></pre>

进入 <code>http://ip地址:8089</code> 即可开始配置数据库等信息，如果出现 504 time out，需要调整Nginx中的超时时间
在刚才的 <code>docker-compose.yaml</code> 中指定了数据库主机是 <code>db</code>，用户名是 <code>nextcloud</code>，数据库是 <code>nextcloud</code>，密码是 <code>nyist123</code>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/04/1c40b3052fc38dda5980a0888c94a133.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/04/1c40b3052fc38dda5980a0888c94a133.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/04/09e37a9efc26ef715406e710b501814e.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/04/09e37a9efc26ef715406e710b501814e.png" alt="" /></a>

<h3>内网穿透</h3>

内网穿透使用的 <code>frp</code>，服务端和客户端的配置可以参考下方的这篇博客，也可以用免费的 frp 服务，就是速度和稳定性就没法保证了，或者使用 <code>ngrok</code>，本人尝试下来 <code>ngrok</code> 有不稳定的情况，偶尔会断掉

<a class="wp-editor-md-post-content-link" href="&quot;https://www.jianshu.com/p/00c79df1aaf0&quot;">https://www.jianshu.com/p/00c79df1aaf0</a>

出于效率和体验的考虑，如果是自建 frp 服务器的话，可以用 <code>nginx</code> 反向代理到 <code>frp</code> 的 <code>http</code> 代理端口上，<code>https</code> 也在服务端的 <code>nginx</code> 上做

<h4>配置 frp</h4>

个人的 <code>frpc.ini</code> 如下：

<pre><code class="language-ini line-numbers">[common]
server_addr = 服务器ip
server_port = 服务器服务端口
privilege_token = 密码
[ssh]
type = tcp
local_ip = 127.0.0.1
local_port = 22
remote_port = 32656 # 远程服务器的此端口映射到 22 端口
[nextcloud]
type = http
local_port = 8089 # 转发到树莓派的 8089
custom_domains = 自定义网盘域名
</code></pre>

服务端的 <code>frps.ini</code> 如下：

<pre><code class="language-ini line-numbers">[common]
# binde_addr是指定frp内网穿透服务器端监听的IP地址,默认为127.0.0.1，
#如果使用IPv6地址的话，必须用方括号包括起来，比如 “[::1]:80”, “[ipv6-host]:http” or “[ipv6-host%zone]:80”
bind_addr = 0.0.0.0
# bind_port 是frp内网穿透服务器端监听的端口，默认是7000
bind_port = 7000
#auto_token = 验证token
privilege_token = 密码
#token = 密码
#frp内网穿透服务器可以支持虚拟主机的http和https协议，一般我们都用80，可以直接用域名而不用增加端口号，如果使用其它端口，那么客户端也需要配置相同的其他端口。
vhost_http_port = 8189 # http 的统一转发端口
vhost_https_port = 7179 # https 的统一转发端口

dashboard_user = 管理后台用户 
dashboard_pwd = 管理后台密码
# 这个是frp内网穿透服务器的web界面的端口，可以通过http://你的ip:7500查看frp内网穿透服务器端的连接情况，和各个frp内网穿透客户端的连接情况。
dashboard_port = 端口
auth_token = 密码
</code></pre>

<h4>自动重新运行</h4>

还写了一个每分钟检测 frpc 是否正常运行的小脚本 <code>start.sh</code>

<pre><code class="language-shell line-numbers">pid=`ps -fe | grep frpc | grep -v grep | awk '{print $2}'`
if [ -z "$pid" ]; then
    path=/home/osmc/rasp_tools/frp_client
    nohup $path/frpc -c $path/frpc.ini &gt; $path/nohup.out &amp;
    echo "自动重启"
else
    echo "已经启动PID:$pid"
fi
</code></pre>

然后安装 <code>apt-get install cron</code>，每分钟运行该脚本

在<code>crontab -e</code>的最后加了一行，博主用的 <code>root</code> 加的这一任务

<pre><code class="language-bash line-numbers">*  *    * * *   root    bash /home/osmc/rasp-tools/frp_client/start.sh
</code></pre>

填加完之后做一个小测试，手动运行 <code>starts.sh</code>，发现没问题后，停掉 <code>frpc</code>，等待时间到达整分钟之后，观察 <code>fprc</code> 有没有自动重启

<pre><code class="language-bash line-numbers">root@osmc:/home/osmc/rasp-tools/frp_client# bash start.sh 
自动重启
root@osmc:/home/osmc/rasp-tools/frp_client# nohup: redirecting stderr to stdout
root@osmc:/home/osmc/rasp-tools/frp_client# ps -fe | grep frpc
root      1864     1  0 04:27 pts/0    00:00:00 /home/osmc/rasp-tools/frp_client/frpc -c /home/osmc/rasp-tools/frp_client/frpc.ini
root      1875  1343  0 04:27 pts/0    00:00:00 grep frpc
root@osmc:/home/osmc/rasp-tools/frp_client# kill -9 1864
root@osmc:/home/osmc/rasp-tools/frp_client# ps -fe | grep frpc
root      1883  1343  0 04:27 pts/0    00:00:00 grep frpc
# .... 等待一会儿
root@osmc:/home/osmc/rasp-tools/frp_client# ps -fe | grep frpc
root      1984     1  0 04:29 ?        00:00:00 /home/osmc/rasp-tools/frp_client/frpc -c /home/osmc/rasp-tools/frp_client/frpc.ini
root      1985     1  0 04:29 ?        00:00:00 /home/osmc/rasp-tools/frp_client/frpc -c /home/osmc/rasp-tools/frp_client/frpc.ini
root      2010  1343  0 04:29 pts/0    00:00:00 grep frpc
</code></pre>

<h4>配置反向代理</h4>

这个时候就可以根据反向代理的域名，比如我的样例里边用的
<a class="wp-editor-md-post-content-link" href="&quot;http://nextcloud.wj2015.com:8189/&quot;">http://nextcloud.wj2015.com:8189/</a> 访问项目，但是这样并不友好，包括

<ul>
<li>没有HTTPS</li>
<li>端口是8189，不好看</li>
</ul>

为解决上述两个问题，我在 fprs服务器配置了nginx反向代理，将域名 <code>nextcloud.wj2015.com</code> 配好https，再代理到 <code>raspi.nextcloud.wj2015.com:8189</code>，具体的 vhost 配置文件如下

<pre><code class="language-ini line-numbers">upstream nextcloud-dashboard{
    server 127.0.0.1:8189;
}

server {
    listen 80;
    #listen [::]:80;
    server_name nextcloud.wj2015.com;
    # enforce https
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    #listen [::]:443 ssl http2;
    server_name nextcloud.wj2015.com;

    ssl_certificate ssl/2018-11-09-SSL/1_nextcloud.wj2015.com_bundle.crt;
    ssl_certificate_key ssl/2018-11-09-SSL/2_nextcloud.wj2015.com.key;

    # Add headers to serve security related headers
    # Before enabling Strict-Transport-Security headers please read into this
    # topic first.
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;";
    large_client_header_buffers 4 16k;

    location / {
        proxy_set_header   Host         $host:$server_port;
        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;

        proxy_pass  http://nextcloud-dashboard;
    }
}

</code></pre>

访问 <code>https://nextcloud.wj2015.com</code> 可能会看到下面的提示
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/04/2f500313ada9cdc421f34109902ee7c3.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/04/2f500313ada9cdc421f34109902ee7c3.png" alt="" /></a>
根据提示改一下可信域名即可，或者一开始安装的时候就在此域名下安装（更推荐）

改可信域名需要使用 <code>docker exec -it nextcloud_app_1 /bin/bash</code> 进入到 <code>docker</code> 容器中更改对应文件，改动之后重新启动容器就需要慎重了；或者映射对应配置文件到真实路径下

最后能看到这个页面就算成功了
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/04/b64d24d3f221b7a8528de78af1ce4f22.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/04/b64d24d3f221b7a8528de78af1ce4f22.png" alt="" /></a>

<h3>速度测试</h3>

由于树莓派3b孱弱的性能，OSMC系统持久输出HDMI信号以及 nectcloud 带来的 php-fpm + nginx 结构上的损失，加之内网穿透后速度很慢的网络，又卡容易丢包，不推荐使用。
除非使用更好的树莓派，或者单独只装一个 nextcloud，就像 nextcloud 官方给到的内置 nextcloud 的系统。

<h3>其他推荐</h3>

nextcloud的功能和插件非常之丰富，但是如果只有同步文件的需求的话，可以使用去中心化的 syncting 方便的在不同电脑上同步文件，炒鸡方便，如果有在线下载的需求，可以内网穿透 + nginx 配合HTTP鉴权简单跑一个文件管理页面。

并且 syncting 可以自己搭建中继服务器，速度+++

参考的其他博主链接：<a class="wp-editor-md-post-content-link" href="https://zhuanlan.zhihu.com/p/69267020?from_voters_page=true">https://zhuanlan.zhihu.com/p/69267020?from_voters_page=true</a>
官方网站：<a class="wp-editor-md-post-content-link" href="https://syncthing.net/">https://syncthing.net/</a>

<h2>总结</h2>

树莓派在运行有其他耗性能的服务时，就不适合再用 nextcloud 做网盘了，如果像我一样有运行其他服务诸如 KODI 的同时，还希望能在不同电脑上同步文件，那么就可以考虑同步神器 syncting 了。]]></content:encoded>
		<excerpt:encoded><![CDATA[一年前兴起买的树莓派3B+，一番折腾最后成为了家里的电视投屏盒子（OSMC系统），我的自建云盘放在云服务器上，50G的空间快被塞满了，于是就想起来把尘封数月的树莓派复活过来，搭建一个 nextcloud，并且把之前的数据迁移过去。]]></excerpt:encoded>
		<wp:post_id>540</wp:post_id>
		<wp:post_date><![CDATA[2020-07-02 09:39:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-02 01:39:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%a0%91%e8%8e%93%e6%b4%be%e5%9f%ba%e4%ba%8edocker%e5%bf%ab%e9%80%9f%e6%90%ad%e5%bb%banextcloud%ef%bc%8c%e9%99%84%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="nextcloud"><![CDATA[nextcloud]]></category>
		<category domain="post_tag" nicename="syncting"><![CDATA[syncting]]></category>
		<category domain="post_tag" nicename="%e5%90%8c%e6%ad%a5"><![CDATA[同步]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_acb230b25cf5de105882688d5b496b9a]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[605]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[165]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>深度学习的数学-神经网络关系式、代价函数最优化</title>
		<link>https://blog.wj2015.com/2020/03/03/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e5%85%b3%e7%b3%bb%e5%bc%8f%e3%80%81%e4%bb%a3%e4%bb%b7%e5%87%bd%e6%95%b0%e6%9c%80%e4%bc%98%e5%8c%96/</link>
		<pubDate>Tue, 03 Mar 2020 10:03:22 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=544</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本篇博客主要讲解神经网络中的变量表示法、各层的输入输出关系式，了解正解和预测值，代价函数的计算及其最小化，以及参数规模和需要的数据规模计算

<h2>正文</h2>

<h3>神经网络的参数表示法</h3>

据书中表述，神经网络是一种数学模型，像权重和偏置在数学上看就是<strong>参数</strong>
下图中，权重 <code>w1</code>/<code>w2</code>/<code>w3</code> 偏置 <code>b</code> 就是神经单元的参数，加权输入即为<code>z1</code>，经过激活函数 <code>a</code> 的计算得到结果为 <code>a1</code>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/c615e69a65081650e171a2142b35cfad.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/c615e69a65081650e171a2142b35cfad.png" alt="" /></a>

<h4>命名规则（重点）</h4>

上面简单看了下一个神经单元的输入输出表示，但是神经网络由多个层组成，每个层又有多个神经单元，所以需要科学的对这些神经单元编号

<h5>层编号</h5>

首先，对神经网络的每个层进行编号，从输入层开始数，输入层为<code>层1</code>，输出层为最后一层，也就是 <code>层l</code>，l表示 last
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/0d8441147155791a6aec4b7be8629996.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/0d8441147155791a6aec4b7be8629996.png" alt="" /></a>
然后每个层对应的偏置和权重，有如下的规则定义
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/2642de1695617fe32fbf21a282f4eaf0.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/2642de1695617fe32fbf21a282f4eaf0.png" alt="" /></a>
看表格可能有点难理解，可以参照下图的表现形式，需要着重理解权重(w)的下标有<strong>两个索引</strong>，前面的索引代表<strong>当前层</strong>的第几个神经单元，后边的索引代表<strong>前一层输出</strong>的第几个神经单元
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/0cd8898b000269d147f9d791667771d6.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/0cd8898b000269d147f9d791667771d6.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/a2c104fccd1a42c316a286ace825382a.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/a2c104fccd1a42c316a286ace825382a.png" alt="" /></a>

下面是截取的一个 3*4 的黑白图像识别神经网络，输入层隐藏层和输出层的命名表示
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/9c76900cb465b81df043a795976c8daa.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/9c76900cb465b81df043a795976c8daa.png" alt="" /></a>

<h4>小练习</h4>

这是博主自己编的几个小练习，可以对照下表格第一列理解其输出含义

<table>
<thead>
<tr>
  <th>符号</th>
  <th>表示含义</th>
</tr>
</thead>
<tbody>
<tr>
  <td>${w_{11}}^{2}$</td>
  <td>第1层第1个神经单元对应第2层第1个神经单元输出权重</td>
</tr>
<tr>
  <td>${w_{21}}^{2}$</td>
  <td>第1层第1个神经单元对应第2层第2个神经单元输出权重</td>
</tr>
<tr>
  <td>${w_{21}}^{3}$</td>
  <td>第2层第1个神经单元对应第3层第2个神经单元输出权重</td>
</tr>
<tr>
  <td>${x_{12}}$</td>
  <td>第一层（输入层）的第十二个神经单元名称 或 输入 或 输出变量</td>
</tr>
<tr>
  <td>${z_{2}}^{3}$</td>
  <td>第3层第2个神经单元加权输入的变量</td>
</tr>
<tr>
  <td>${b_{2}}^{3}$</td>
  <td>第3层第2个神经单元的偏置</td>
</tr>
<tr>
  <td>${a_{2}}^{3}$</td>
  <td>第3层第2个神经单元的输出变量 或 表示该神经单元的名称</td>
</tr>
</tbody>
</table>

<h4>多个学习实例的表示方法</h4>

可以加上中括号来表示第n个学习实例
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/c268881e2d96e33ca7014a2ea134caa8.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/c268881e2d96e33ca7014a2ea134caa8.png" alt="" /></a>
下图表示第七个图像输入神经网络时，对应的变量表示方法
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/b5a41b4eb5c45f024e6b6d8e05a78983.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/b5a41b4eb5c45f024e6b6d8e05a78983.png" alt="" /></a>

<h3>关系式</h3>

关系式就是用一个式子表示各个变量之间的关系

<h4>输入层</h4>

输入层的输入即输出，所以有如下的关系式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/2bbce8c6288840614bc321ceccde5ed9.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/2bbce8c6288840614bc321ceccde5ed9.png" alt="" /></a>

<h4>隐藏层（中间层）</h4>

根据变量的定义，不难得出如下的关系式（z和a定义请见本博客上方表格）
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/f3fed5bc267fff83fbeba3a291df7d13.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/f3fed5bc267fff83fbeba3a291df7d13.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/b0b7f58f7f93317e7d61211683e47d4a.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/b0b7f58f7f93317e7d61211683e47d4a.png" alt="" /></a>

<h4>输出层</h4>

输出层也同理可从隐藏层得到 z，经过激活函数后得到输出 a
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/e5b45f555765ec7131989ec9556e4c28.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/e5b45f555765ec7131989ec9556e4c28.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/9ea8b4a2b870a8c472dedb08e9a0d6df.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/9ea8b4a2b870a8c472dedb08e9a0d6df.png" alt="" /></a>

<h4>矩阵表示法</h4>

之前理解过矩阵内积的相关知识，权重之和 z 可以用如下的向量形式表示，有利于编程的实现
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/420fdd98ad666c88f0cc1d3af370c3d9.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/420fdd98ad666c88f0cc1d3af370c3d9.png" alt="" /></a>

<h3>正解和代价函数</h3>

<h4>正解的定义</h4>

正解顾名思义就是学习数据中正确的结果，预测值就是输入模型产生出来的结果值
用事先提供的学习数据确认权重和偏置，这个过程在神经网络中被称作<strong>学习</strong>，目标就是让预测值与正解的误差尽可能的小

如下图所示的识别 3*4 的黑白图像是0还是1，输出层 ${a_{1}}^{3}$ 敏感度越高，越偏向1，反之结果越偏向0

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/a306422d57f2cf704e36bcdbfcbcf130.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/a306422d57f2cf704e36bcdbfcbcf130.png" alt="" /></a>
如果我们得到的学习数据是一张图片对应一个数字 1或0，那么还需要画出表格做出如下定义

实际的学习过程就如下图所示，根据正解和输出层的结果，就可以求误差了
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/3bf1bafe49f525a0af52e8fcc34487c4.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/3bf1bafe49f525a0af52e8fcc34487c4.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/1ba601cc5124122a00f3b6b375daa5c0.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/1ba601cc5124122a00f3b6b375daa5c0.png" alt="" /></a>

<h4>代价函数</h4>

这里引入书中的一段话来表示代价函数，大概意思就是衡量这个模型的误差大小的一个函数

<blockquote>
  在数学中，用模型参数表示的总体误差的函数称为代价函数，此外也可以称为损失函数、目的函数、误差函数等。如前所述（2-12节），本书采用“代价函数”这个名称。
</blockquote>

<h4>代价函数的计算</h4>

代价函数也分很多种，比如最容易理解的每一个学习数据的(正解 - 预测值) ^ 2 之和
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/5b2e60c35f1bcc58378909777da18064.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/5b2e60c35f1bcc58378909777da18064.png" alt="" /></a>

<blockquote>
  书中说明了，1/2 作为常数是为了方便计算
</blockquote>

由于对差求平方的代价函数虽然很容易理解，但是存在着计算收敛时间长的问题，为解决这个难点，书中还提到了另外一种误差指标，称为<strong>交叉熵</strong>，提高梯度下降算法的速度
针对本博客上方的两个输出神经单元的例子，定义如下，其中 n 是数据的规模
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/fe6e5b6845c32d28541c211aafef72fd.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/fe6e5b6845c32d28541c211aafef72fd.png" alt="" /></a>

<h4>代价函数的最小化（重点）</h4>

书中给到了如下一张比较容易理解的图，因为代价函数的式子直接体现模型的误差，所以只需要让代价函数尽量小，整个模型契合度就会越高
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/4bc0859ed218c6c93338bb68e24cee11.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/4bc0859ed218c6c93338bb68e24cee11.png" alt="" /></a>
那么如何让代价函数最小呢，不知道有没有想到之前提到的 <strong>多变量函数求极值</strong> 的问题，多变量函数的极值有一个必要条件，就是 <strong>对每个变量求偏导数，其值均为0</strong>
具体可以见之前写过的一篇博客 <a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/2020/02/27/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%af%bc%e6%95%b0%e5%92%8c%e5%81%8f%e5%af%bc%e6%95%b0/#i-12">深度学习的数学-导数和偏导数</a>

但是在实际的训练过程中，求导数的计算量比较大，更多是采用<strong>梯度下降</strong>的方式去求极值
之前也写了相关博客可供参考 <a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/2020/03/01/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d/">深度学习的数学-梯度下降</a>

<h4>神经网络的代价函数</h4>

还是以 3*4 图片识别0/1的神经网络为例
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/ca995cc301765edff1cb2cfcfabda03b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/ca995cc301765edff1cb2cfcfabda03b.png" alt="" /></a>
假设有64张图片，则其误差可以表示如下
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/0b93b544e89a31cd091da369376289ea.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/0b93b544e89a31cd091da369376289ea.png" alt="" /></a>
然后把每张图片（学习资料）的误差加起来，就得到了代价函数
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/8bc9549d9c7a672d88c2e30ba31bfb4f.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/8bc9549d9c7a672d88c2e30ba31bfb4f.png" alt="" /></a>

<h4>参数和数据规模的计算（重点）</h4>

书中提到了参数规模的最小值估算方法，就是把所有的权重、偏置都数起来，因为这些都是需要通过学习资料去确定的参数
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/0de8e93a8656dd4985dc6607b059ccc6.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/0de8e93a8656dd4985dc6607b059ccc6.png" alt="" /></a>
书中提到，数据的规模如果小于参数的规模，就无法确认模型，所以最小数据规模就是所有参数的个数，3*2图像的那个例子学习用的图像至少需要47张

<h2>总结</h2>

本篇主要记录神经网络的参数表示法，每个层每个神经单元的关系式，正解和代价函数，以及代价函数最小化、参数和训练数据规模等]]></content:encoded>
		<excerpt:encoded><![CDATA[本篇主要记录神经网络的参数表示法，每个层每个神经单元的关系式，正解和代价函数，以及代价函数最小化、参数和训练数据规模等]]></excerpt:encoded>
		<wp:post_id>544</wp:post_id>
		<wp:post_date><![CDATA[2020-03-03 18:03:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-03 10:03:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e5%85%b3%e7%b3%bb%e5%bc%8f%e3%80%81%e4%bb%a3%e4%bb%b7%e5%87%bd%e6%95%b0%e6%9c%80%e4%bc%98%e5%8c%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%bb%a3%e4%bb%b7%e5%87%bd%e6%95%b0"><![CDATA[代价函数]]></category>
		<category domain="post_tag" nicename="%e5%85%b3%e7%b3%bb%e5%bc%8f"><![CDATA[关系式]]></category>
		<category domain="post_tag" nicename="%e5%91%bd%e5%90%8d%e8%a7%84%e5%88%99"><![CDATA[命名规则]]></category>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[201]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[96]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>算法基础-散列表的原理及基础操作</title>
		<link>https://blog.wj2015.com/2020/03/03/%e7%ae%97%e6%b3%95%e5%9f%ba%e7%a1%80-%e6%95%a3%e5%88%97%e8%a1%a8%e7%9a%84%e5%8e%9f%e7%90%86%e5%8f%8a%e5%9f%ba%e7%a1%80%e6%93%8d%e4%bd%9c/</link>
		<pubDate>Tue, 03 Mar 2020 15:03:01 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=548</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本篇博客主要分享数据结构中关于散列表的定义和编程实现

<h2>正文</h2>

<h3>什么是散列表</h3>

散列表也成为Hash表，用于存储 Key 和 Value 的集合，对于某一个Key，散列表能以接近O(1)的时间复杂度获取到对应的value

<h4>Hash的数据结构</h4>

散列表读取的时间复杂度能达到 O(1)，这与其结构脱不了干系
学过基础数据结构都应该知道，通过数组的索引进行顺序读写时间复杂度就是O(1)，那么Hash就借用了这一特点
在进行数据存储或者读取的时候，首先通过<strong>散列函数</strong>计算出Key这个字符串对应的数字，简单取模，得到 0~当前数组长度的一个索引，根据索引顺序存取，时间复杂度就是O(n)

<h4>存储数据的数组</h4>

如下就是Hash表存储数据的数组的示意图，其中长度为4
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/1c5b33f7419028f658ef9f3368ce5971.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/1c5b33f7419028f658ef9f3368ce5971.png" alt="" /></a>

<h4>散列函数</h4>

<h4>Hash的负载因子</h4>

负载因子用于表示Hash的空间使用程度，计算公式为 Hash有效数据长度/数组长度（空间）
负载因子越高，Hash的查找效率可能就会收到影响，因为负载因子越高就越容易出现<strong>Hash冲突</strong>，无论是开放寻址法还是链表法都会让查找速度降低
一般在负载因子达到一定限制的时候，Hash就需要自动扩容，以保证足够的查找性能

<h5>开放寻址法</h5>

当Hash冲突的时候，存放元素的时候往后移至空位，查找到对应索引时如果当前索引已经存在元素，那么就往后找到一个空白的位置放入

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/30cc3dbd16510d5c23840a5a61f31ee8.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/30cc3dbd16510d5c23840a5a61f31ee8.png" alt="" /></a>

<h5>链表法</h5>

当Hash冲突后，存放元素的item中的链表指针域往后追加新的元素
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/dd0c170a48ca52e6012fc7a7aaff83c1.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/dd0c170a48ca52e6012fc7a7aaff83c1.png" alt="" /></a>

<h3>Hash结构的几个操作</h3>

<h4>读操作</h4>

<h5>开放寻址法的读操作</h5>

开放寻址法中，由于冲突时元素向后查找空位，所以查找的时候需要判断查找的key和存储的key是否相同，不相同的时候需要向后查找相同key的元素，直到为空或者找到相同key的元素
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/634feb403da107e2561d1dfe314d1049.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/634feb403da107e2561d1dfe314d1049.png" alt="" /></a>

<h5>链表法的读操作</h5>

链表法中，冲突元素直接挂在Hash数组的指针域中，所以查找的时候，首先判断查找的key和存储在数组中的key是否相同，不相同的时候需要在指针域对应的链表中查找（时间复杂度O(N)）
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/327a906e04249aad558a046b08c87b9c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/327a906e04249aad558a046b08c87b9c.png" alt="" /></a>

<h4>写操作</h4>

<h5>开放寻址法的写操作</h5>

先使用散列函数计算key对应的索引，如果冲突，则往后查找到一个非空的位置写入
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/30cc3dbd16510d5c23840a5a61f31ee8.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/30cc3dbd16510d5c23840a5a61f31ee8.png" alt="" /></a>

<h5>链表法的写入</h5>

散列计算key对应的索引，如果冲突，追加到数组元素中的链表域

<h4>扩容</h4>

无论是开放寻址法还是链表法，扩容都需要新建一个哈希表，重新计算Hash值之后返回新的哈希表
负载因子过小的时候也可以触发收缩，重新计算所有元素的Hash值，以节省空间
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/1bd2e72fe93f36cb47a36e0ed8b4a692.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/1bd2e72fe93f36cb47a36e0ed8b4a692.png" alt="" /></a>

<h2>总结</h2>

本篇介绍了Hash表的数据结构基础，以及两种解决Hash冲突的策略，以及对应策略的读取、写入、扩容操作的底层操作]]></content:encoded>
		<excerpt:encoded><![CDATA[本篇介绍了Hash表的数据结构基础，以及两种解决Hash冲突的策略，以及对应策略的读取、写入、扩容操作的底层操作]]></excerpt:encoded>
		<wp:post_id>548</wp:post_id>
		<wp:post_date><![CDATA[2020-03-03 23:03:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-03 15:03:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ae%97%e6%b3%95%e5%9f%ba%e7%a1%80-%e6%95%a3%e5%88%97%e8%a1%a8%e7%9a%84%e5%8e%9f%e7%90%86%e5%8f%8a%e5%9f%ba%e7%a1%80%e6%93%8d%e4%bd%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hash"><![CDATA[Hash]]></category>
		<category domain="post_tag" nicename="%e6%95%a3%e5%88%97%e8%a1%a8"><![CDATA[散列表]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[数据结构]]></category>
		<category domain="category" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[549]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[260]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[78]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>STEP和IGES模型转换为适用Web的glb格式</title>
		<link>https://blog.wj2015.com/2020/03/08/step%e5%92%8ciges%e6%a8%a1%e5%9e%8b%e8%bd%ac%e6%8d%a2%e4%b8%ba%e9%80%82%e7%94%a8web%e7%9a%84glb%e6%a0%bc%e5%bc%8f/</link>
		<pubDate>Sat, 07 Mar 2020 17:14:59 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=558</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

博主最近一直在调研web3d格式转换和优化相关的东西，国内资料比较少，很多信息甚至只能从 GitHub 的 issue 里边才能窥知一二，特写下此篇博客，希望能让有此需求的伙伴们少走一些弯路。

<h2>正文</h2>

<h3>基于本文做的开源项目</h3>

可以通过一个简单的入口脚本配合docker，完成对多种类型3d模型的转换，支持 glb(binary) 和 gltf，并自动压缩
项目地址：<a class="wp-editor-md-post-content-link" href="https://github.com/wangerzi/3d-model-convert-to-gltf">https://github.com/wangerzi/3d-model-convert-to-gltf</a>

去项目中下载 <code>convert.sh</code> 后，准备好docker环境（镜像有点大 1G+，请配合国内镜像源下载），执行如下格式的脚本即可一键转换

<pre><code class="language-shell line-numbers">convert.sh [stl|step|iges|obj|fbx] inputpath.stl outputpath.glb # convert to gltf bin file
convert.sh [stl|step|iges|obj|fbx] inputpath.stl outputpath.gltf # not only bin file
</code></pre>

<h3>了解STEP和IGES格式</h3>

首先，需要大概了解下 STEP 格式和 IGES 格式到底是什么，哪些领域正在使用
英文基础比较不错的童鞋，可以参考下如下外文资料
STEP文件：
<a class="wp-editor-md-post-content-link" href="&quot;https://fileinfo.com/extension/step&quot;">https://fileinfo.com/extension/step</a>
IGES文件：
<a class="wp-editor-md-post-content-link" href="&quot;https://fileinfo.com/extension/iges&quot;">https://fileinfo.com/extension/iges</a>

简单来说，这俩都是<strong>CAD的一种文件标准</strong>，STEP比IGES出现得更晚一些，由于IGES格式的最新版本是96年发布的，现在多由更高效的STEP等新格式替代，<strong>不支持材质</strong>

IGES 可以安装 <code>iges viewer</code> 这一免费工具在电脑上查看
下载链接在此：https://igsviewer.com/download.aspx

比如网上随便下载的一个 IGS 文件，打开后展示效果如下
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/d6ce6f52c39c343cd6fc1f8940429066.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/d6ce6f52c39c343cd6fc1f8940429066.png" alt="" /></a>

但是，现行主流的web3d库，比如 three.js、Babylon <strong>均不支持</strong> STEP 和 IGES 模型，需要解决这个问题有两个思路

<ul>
<li>深入了解格式含义，编写代码给对应库提交对应的解析方案（想法很好，但是实践不易）</li>
<li>将格式转换为适合web展示的格式，比如称为3d界JPG的 GLTF 格式（本文就是讲这个的）</li>
</ul>

<blockquote>
  three.js 社区中有关于 STEPLoader 的讨论，链接如下：https://github.com/mrdoob/three.js/issues/7125
</blockquote>

<h3>了解STL格式</h3>

STL格式更多出现在3D打印中，只能用来表示封闭的体或者面，且文件内部<strong>都用三角形表示</strong>，所以转换精度比较粗的话，看起来效果比较诡异，包括 Ascii 编码和二进制两种编码模式，一般采用二进制，因为体积<strong>相对较小</strong>，并且与STEP和IGES一样<strong>不支持材质</strong>
比如同一个模型（STEP大小：4.81M），转换精度不同可能就是如下两种效果
粗精度（Ascii编码：3.7M）：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/92acb91ddcfe55122b4e7689659c8612.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/92acb91ddcfe55122b4e7689659c8612.png" alt="" /></a>
细精度（Ascii编码：63.3M，二进制编码：12.1M）：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/16b2c25d5a260b207fb9d0703b03ba0c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/16b2c25d5a260b207fb9d0703b03ba0c.png" alt="" /></a>
但是模型大小也会很有区别，甚至同一个图，精度调整很细的话，能达到<strong>一百多兆</strong> 模型的加载和解析都非常慢，精度调整粗一点，几兆就搞定了，但是页面展示的效果根本不能看

<h4>为何不统一转换为stl格式？</h4>

看到这里，大家应该知道了，STL<strong>非常不适合web</strong>的模型展示，精度稍高体积就十分庞大这一点直接 PASS

<h3>CTM格式</h3>

这里简单提一下 CTM 格式，这是一个压缩能力很强的格式，就上面截图的小杯子，精度稍高的 STL 得有 60M 左右，但是CTM得到更好的效果，只需要 795kb

CTM格式（795kb）
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/0d2345827c242f02c6f0b8ad66cc6d36.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/0d2345827c242f02c6f0b8ad66cc6d36.png" alt="" /></a>

不过CTM格式已经<strong>被 THREE.JS 抛弃了</strong>，社区更希望用户使用 GLTF 格式，106版本后已经去掉了 CTMLoader，如果需要复原只能从老版本里边拷贝出来代码并且做一些小修改才能使用，关于CTM格式讨论如下：
https://github.com/mrdoob/three.js/pull/14308

<h3>GLTF格式</h3>

简单来说，就是最小化的把模型资源整理起来，称为3d模型界的JPG，支持材质贴图等，在各个Web3D库中得到了<strong>广泛支持</strong>，具体怎么加载这里就不赘述了，网上demo很多

下面Github上的格式介绍和相关技术汇总，当初博主就是在这里边翻来覆去找转换方案的，虽然最后并没有采用这里边提到方案 /(ㄒoㄒ)/
https://github.com/KhronosGroup/glTF
GLTF的详细介绍也找来了中文资料：
<a class="wp-editor-md-post-content-link" href="&quot;https://zhuanlan.zhihu.com/p/65265611&quot;">https://zhuanlan.zhihu.com/p/65265611</a>

<h3>现有的在线转换服务</h3>

经过资料调研，国内比较知名的有<strong>魔猴的转换工具</strong>，能支持 <strong>STEP 到 STL 和 CTM</strong> 格式的转换

魔猴链接在此：http://www.mohou.com/tools/stlconverter.html

魔猴的转换是免费且公开的，<strong>非常的良心</strong>，我也尝试过分析请求报文直接调用魔猴的转换API，魔猴并没有限制IP、频次以及转换结果下载，但是一如所料的<strong>慢</strong>，这里的慢主要有以下三个方面

<ul>
<li>服务端接受文件后，上传到魔猴服务器慢</li>
<li>魔猴转换需要至少十多秒</li>
<li>再根据魔猴的响应报文，下载对应文件也需要时间</li>
</ul>

还是上边那个瓶子模型，转换一次至少<strong>40s+</strong>，很影响效率，所以还是自己找方案转换格式来的靠谱

<h3>网上现有轮子能针对这个格式做哪些转换</h3>

以下方案都是 Google + Github 不停找资料拼凑出来的

<h4>cqparts方案（环境难搞，未采用）</h4>

前面提到的GLTF技术汇总：<a class="wp-editor-md-post-content-link" href="&quot;https://github.com/KhronosGroup/glTF&quot;">https://github.com/KhronosGroup/glTF</a>

其中提到了使用 cqparts 直接就能把 STEP 转换为 GLTF，不过博主尝试过后发现环境太难搞了，不止要装 cqparts 还需要装 FreeCAD，很难调，后来就没采用此方案
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/cfd666fd15904986c15f50a731d86519.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/cfd666fd15904986c15f50a731d86519.png" alt="" /></a>

项目地址：<a class="wp-editor-md-post-content-link" href="&quot;https://github.com/cqparts/cqparts&quot;">https://github.com/cqparts/cqparts</a>

<h4>pythonocc方案（读取或写入STP/IGS/STL）</h4>

Pythonocc是python的CAD，安装和使用都很方便，转换脚本简单明了

项目地址：https://github.com/tpaviot/pythonocc-core

<blockquote>
  PS:不推荐看文档，太难找了...，可以直接看格式转换的相关代码，比较好懂
</blockquote>

格式转换用到的代码：
https://github.com/tpaviot/pythonocc-core/blob/master/src/Extend/DataExchange.py

安装和使用可查看本篇博客后续的<strong>『环境安装』</strong>和<strong>『关键代码』</strong>部分

<h4>stl2gltf（将STL转换为GLTF）</h4>

是一个两年前更新的冷门项目，作用是将<strong>二进制模式的 STL 文件</strong>转换为 GLTF 文件，支持浏览器本地转换、Python脚本以及C++源码，虽然star很少，但是工具确实很好用
博主花了不少在Github上搜STL相关项目一个个的翻才发现这个宝藏/(ㄒoㄒ)/

项目地址：<a class="wp-editor-md-post-content-link" href="&quot;https://github.com/MyMiniFactory/stl2gltf&quot;">https://github.com/MyMiniFactory/stl2gltf</a>
在线体验地址：<a class="wp-editor-md-post-content-link" href="&quot;https://myminifactory.github.io/stl2gltf/&quot;">https://myminifactory.github.io/stl2gltf/</a>

<h3>GLB文件压缩</h3>

直接转换出来的 glb 文件可能比较大，上方截图的瓶子，转换出来在 4MB 左右，对于WEB来说还是太大了

文件压缩主要是从腾讯工程师分享的<strong>《腾讯硬核干货！如何在页面极速渲染3D模型》</strong>，得到的启发
原文链接：<a class="wp-editor-md-post-content-link" href="&quot;https://www.bilibili.com/read/cv4130967/&quot;">https://www.bilibili.com/read/cv4130967/</a>

文中推荐使用 <code>gltf-pipeline</code> 进行文件压缩，安装指令一句话，压缩指令一句话，前面那个瓶子模型生成的GLB文件 <strong>4.34M</strong>，压缩后仅 <strong>339kb</strong>

安装以及踩坑依旧放到了后面，前面先讲清思路

<h3>统一输出GLTF格式的思路</h3>

上面提到了使用 <code>pythonocc</code> 将 STEP/IGES/Ascii的STL文件 统一转换为<strong>二进制模式的 STL</strong>，再使用 <code>stl2gltf</code> 将STL转换转换为 gltf 格式，最后使用 <code>gltf-pipeline</code> 将glb文件压缩输出即可，中间的转换文件会比较大，需要及时删掉

<h3>环境安装</h3>

<h4>安装AnaConda</h4>

下载即可

<a href="https://www.anaconda.com/distribution/#download-section">https://www.anaconda.com/distribution/#download-section</a>

注意Python版本需要是 python3.7

设置镜像并在安装时显示镜像来源

<pre><code class="language-shell line-numbers">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --set show_channel_urls yes
</code></pre>

<h4>安装pythonocc</h4>

在 <code>Anaconda Prompt</code> 中执行如下代码，即可创建 <code>pythonocc</code> 环境

<pre><code class="language-shell line-numbers">conda create -n pythonocct -c dlr-sc -c pythonocc pythonocc-core=7.4.0rc1
</code></pre>

安装成功大概是这个样子

<pre><code class="language-shell line-numbers">Preparing transaction: done
Verifying transaction: done
Executing transaction: done
#
# To activate this environment, use
#
#     $ conda activate pythonocct
#
# To deactivate an active environment, use
#
#     $ conda deactivate

</code></pre>

<code>activate pythonocct</code> 即可进入环境

<pre><code class="language-shell line-numbers">Preparing transaction: done
Verifying transaction: done
Executing transaction: done
#
# To activate this environment, use
#
#     $ conda activate pythonocct
#
# To deactivate an active environment, use
#
#     $ conda deactivate
</code></pre>

还需要安装一下 pyqt5，不然跑不通demo

<pre><code class="language-shell line-numbers">(pythonocct) D:\temp\pythonocc-demos-master\examples&gt;pip install pyqt5
Looking in indexes: http://pypi.douban.com/simple
</code></pre>

跑一下 <a href="https://github.com/tpaviot/pythonocc-demos">https://github.com/tpaviot/pythonocc-demos</a> 中的 hello-world 显示如下界面就是成功了（GUI模式）
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/6eba449ab04b6b4b2ed8cf4a6885ea19.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/6eba449ab04b6b4b2ed8cf4a6885ea19.png" alt="" /></a>

<h4>gltf-pipeline 的安装</h4>

安装完 npm 之后，执行如下指令即可

<pre><code class="language-shell line-numbers">npm install -g gltf-pipeline
</code></pre>

强烈建议，安装完后执行下 <code>gltf-pipeline -h</code>，可能会遇到下面描述的坑

高版本的 node 调用指令会出错，在这个 Issue 里边详细描述了这一问题
<a class="wp-editor-md-post-content-link" href="&quot;https://github.com/CesiumGS/gltf-pipeline/issues/507&quot;">https://github.com/CesiumGS/gltf-pipeline/issues/507</a>

现在是<code>20年3月8日</code>，官方并没有在代码层面上解决这个问题，根据讨论需要node降级到 12.0.0 即可

<pre><code class="language-shell line-numbers">$ node -v
v12.16.1
$ gltf-pipeline.cmd -h
internal/modules/cjs/loader.js:1174
      throw new ERR_REQUIRE_ESM(filename, parentPath, packageJsonPath)
</code></pre>

推荐使用 <code>nvm</code> 进行管理，方面node版本切换
nvm-windows 链接在此：<a class="wp-editor-md-post-content-link" href="&quot;https://github.com/coreybutler/nvm-windows/releases&quot;">https://github.com/coreybutler/nvm-windows/releases</a>

安装完之后，改下环境变量使用淘宝镜像提速

<blockquote>
  NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node
  NVM_NPM_ORG_MIRROR=https://npm.taobao.org/mirrors/npm/
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/17dd7ebd3e8758b955dcdbda9171e054.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/17dd7ebd3e8758b955dcdbda9171e054.png" alt="" /></a>

临时使用如下指令也可以：

<pre><code class="language-shell line-numbers">nvm node_mirror https://npm.taobao.org/mirrors/node/
nvm npm_mirror https://npm.taobao.org/mirrors/npm/
</code></pre>

凌晨下载5M多每秒，速度飞起

安装和使用 v12.0.0 如下所示

<pre><code class="language-shell line-numbers">$ node -v
v12.16.1

$ nvm.exe install 12.0.0
Version 12.0.0 is already installed.

$ nvm.exe use 12.0.0
Now using node v12.0.0 (64-bit)

$ node -v
v12.0.0

$ npm -v
6.9.0

$ npm install -g gltf-pipeline
C:\Program Files\nodejs\gltf-pipeline -&gt; C:\Program Files\nodejs\node_modules\gltf-pipeline\bin\gltf-pipeline.js
+ gltf-pipeline@2.1.8
added 38 packages from 20 contributors in 8.239s
</code></pre>

执行 <code>gltf-pipeline.cmd -h</code>，如下所示即为成功

<pre><code class="language-shell line-numbers">$ gltf-pipeline.cmd -h
Usage: node gltf-pipeline.js -i inputPath -o outputPath
...
...
...
示例：
  node gltf-pipeline.js -i model.gltf
  node gltf-pipeline.js -i model.gltf -b
  node gltf-pipeline.js -i model.glb -o model.gltf
</code></pre>

<h3>关键代码展示</h3>

<blockquote>
  PS:这里需要注意下 <code>write_stl_file</code> 的第四个参数，代表精度，精度越大，生成的文件越大，显示效果越精细，我试下来觉着 0.03 比较合适，反正后边都要转为GLTF，大小会随之下来的
</blockquote>

STP转换为 STL 文件（<code>StpConverter.py</code>）

<pre><code class="language-python line-numbers">import os
from OCC.Extend.DataExchange import read_iges_file,read_step_file,write_stl_file

input_file = 'temp2.stp'
output_file = 'out.stl'
if not os.path.exists(input_file):
    print('Input file need exists')
    exit()

shapes=read_step_file(input_file)
write_stl_file(shapes, output_file, 'binary', 0.03, 0.5)
</code></pre>

IGES转换为 STL 文件（<code>IgsConverter.py</code>）

<pre><code class="language-python line-numbers">import os
from OCC.Extend.DataExchange import read_iges_file,read_step_file,write_stl_file

input_file = 'temp2.igs'
output_file = 'out2.stl'
if not os.path.exists(input_file):
    print('Input file need exists')
    exit()

shapes=read_iges_file(input_file)
write_stl_file(shapes, output_file, 'binary', 0.03, 0.5)
</code></pre>

调用 stl2gltf 转为gltf格式，使用 -b 只生成一个文件

<pre><code class="language-shell line-numbers">python stl2gltf.py out.stl out.glb -b
</code></pre>

调用 <code>gltf-pipeline</code> 进行 GLB 的压缩

<pre><code class="language-shell line-numbers">$ gltf-pipeline.cmd -i out.glb -o out.zip.glb -b -d
</code></pre>

<h2>总结</h2>

本篇博客是博主数日查找资料得来，鉴于国内资料相关缺失，解决方案都是在外网讨论和文档中，做了一些总结希望能让后来人能少走一些弯路！路漫漫其修远兮，各位加油！]]></content:encoded>
		<excerpt:encoded><![CDATA[博主最近一直在调研web3d格式转换和优化相关的东西，国内资料比较少，很多信息甚至只能从 GitHub 的 issue 里边才能窥知一二，特写下此篇博客，希望能让有此需求的伙伴们少走一些弯路。]]></excerpt:encoded>
		<wp:post_id>558</wp:post_id>
		<wp:post_date><![CDATA[2020-03-08 01:14:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-07 17:14:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[step%e5%92%8ciges%e6%a8%a1%e5%9e%8b%e8%bd%ac%e6%8d%a2%e4%b8%ba%e9%80%82%e7%94%a8web%e7%9a%84glb%e6%a0%bc%e5%bc%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ctm"><![CDATA[ctm]]></category>
		<category domain="post_tag" nicename="gltf"><![CDATA[gltf]]></category>
		<category domain="post_tag" nicename="iges"><![CDATA[iges]]></category>
		<category domain="post_tag" nicename="pythonocc"><![CDATA[pythonocc]]></category>
		<category domain="post_tag" nicename="stl"><![CDATA[stl]]></category>
		<category domain="post_tag" nicename="stp"><![CDATA[stp]]></category>
		<category domain="post_tag" nicename="three-js"><![CDATA[three.js]]></category>
		<category domain="post_tag" nicename="web3d"><![CDATA[web3d]]></category>
		<category domain="category" nicename="web-front"><![CDATA[前端开发]]></category>
		<category domain="post_tag" nicename="%e6%a0%bc%e5%bc%8f%e8%bd%ac%e6%8d%a2"><![CDATA[格式转换]]></category>
		<category domain="post_tag" nicename="%e6%a8%a1%e5%9e%8b%e5%8e%8b%e7%bc%a9"><![CDATA[模型压缩]]></category>
		<category domain="post_tag" nicename="%e8%b8%a9%e5%9d%91"><![CDATA[踩坑]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_733231acd5bdc58eab84cd06ab25c3c0]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f4575c0d9c136a89b2b15a84f82bb123]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3d797d58c1edd54a90138e8907560b74]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[559]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[3440]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[509]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>560</wp:comment_id>
			<wp:comment_author><![CDATA[rui]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[756782306@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[123.124.147.93]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-11-23 21:19:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-11-23 13:19:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好，请问可以分享一下你说的开源转换项目吗，谢谢]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>503</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1606137599]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1606137599.85231;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608529023.713923;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>492</wp:comment_id>
			<wp:comment_author><![CDATA[domain]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[domain.li@brantte.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[49.75.118.55]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-09-23 10:04:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-09-23 02:04:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[学习中]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1603357307.229125;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1600826648]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1600826648.081979;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>491</wp:comment_id>
			<wp:comment_author><![CDATA[gissky]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[774841712@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[27.151.122.117]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-09-23 08:38:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-09-23 00:38:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[购买完整转换代码，18950318715（同v），请您与我联系]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1603357221.066249;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1600821495]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1600821495.079902;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>464</wp:comment_id>
			<wp:comment_author><![CDATA[smithfox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[smithfox@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[220.180.238.216]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-07-30 19:51:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-07-30 11:51:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[很少看到这么好的文章了，用心了。谢谢]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1596421593.434142;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1596109901]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1596109901.905755;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>490</wp:comment_id>
			<wp:comment_author><![CDATA[gissky]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[774841712@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[27.151.122.117]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-09-23 08:35:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-09-23 00:35:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[购买完整的转换代码，18950318715（同v），请您联系我]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1603357208.724127;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1600821342.296945;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1600821342]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>503</wp:comment_id>
			<wp:comment_author><![CDATA[Jie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[admin@wj2015.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.164.60.38]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-10-22 17:01:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-10-22 09:01:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[GitHub就有按照此思路实现的开源转换项目，还增加了 object > gltf，欢迎交流。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>490</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1603357294]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1603357294.449111;s:5:"event";s:11:"check-error";s:4:"user";s:3:"Jie";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>656</wp:comment_id>
			<wp:comment_author><![CDATA[Jie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[admin@wj2015.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.164.179.72]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-12-21 13:39:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-12-21 05:39:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[文中有提到，链接在此：https://github.com/wangerzi/3d-model-convert-to-gltf]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>560</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1608529156]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1608529156.754299;s:5:"event";s:11:"check-error";s:4:"user";s:3:"Jie";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>848</wp:comment_id>
			<wp:comment_author><![CDATA[我的2020年记-大浪潮下的小小打工人 &#8211; Jeffrey Wang的个人博客]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com/2021/02/07/%e6%88%91%e7%9a%842020%e5%b9%b4%e8%ae%b0-%e5%a4%a7%e6%b5%aa%e6%bd%ae%e4%b8%8b%e7%9a%84%e5%b0%8f%e5%b0%8f%e6%89%93%e5%b7%a5%e4%ba%ba/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[123.206.67.59]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-02-07 00:26:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-02-06 16:26:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] STEP和IGES模型转换为适用Web的glb格式 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1612628816]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1612628816.418749;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1612628940.126054;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1262</wp:comment_id>
			<wp:comment_author><![CDATA[Kent]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zjydbj@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[210.72.141.66]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-19 11:15:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-19 03:15:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好，博主，我用您的方式出现了以下问题，麻烦您帮我看一下
root@ecs-94a9:/home/kent/docker/3D# ls
assets  convert.sh  input  output
root@ecs-94a9:/home/kent/docker/3D# ./convert.sh stp input/agv.stp output/agv.gltf
[Error: ENOENT: no such file or directory, open '/home/kent/docker/3D/input/agv.stp.gltf'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/kent/docker/3D/input/agv.stp.gltf'
}
Done! Exported to /home/kent/docker/3D/input
/home/kent/docker/3D/output/agv.gltf

这个原文件输入路径一直默认给我写成了agv.stp.gltf，多了个gltf，请问如何解决呢]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1628306607.005808;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1626664530]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626664530.553218;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1263</wp:comment_id>
			<wp:comment_author><![CDATA[Kent]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zjydbj@163.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.csdn.net/qq_34177812/article/details/104726405</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[210.72.141.66]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-19 11:17:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-19 03:17:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好，博主，我用您的方式出现了以下问题，麻烦您帮我看一下

root@ecs-94a9:/home/kent/docker/3D# ls
assets  convert.sh  input  output
root@ecs-94a9:/home/kent/docker/3D# ./convert.sh stp input/agv.stp output/agv.gltf
[Error: ENOENT: no such file or directory, open '/home/kent/docker/3D/input/agv.stp.gltf'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/kent/docker/3D/input/agv.stp.gltf'
}
Done! Exported to /home/kent/docker/3D/input
/home/kent/docker/3D/output/agv.gltf

这个原文件输入路径一直默认给我写成了agv.stp.gltf，多了个gltf，请问如何解决呢]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1626664622]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626664622.386431;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1628306679.279025;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>深度学习的数学-神经单元误差和反向传播</title>
		<link>https://blog.wj2015.com/2020/03/09/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e5%8d%95%e5%85%83%e8%af%af%e5%b7%ae%e5%92%8c%e5%8f%8d%e5%90%91%e4%bc%a0%e6%92%ad/</link>
		<pubDate>Mon, 09 Mar 2020 03:49:04 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=574</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本篇博客主要讲神经单元误差的定义及其含义，以及比较重要的误差反向传播法，也就是大名鼎鼎的BP算法

<h2>正文</h2>

<h3>神经单元误差</h3>

<h4>梯度下降算法在实际应用中的难点</h4>

之前提到的<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/2020/03/01/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d/">梯度下降法</a>，可以通过算偏导数的形式来获得梯度，从而以最快的速度把所有偏导数降到0
但是有一个比较麻烦的问题是，神经网络的规模比较大，将平方误差的式子化简到以神经单元的权重和偏置的表示就很麻烦了，更别说还要<strong>对每个权重和偏置做偏导数</strong>

<h4>神经单元误差的定义和含义</h4>

书中定义了神经单元误差如下，表示误差函数对某个神经单元的综合输入的偏导数
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/877dc2aada4ae8777f51544a4052d24b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/877dc2aada4ae8777f51544a4052d24b.png" alt="" /></a>
这个偏导数有什么含义呢？从式子上可以理解为 加权输入 $z_j^l$ 给平方误差（损失函数）的变化率，根据最小值条件（z是关于权重、偏置的函数），在极值点的时候，这个变化率也应该是0，故可以称之为<strong>误差</strong>

<h4>神经单元误差关于权重和偏置的偏导数（重点）</h4>

然后下一步就是把这个定义融入到现有的平方误差关于权重和偏置的偏导数中去，希望能得到一个偏导数与神经单元误差的关系

平方误差的式子如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/cd3054fde34370bd7a739deaf4238eb7.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/cd3054fde34370bd7a739deaf4238eb7.png" alt="" /></a>

PS:本篇博客都用书中提到的 3 * 4 的黑白图像识别 0/1 的模型作为例子，第一层是输入层，第二层式隐藏层，第三层是输出层
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/02/694cab0316340054b7064a78f29b6921.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/02/694cab0316340054b7064a78f29b6921.png" alt="" /></a>

在看推导之前，可以先复习一下单变量和多变量偏导数公式，可以参考之前写的一篇博客 <a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/2020/02/28/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6%e5%8e%9f%e7%90%86-%e5%a4%8d%e6%9d%82%e5%87%bd%e6%95%b0%e6%b1%82%e5%af%bc%e7%9a%84%e9%93%be%e5%bc%8f%e4%bc%a0%e9%80%92%e5%8f%8a%e5%a4%9a/">深度学习的数学原理-复杂函数求导的链式传递及多变量近似公式</a>

<h5>关于权重的偏导数推导</h5>

根据单变量偏导数公式（设${z_1^2}$为${w_{11}^2}$的函数），即可得到如下式子
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/11752c0f2617caa3164550781cda60d2.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/11752c0f2617caa3164550781cda60d2.png" alt="" /></a>
还是以3 * 4的黑白图片识别0/1为例子，根据神经单元误差的定义，以及 ${z_1^2}={w_{11}^2x_1}+{w_{12}^2x_2}+....+{w_{12}^2x_{12}}+{b_1^2}$ 的关系式，计算一下可以得到
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/e07650c8dc62d7360cf476285a9f5691.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/e07650c8dc62d7360cf476285a9f5691.png" alt="" /></a>

<h5>偏置的偏导数推导</h5>

同理，因为b关于z的偏导数是常数1，所以在这个例子中也可以推出误差函数关于某个偏置的偏导数
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/c6b9b80aa0e0e7f528583891f0be062a.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/c6b9b80aa0e0e7f528583891f0be062a.png" alt="" /></a>

<h5>公式一般化</h5>

这样就把梯度下降中的偏导数求解转换到了求解神经单元误差上
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/3cf947a32183f48644d92bf1c84f90f9.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/3cf947a32183f48644d92bf1c84f90f9.png" alt="" /></a>

<h3>误差反向传播法</h3>

<h4>输出层的神经单元误差计算</h4>

根据平方误差的公式及定义，输出层的神经单元误差是最好计算的，还是那个 3 * 4 的黑白图识别数字的例子，第三层作为输出层，可以推算出如下公式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/d9e1ae5669d55ba84357c6a81a76558a.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/d9e1ae5669d55ba84357c6a81a76558a.png" alt="" /></a>
一般化后，得到了输出层神经单元误差的计算式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/9e70e34b3530cd9c72b334f66cc275b9.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/9e70e34b3530cd9c72b334f66cc275b9.png" alt="" /></a>

<h4>反向递推关系式(重点)</h4>

那么，根据神经单元间的关系，是否能从输出层的神经单元误差<strong>反向推导出前一层神经单元误差</strong>的关系式呢？

在看推导之前，还是需要复习一下多变量函数偏导数链式法则
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/dd933f9a0853c1438d4941bea0e25112.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/dd933f9a0853c1438d4941bea0e25112.png" alt="" /></a>

同样的 3 * 4 的黑白图像识别0/1的例子，输出层是第三层，那么$z_1^3$ 和 $z_2^3$ 可以用 $z_1^2$ 表示，所以 C 就可以看作关于 $z_1^3$ 和 $z_2^3$ 的复合函数，再把  $z_1^3$ 对  $z_1^2$ 的函数看作 $z_1^3$ 对 $a_1^2$ 的函数，$z_2^3$ 对 $z_1^2$ 的函数看作 $z_2^3$ 对 $a_1^2$的函数，根据<strong>单变量偏导数公式</strong> 即可推导出如下结果
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/eda8a798e4cd98d52ab7598623a25bbd.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/eda8a798e4cd98d52ab7598623a25bbd.png" alt="" /></a>

把神经单元误差的概念带入进去
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/f356964781c00e9b8a802b85e0b343f2.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/f356964781c00e9b8a802b85e0b343f2.png" alt="" /></a>
根据 z 的定义式，也不难得出
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/d233777913f384ef4e3a1f27f532ddfd.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/d233777913f384ef4e3a1f27f532ddfd.png" alt="" /></a>
化简一下，即可得到一个递推式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/af4d09c3a417a27788d85f48f9d4fef1.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/af4d09c3a417a27788d85f48f9d4fef1.png" alt="" /></a>
提取相同项，得到如下结果
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/90da0ec5b50e4b012ddb55e31f646945.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/90da0ec5b50e4b012ddb55e31f646945.png" alt="" /></a>

整理一下，推广到例子中的第二层（隐藏层）
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/04f385ca7d802bc0a3add2d71f7ea6f0.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/04f385ca7d802bc0a3add2d71f7ea6f0.png" alt="" /></a>

再递推一下，得到每一层的某个神经单元误差与上一层和下一层的神经单元误差关系式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/9fec1e766781b623030061f218a9d778.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/9fec1e766781b623030061f218a9d778.png" alt="" /></a>

到这里，就可以通过最后一层的神经单元误差，反向推导出上一层的神经单元误差了，一直往前推，就能得到网络中所有的神经单元误差
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/9dab4b23e7b3c5ec0af4dfb797c9ef91.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/9dab4b23e7b3c5ec0af4dfb797c9ef91.png" alt="" /></a>

<h4>通过反向递推公式，对梯度下降法的改进</h4>

只需要求输出层的神经单元误差，即可根据反向递推公式推算出上一层的神经单元误差，从而进一步<strong>求出平方误差对每个神经元的偏置或权重的偏导数，进而得到梯度</strong>，就像下图所示
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/949000a0ed90e650ee83d94c6907a54c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/949000a0ed90e650ee83d94c6907a54c.png" alt="" /></a>
图中的式(11) 表示平方误差对权重/偏置的偏导数的一般公式，可以通过神经单元误差得到梯度中的偏导数
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/d2a9903f3a8bbf78e845a0a4f5c720cc.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/d2a9903f3a8bbf78e845a0a4f5c720cc.png" alt="" /></a>

<h2>总结</h2>

本篇博客主要引入了神经单元误差这一概念，以及将神经单元误差引入到梯度求解中的偏导数式子里边去，并了解了误差反向传播法，通过神经单元误差的递推公式，从最后一层开始推算得出网络中所有的神经单元误差，进而求出梯度]]></content:encoded>
		<excerpt:encoded><![CDATA[本篇博客主要讲神经单元误差的定义及其含义，以及比较重要的误差反向传播法，也就是大名鼎鼎的BP算法]]></excerpt:encoded>
		<wp:post_id>574</wp:post_id>
		<wp:post_date><![CDATA[2020-03-09 11:49:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-09 03:49:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e5%8d%95%e5%85%83%e8%af%af%e5%b7%ae%e5%92%8c%e5%8f%8d%e5%90%91%e4%bc%a0%e6%92%ad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bp"><![CDATA[BP]]></category>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d"><![CDATA[梯度下降]]></category>
		<category domain="post_tag" nicename="%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0"><![CDATA[深度学习]]></category>
		<category domain="post_tag" nicename="%e7%a5%9e%e7%bb%8f%e5%8d%95%e5%85%83%e8%af%af%e5%b7%ae"><![CDATA[神经单元误差]]></category>
		<category domain="post_tag" nicename="%e8%af%af%e5%b7%ae%e5%8f%8d%e5%90%91%e4%bc%a0%e6%92%ad%e6%b3%95"><![CDATA[误差反向传播法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[236]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[315]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>608</wp:comment_id>
			<wp:comment_author><![CDATA[py]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pycmy@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[106.121.131.107]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-12-18 14:49:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-12-18 06:49:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[感谢作者，第一次看机器学习，文章讲得好，不过感觉有点地方是不是错了，比如“将平方误差的式子化简到以神经单元的权重和梯度的表示就很麻烦了”这里，“梯度”是不是应该是“偏置”？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608274198.335312;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1608274198]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608527984.193487;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>351</wp:comment_id>
			<wp:comment_author><![CDATA[深度学习的数学-卷积神经网络的误差反向传播 &#8211; Jeffrey Wang的个人博客]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com/2020/03/12/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e7%9a%84%e8%af%af%e5%b7%ae%e5%8f%8d%e5%90%91%e</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[123.206.67.59]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-03-12 18:54:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-03-12 10:54:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 在全连接隐藏层反向递推的过程中，有一个神经单元误差的概念，忘了的可以看一下之前记录的博客：深度学习的数学-神经单元误差和反向传播 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1584010442]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1584010442.309662;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1584067834.203779;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>653</wp:comment_id>
			<wp:comment_author><![CDATA[Jie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[admin@wj2015.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.164.179.72]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-12-21 13:26:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-12-21 05:26:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[是的，非常感谢您的建议，已对相关部分进行修复。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>608</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1608528375]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1608528375.341771;s:5:"event";s:11:"check-error";s:4:"user";s:3:"Jie";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>深度学习的数学-卷积神经网络的结构和变量关系</title>
		<link>https://blog.wj2015.com/2020/03/11/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e7%9a%84%e7%bb%93%e6%9e%84%e5%92%8c%e5%8f%98%e9%87%8f%e5%85%b3%e7%b3%bb/</link>
		<pubDate>Wed, 11 Mar 2020 03:20:22 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=577</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本篇博客主要介绍卷积神经网络的组成部分，以及变量表示，最后附上卷积神经网络代价函数的计算

<h2>正文</h2>

前文中学到的神经网络都是全连接类型的，隐藏层对输入层有着各自固定的偏好模式，满足偏好模式（权重和偏置来控制）兴奋度会提高；
卷积神经网络在隐藏层也有类似的特性，不过整理偏好的过程是运动的，会将偏好兴奋结果整理到少量神经单元中，<strong>以减少神经单元数量，并且可以进行特定的模式识别</strong>，可能初看还无法理解这段话，看了下面的过滤器和特征映射应该就会明白了。

<strong>本文中所有的例子均为：</strong>建立一个神经网络，用于识别 6 * 6 的黑白图像中手写的 1 2 3，那么输入层神经单元就有 6行6列共 36 个

<h3>过滤器和特征映射（重点）</h3>

过滤器可以理解为一种偏好模式，比如像书中展示的一个过滤器S，对如下形式的图形敏感
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/fdb59d7e7b2111a7126bac8c197122e7.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/fdb59d7e7b2111a7126bac8c197122e7.png" alt="" /></a>
那么，拿着这个过滤器，在例子中的 6 * 6 的图形中从左到右，从上到下依次识别，<strong>每次识别过滤器S那么大的区域</strong>，并将敏感度结果保存起来，相似度越高就越复合过滤器的偏好
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/d2c7e47aa1f66260bfb0d7f0cb49999f.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/d2c7e47aa1f66260bfb0d7f0cb49999f.png" alt="" /></a>
得到的结果就是<strong>特征映射</strong>，也就是根据过滤器S得到的卷积
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/2ca85b19ab4d116ec74646e59fc80259.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/2ca85b19ab4d116ec74646e59fc80259.png" alt="" /></a>

<h3>卷积层神经单元输出与池化</h3>

简单卷积后，神经单元依旧有 16 个，还是有点多，那么还可以做一个操作叫做<strong>池化</strong>，书中提到了三种池化方式，首先来看下最简单的<strong>最大池化</strong>，剩下的两种也很容易理解了

池化的目标就是减少神经单元的数量，但是又能代表卷积层中的结果数据，那么把整个神经单元拆成 2 * 2 的大区域，把每个大区域的<strong>最大值（最大输出）作为代表放到池化层</strong>的对应位置，即可得到池化的结果
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/314d0ed29114c14a8f24303c92ba90b2.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/314d0ed29114c14a8f24303c92ba90b2.png" alt="" /></a>

<h4>三种池化方式</h4>

书中提到了如下三种池化方式：

<ul>
<li>最大池化，使用区域中最大值作为代表值</li>
<li>平均池化，使用区域中的平均值作为代表值</li>
<li>L2池化，使用平方和开方的值作为代表值，$\sqrt{a_1^2+a_2^2+a_3^2+a_4^2}$</li>
</ul>

<h3>变量和参数定义（重点）</h3>

书中给到了如下参数定义，结合第二幅图可能更能够理解
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/97dd6c527959a2c744b2c0f59a4785c1.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/97dd6c527959a2c744b2c0f59a4785c1.png" alt="" /></a>
简单地说，<strong>输入层右上角带上了 I</strong> 表示Input，<strong>每个过滤器K对应了以 $w_{ij}^{Fk}$ 表示的神经单元</strong>，经过过滤器的<strong>卷积计算都对应生成的结果</strong>（特征映射结果），卷积层中的加权输入依旧用z表示、偏置用b表示、输出用a表示，不过<strong>右上角的F代表Filter</strong>；卷积层对应的池化层也是如此，但是<strong>池化层的神经单元输出等于输入</strong>，所以没有偏置；输出层的变化是，<strong>右上角带上了一个O</strong>，表示Output，学习数据与之前的别无二致
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/a2b9f739b8828bc7874f2ed08ed6a992.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/a2b9f739b8828bc7874f2ed08ed6a992.png" alt="" /></a>

<h3>各个层的变量关系</h3>

<h4>输入层</h4>

输入层中的神经单元，输入等于输出，所以 $a_{ij}^I = x_{ij}$

<h4>过滤器和卷积层</h4>

过滤器，右上角的F代表 Filter，过滤器中的w同样代表了对应位置的神经单元与过滤器中神经单元的权重
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/a60e7bdd940fd76ee98f981f33aa8b87.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/a60e7bdd940fd76ee98f981f33aa8b87.png" alt="" /></a>
所以第一块区域使用第一个过滤器得到的卷积结果 $c_{11}^{F1}=w_{11}^{F1}x_{11}+w_{12}^{F1}x_{12}+w_{13}^{F1}x_{13}....w_{33}^{F1}x_{33}$
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/a50e78632bc8d5ca58cf932db598c0bb.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/a50e78632bc8d5ca58cf932db598c0bb.png" alt="" /></a>

不难得到一个 3 * 3 的过滤器，卷积结果公式如下，如果不是 3 * 3，w的最终下标再变化下即可
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/cdd5fe402d42b0ec65d542a030a2c8d2.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/cdd5fe402d42b0ec65d542a030a2c8d2.png" alt="" /></a>

一般的，过滤器会有自己的偏置 $b^{Fk}$，这个偏置与输入层的神经单元无关，与过滤器中的神经单元也无关，最终得到如下的加权输入（输入到特征映射-卷积层神经单元）
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/988c46c8bf36c8391d2f4e0a4ef4b03b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/988c46c8bf36c8391d2f4e0a4ef4b03b.png" alt="" /></a>

卷积层的神经单元激活函数用 a 表示，所以卷积层的神经单元可以如下图表示
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/9637cfdc0cee3ef264c1ce9ac01b4a63.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/9637cfdc0cee3ef264c1ce9ac01b4a63.png" alt="" /></a>

<h4>池化层</h4>

就是把卷积层的神经单元结果压缩到更少的神经单元中
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/f8a8a743b6e1b11de1a9528e09196428.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/f8a8a743b6e1b11de1a9528e09196428.png" alt="" /></a>
最大池化，就简单求一下几个神经元输出的最大值就可以了
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/984d9e59a124f56f66d754c956a25a0d.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/984d9e59a124f56f66d754c956a25a0d.png" alt="" /></a>
然后池化层的神经单元，输入等于输出，激活函数 $a(x)=x$
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/ec8c2ad7dfbfb4bd103c3355129d9e94.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/ec8c2ad7dfbfb4bd103c3355129d9e94.png" alt="" /></a>

<h4>输出层</h4>

池化层和输出层的连接方式为全连接，输出层神经单元的输入就是权重求和，再加上池化层的整体偏置即可
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/3f6e4d2ef34f7d3c84c65e69bd4dee3d.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/3f6e4d2ef34f7d3c84c65e69bd4dee3d.png" alt="" /></a>
不难得到如下式子
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/2d62a960b996defbeb60bff6238cf17f.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/2d62a960b996defbeb60bff6238cf17f.png" alt="" /></a>
最后激活函数处理下，就可以得到输出神经单元的输出值
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/68e11c1d1e5b8a7d7442678348f42b48.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/68e11c1d1e5b8a7d7442678348f42b48.png" alt="" /></a>

<h3>代价函数的计算</h3>

上面拿到输出神经单元的输出值后，根据代价函数的定义，把正解和输出值做差值平方即可得到平方误差C
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/c9c1e307047b444db04a6a5f7d9e0cb8.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/c9c1e307047b444db04a6a5f7d9e0cb8.png" alt="" /></a>
与之前全连接层的式子类似
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/3672ab20cac66fd21018c94bdecb2d87.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/3672ab20cac66fd21018c94bdecb2d87.png" alt="" /></a>
经过多次学习，得到多个平方误差C，那么整个神经网络的代价函数就可以表示为如下式子
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/d11069be533e1907f5406b244a2e9173.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/d11069be533e1907f5406b244a2e9173.png" alt="" /></a>

同样的，需要像之前一样得到代价函数在最小值的时候的各个参数（各个神经单元的偏置和权重），同样可以使用误差反向传播计算梯度，再通过梯度下降推导各个参数的最优解。

<h2>总结</h2>

主要介绍了过滤器、卷积层和池化层中间的关系和工作原理，以及在卷积神经网络中各个层的变量参数定义，以及各个层之间的数学关系，最后得到了代价函数。]]></content:encoded>
		<excerpt:encoded><![CDATA[主要介绍了过滤器、卷积层和池化层中间的关系和工作原理，以及在卷积神经网络中各个层的变量参数定义，以及各个层之间的数学关系，最后得到了代价函数。]]></excerpt:encoded>
		<wp:post_id>577</wp:post_id>
		<wp:post_date><![CDATA[2020-03-11 11:20:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-11 03:20:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e7%9a%84%e7%bb%93%e6%9e%84%e5%92%8c%e5%8f%98%e9%87%8f%e5%85%b3%e7%b3%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c"><![CDATA[卷积神经网络]]></category>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%b1%a0%e5%8c%96"><![CDATA[池化]]></category>
		<category domain="post_tag" nicename="%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0"><![CDATA[深度学习]]></category>
		<category domain="post_tag" nicename="%e7%89%b9%e5%be%81%e6%98%a0%e5%b0%84"><![CDATA[特征映射]]></category>
		<category domain="post_tag" nicename="%e8%bf%87%e6%bb%a4%e5%99%a8"><![CDATA[过滤器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[125]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[369]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>深度学习的数学-卷积神经网络的误差反向传播</title>
		<link>https://blog.wj2015.com/2020/03/12/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e7%9a%84%e8%af%af%e5%b7%ae%e5%8f%8d%e5%90%91%e4%bc%a0%e6%92%ad/</link>
		<pubDate>Thu, 12 Mar 2020 10:38:30 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=581</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

本篇博客主要记录反向传播法在卷积神经网络中的应用，如何像全连接的隐藏层那样，通过输出层的神经单元误差反向推算出所有层的神经单元误差，最终得到梯度。

<h2>正文</h2>

博主在看完卷积神经网络的正向运作流程后，其实是有一点懵圈的，于是我冷静了一天再继续看卷积神经网络的反向传递；正向运作流程中的 『池化』、『特征映射』应该怎么样用式子表示？经过了池化（最大/平均/L2）的神经单元输入，又怎样体现在神经单元误差的计算上？可以带着这些问题继续往下看。

<h3>卷积神经网络中的关系式</h3>

在进行推算之前，首先确定好每个层神经单元之间的关系式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/baa9475f78f8ac9a3fcf407980013972.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/baa9475f78f8ac9a3fcf407980013972.png" alt="" /></a>

<h4>卷积层</h4>

卷积层中每个神经单元的<strong>输入可以理解为过滤器的加权输出</strong>，卷积层神经单元的输出套上激活函数就可以了。
所以关系式是下面这个样子的：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/353dcd50b76de811896021413dccac9e.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/353dcd50b76de811896021413dccac9e.png" alt="" /></a>

<h4>池化层</h4>

池化层的输入等于输出，如果是最大池化，则使用Max求一定范围内的极值就可以了（当前例子是将 4 * 4 的卷积最大池化为 2 * 2 的池化层）
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/71f38ce53d679b13bd6939c56fa84745.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/71f38ce53d679b13bd6939c56fa84745.png" alt="" /></a>

<h4>输出层</h4>

而输出层和池化层的神经单元是全连接的，所以就是熟悉的 <strong>权重 * 池化输出求和</strong> 公式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/c0c6fe84dee30c181fad010abc717b87.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/c0c6fe84dee30c181fad010abc717b87.png" alt="" /></a>

<h4>平方误差（损失函数）</h4>

平方误差依旧由 正解 - 输出神经单元的输出，做平方和
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/fbd77c2420e048ec6f123068fbeda8d4.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/fbd77c2420e048ec6f123068fbeda8d4.png" alt="" /></a>

<h3>梯度下降法</h3>

梯度下降如果有些忘了的话，链接在此：<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/2020/03/01/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d/">深度学习的数学-梯度下降</a>
梯度就可以看作是代价函数的导数整体下降速度最快的分量，每个变量只需要顺着梯度做减法，即可以最快速度达到整体极值点的位置
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/f32fa0ee30193687ed1af84d586a31a8.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/f32fa0ee30193687ed1af84d586a31a8.png" alt="" /></a>

各个神经单元的的权重、偏置都是变量，为方便理解书中也把每个变量代表的含义标了一下，如下图所示：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/bf6a45681386f7d34d8835471f2d8991.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/bf6a45681386f7d34d8835471f2d8991.png" alt="" /></a>

<h4>卷积层和输出层的神经单元误差（重点）</h4>

在全连接隐藏层反向递推的过程中，有一个神经单元误差的概念，忘了的可以看一下之前记录的博客：<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/2020/03/09/%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e7%a5%9e%e7%bb%8f%e5%8d%95%e5%85%83%e8%af%af%e5%b7%ae%e5%92%8c%e5%8f%8d%e5%90%91%e4%bc%a0%e6%92%ad/">深度学习的数学-神经单元误差和反向传播</a>

简单来说就是损失函数对神经单元的综合输入求偏导数，这个偏导数衡量这个<strong>神经单元与理想状态（理想是达到0）的差距</strong>

而卷积神经网络中，有卷积层和输出层两种类型的神经元，分别定义如下

<blockquote>
  PS:池化层输入等于输出是没有额外变量的，过滤器的偏置和权重都体现在了卷积层的综合输入 z 上
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/f74bacb9fb788391b924585cfde0bfc7.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/f74bacb9fb788391b924585cfde0bfc7.png" alt="" /></a>

这两个神经单元误差影响整体平方误差画一个图就像下面这样：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/3d7910813a06eea3950d147f2ad1fd6b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/3d7910813a06eea3950d147f2ad1fd6b.png" alt="" /></a>

<h4>输出层的神经单元误差计算</h4>

在看神经单元误差对权重偏置的影响之前，先看一下怎么计算输出层的神经单元误差，其定义如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/07b02d777d44baae27c4b8d5ea0941ad.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/07b02d777d44baae27c4b8d5ea0941ad.png" alt="" /></a>

由平方误差的定义式可以知道 C 对 $a_n^o$ 的偏导数

<blockquote>
  PS:乘 1/2  就是为了不让偏导数前面带常数 2
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/fbd77c2420e048ec6f123068fbeda8d4.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/fbd77c2420e048ec6f123068fbeda8d4.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/7eaedb1bfbca277fcefdabcbb1c92240.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/7eaedb1bfbca277fcefdabcbb1c92240.png" alt="" /></a>
带入式子即可得到输出层的神经单元误差公式
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/b100917b4c9becb5fc4b461cb3c5c61c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/b100917b4c9becb5fc4b461cb3c5c61c.png" alt="" /></a>

<h5>输出层的神经单元与其权重偏置的关系</h5>

与之前一样，还是从输出层开始，建议看的时候结合这个式子看，很容易就看出来了
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/c0c6fe84dee30c181fad010abc717b87.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/c0c6fe84dee30c181fad010abc717b87.png" alt="" /></a>
同样根据单变量复合函数求偏导数的链式法则，把 $z_1^o$ 看作 $w_{i-j}^{Ok}$ 的函数，再根据输出层神经单元误差的定义，得到如下式子

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/227ec607f0f312680f8dbfd6eae43879.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/227ec607f0f312680f8dbfd6eae43879.png" alt="" /></a>

相同的思路，对输出层神经单元的偏置求偏导数，能得到如下结果

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/55bb5a46ccbb2cfab5de7d97c739cfaa.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/55bb5a46ccbb2cfab5de7d97c739cfaa.png" alt="" /></a>

<h5>卷积层的神经单元误差与其权重偏置的关系</h5>

还是先看下上方贴出来的式子如下
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/353dcd50b76de811896021413dccac9e.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/353dcd50b76de811896021413dccac9e.png" alt="" /></a>

如果但看上面看不太明白，还可以按照书中的思路，先把式子都列出来找找规律
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/c4a23138240fc9d4243426eb14b5113d.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/c4a23138240fc9d4243426eb14b5113d.png" alt="" /></a>

里边的每一个 w 的偏导数一目了然
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/697cb04a12a3e3bfc176e4ad9d2082d2.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/697cb04a12a3e3bfc176e4ad9d2082d2.png" alt="" /></a>

再找规律整理一下就能得到式子

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/805646ad7678d8715ecc36a354e541c4.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/805646ad7678d8715ecc36a354e541c4.png" alt="" /></a>

再看一下上面的定义式，根据单变量复合函数的偏导数公式，很容易也能得出下面的结论
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/76bf98db7d2b96d8b33c103889361042.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/76bf98db7d2b96d8b33c103889361042.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/65730357add151b21cef38e3dece7a22.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/65730357add151b21cef38e3dece7a22.png" alt="" /></a>

<h3>反向递推关系式（重点）</h3>

为了减少偏导数的计算，再一次来到了紧张刺激的反向递归关系烧脑环节，书中依旧是以 6 * 6 手写识别的神经网络为例，便于理解推导过程

三个输出神经单元的情况下，有三条路径可以影响到平方误差，把平方误差对 $z_{ij}^{Fk}$ 的偏导数转向对输出层的三个 $z_i^O$ 求偏导数，即可得到如下式子
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/ade7a07de93360de41f5b3fff3e9b643.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/ade7a07de93360de41f5b3fff3e9b643.png" alt="" /></a>

提取同类项可得：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/deee209fd1bcaa456955a756d1b392df.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/deee209fd1bcaa456955a756d1b392df.png" alt="" /></a>

然后把括号中的非神经单元误差的导数，根据关系式求出来（回想z = 权重 * 输出的那个式子，所以 z 对 a 求导结果自然是权重）
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/c0c6fe84dee30c181fad010abc717b87.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/c0c6fe84dee30c181fad010abc717b87.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/625560022bc83ab7482f31c14a8322fa.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/625560022bc83ab7482f31c14a8322fa.png" alt="" /></a>

然后计算 $a_{ij}^{Pk}$ 对 $z_{ij}^{Pk}$ 的导数
最大<strong>池化层，输入等于输出</strong>，等于卷积层对应神经单元的最大值；两者相等（激活函数 a = x），所以导数为1
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/9b68ed26c8547ce841e9f3f7a83aa122.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/9b68ed26c8547ce841e9f3f7a83aa122.png" alt="" /></a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/3ad8a5f23779a7bcc9c7b7adf4cfcc69.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/3ad8a5f23779a7bcc9c7b7adf4cfcc69.png" alt="" /></a>

接着计算  $z_{ij}^{Pk}$ 对 $a_{ij}^{Fk}$ 的导数，最大时这两个数相等（<strong>激活函数 a = x</strong>），否则为0（可以理解为激活函数 a = 0 * x）
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/0047fcedde75158c3056da249a8f9f73.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/0047fcedde75158c3056da249a8f9f73.png" alt="" /></a>

最后那个 $z_{ij}^{Fk}$ 对 $a_{ij}^{Fk}$ 的导数<strong>就是激活函数的导数</strong>，带入即可得到如下式子：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/2070693f498719a4185cefb9bf78846c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/2070693f498719a4185cefb9bf78846c.png" alt="" /></a>
推广一下，就可以通过下一层的神经单元误差反推上一层的神经单元误差
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/03/eb06208de7bd6d1c4ee735940b138167.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/03/eb06208de7bd6d1c4ee735940b138167.png" alt="" /></a>

最后只需要根据神经单元误差与权重和偏置的关系，即可算出梯度，再使用梯度下降法，逼近全局最低点即可

<h2>总结</h2>

首先根据卷积神经网络的概念引入了卷积神经网络中各层的数学关系式，并通过关系式求出了<strong>输出的神经单元误差</strong>及其<strong>各层的神经单元误差与权重和偏置的关系</strong>，最后用全连接神经网络类似的推导方法，推导出了反向递推关系式。]]></content:encoded>
		<excerpt:encoded><![CDATA[本篇博客主要记录反向传播法在卷积神经网络中的应用，如何像全连接的隐藏层那样，通过输出层的神经单元误差反向推算出所有层的神经单元误差，最终得到梯度。]]></excerpt:encoded>
		<wp:post_id>581</wp:post_id>
		<wp:post_date><![CDATA[2020-03-12 18:38:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-12 10:38:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e7%9a%84%e6%95%b0%e5%ad%a6-%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e7%9a%84%e8%af%af%e5%b7%ae%e5%8f%8d%e5%90%91%e4%bc%a0%e6%92%ad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bp%e7%ae%97%e6%b3%95"><![CDATA[BP算法]]></category>
		<category domain="post_tag" nicename="%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c"><![CDATA[卷积神经网络]]></category>
		<category domain="post_tag" nicename="%e5%8f%8d%e5%90%91%e9%80%92%e6%8e%a8%e5%85%b3%e7%b3%bb%e5%bc%8f"><![CDATA[反向递推关系式]]></category>
		<category domain="category" nicename="%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0"><![CDATA[深度学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[401]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[444]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>629</wp:comment_id>
			<wp:comment_author><![CDATA[py]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pycmy@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[117.100.252.243]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-12-19 19:40:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-12-19 11:40:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[博主讲的很详细，感谢。有一点问题，式子（23）那里，“最大时这两个数相等（激活函数 a = x），否则为0（可以理解为激活函数 a = 0 * x）”这里，按照我的理解，这里是池化层的加权输入对卷积层的输出的偏导，所以感觉不应该“激活函数”这个词]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608527961.63601;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1608378027]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608378027.964071;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>654</wp:comment_id>
			<wp:comment_author><![CDATA[Jie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[admin@wj2015.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.wj2015.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.164.179.72]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-12-21 13:35:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-12-21 05:35:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hello，这里在看书的时候就是如此介绍的，我的理解是每个神经单元都拥有其激活函数，池化层的神经单元也不例外，这里只是解释方便写作了 a = 0*x，其实它的激活函数是该段对应的『分段函数』（见图片）。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1608528934]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1608528934.662326;s:5:"event";s:11:"check-error";s:4:"user";s:3:"Jie";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Redis-如何进行内存占用分析?</title>
		<link>https://blog.wj2015.com/2020/07/01/redis-%e5%a6%82%e4%bd%95%e8%bf%9b%e8%a1%8c%e5%86%85%e5%ad%98%e5%8d%a0%e7%94%a8%e5%88%86%e6%9e%90/</link>
		<pubDate>Wed, 01 Jul 2020 08:26:47 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=601</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>目的</h2>

博主最近在工作上需要清理一个数年项目的 Redis，内存告警 90%，但是不能单靠看代码和直觉来清理，需要有个直观的参考指标。
并且线上的数据删除需要谨慎，删除的 key 众多，如果删出了问题势必需要快速回滚保证业务正常运行，所以还编写了一个安全删除的脚本，方便线上操作。

<h2>导出</h2>

在做全量的分析之前，首先需要拿到全量的 <code>.rdb</code> 文件。
如果是运行在 Linux 服务器中的 <code>redis-server</code>，可以直接使用 <code>dump.rdb</code>，存的东西太大的话就直接在从库主机上做分析即可，不用全量下载到本地。

如果是云服务商的话，就需要按照其官方文档的引导，获取到 <code>.rdb</code>，博主目前所在公司使用了 aws 的全套服务，针对 redis 实例导出 rdb 文件搜集了如下资料。
已经获取到 <code>.rdb</code> 文件的可以跳过这一段了，由于里边操作较为复杂为节省同样使用 aws 同学的时间，大概整理一下操作过程

<ul>
<li>首先，创建一个与 redis实例 <strong>同区</strong>的存储桶</li>
<li>然后给存储桶配置权限，进入桶的访问控制列表 > 其他AWS账户的访问权限，添加账户输入 <code>540804c33a284a299d2547575ce1010f2312ef3da9b3a053c8bc45bf233e4353</code>，权限勾选

<ul>
<li><strong>列出对象</strong></li>
<li><strong>写入对象</strong></li>
<li><strong>读取存储桶权限</strong></li>
</ul></li>
<li>然后，在 <code>ElastiCache控制面板</code> > <code>备份</code> > 选中备份 > 复制</li>
<li>写一个标志符，目标s3的位置选刚才建好的桶，点击复制，直到导出完成</li>
<li>s3中发现对应的 rdb 文件：memory-clear-1-0001.rdb，下载即可</li>
</ul>

<blockquote>
  手动备份的官方文档：https://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/red-ug/backups-manual.html
  
  导出备份的官方文档：https://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/red-ug/backups-exporting.html
</blockquote>

<h2>分析</h2>

拿到 <code>.rdb</code> 文件后，下一步就是分析这个 rdb 文件中各个 key 占用的内存了，网络上也提供到了相关的工具。

<h3>安装工具并分析</h3>

<pre><code class="language-shell line-numbers">pip install rdbtools
pip install python-lzf # 加快转储速度
</code></pre>

进入到 rdb 所在目录，生产内存报告

<pre><code class="language-shell line-numbers">rdb -c memory  dump.rdb &gt; dump.csv
</code></pre>

下一步的分析，可以借助 excel 也可以借助 Mysql 等数据库工具导入 csv 后进行

CSV的内部结构大概是这样的：

<table>
<thead>
<tr>
  <th>database</th>
  <th>type</th>
  <th>key</th>
  <th>size_in_bytes</th>
  <th>encoding</th>
  <th>num_elements</th>
  <th>len_largest_element</th>
  <th>expiry</th>
</tr>
</thead>
<tbody>
<tr>
  <td>0</td>
  <td>hash</td>
  <td>Funcoloring_update_picture_formal:com.cm.fun.color:Android:2.1.1:v3:large_preview</td>
  <td>459060</td>
  <td>hashtable</td>
  <td>1</td>
  <td>432708</td>
  <td></td>
</tr>
<tr>
  <td>0</td>
  <td>hash</td>
  <td>ad_stats:20200624:apps:com.ios.qyb.incolour</td>
  <td>201</td>
  <td>ziplist</td>
  <td>4</td>
  <td>19</td>
  <td>2020-07-09T00:00:04.621000</td>
</tr>
<tr>
  <td>0</td>
  <td>hash</td>
  <td>ad_stats:20200617:com.cm.fun.color:upltv:inter_open</td>
  <td>206</td>
  <td>ziplist</td>
  <td>4</td>
  <td>19</td>
  <td>2020-07-02T00:00:33.171000</td>
</tr>
<tr>
  <td>0</td>
  <td>hash</td>
  <td>ad_stats:20200620:com.ios.qyb.incolour:MAX:reward_hint</td>
  <td>206</td>
  <td>ziplist</td>
  <td>3</td>
  <td>19</td>
  <td>2020-07-05T00:01:31.333000</td>
</tr>
</tbody>
</table>

<h3>关键列</h3>

第一列 <code>database</code> 表示数据库id，在excel中可以借助筛选功能，得到每个数据库中占用的具体key数量和内存大小。
第二列 <code>type</code> 顾名思义，数据类型
第三列 <code>key</code> 不多讲
第四列 <code>size_in_bytes</code> 就是占用字节数
其他...

<h3>如何定位问题 key</h3>

我一般的操作是，借助 excel 把 <code>size_in_bytes</code> / 1024 / 1024，得到 <code>Mb</code> 单位的内存占用量，再使用排序功能得到占用最多的列
我这边遇到的情况是大约 20% 的 key 占用了超过 80% 的空间，所以一般不用看太多就可以定位到问题。

除了找那些占用巨大的key，还需要重点查看 <strong>没有过期时间的key</strong>，讲道理一般场景下的 redis 不适合单独持久化数据，容易导致数据来源混乱不好维护。

找到 key 之后，根据 key 的规则去找相关的代码，根据逻辑将需要删除的 key 找出来，没有设置过期时间的改代码设置下过期时间。

<h3>恢复数据</h3>

如果你下载到了本地想要恢复线上的数据做测试或方便的查看内容，那么你可能需要通过 <code>.rdb</code> 文件恢复数据
如果安装了 docker，可以把下载的 rdb 重命名为 <code>dump.rdb</code>，映射到 <code>/data</code> 中，在 rdb 文件目录下可以使用如下指令，运行成功后

<pre><code class="language-shell line-numbers">$ docker run --name test-redis -it -v `pwd`/dump.rdb:/data/dump.rdb --rm redis
1:C 01 Jul 2020 07:44:21.073 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
1:C 01 Jul 2020 07:44:21.073 # Redis version=6.0.1, bits=64, commit=00000000, modified=0, pid=1, just started
1:C 01 Jul 2020 07:44:21.073 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
</code></pre>

然后进入容器使用 <code>redis-cli</code> 即可

<pre><code class="language-shell line-numbers">$ docker exec -it test-redis /bin/bash
root@0910da87ae73:/data#
root@0910da87ae73:/data# redis-cli
127.0.0.1:6379&gt;
127.0.0.1:6379&gt; select 2
OK
127.0.0.1:6379[2]&gt; KEYS *
1) "***:****:***"
</code></pre>

如果本地搭好了环境，替换下 <code>dump.rdb</code> 即可，注意修改配置，否则可能加载失败

<pre><code class="language-ini line-numbers">appendonly no
dbfilename dump.rdb # your rdb file name
dir /var/lib/redis # your rdb path
</code></pre>

<h2>安全删除脚本</h2>

为方便回滚，编写了一个小脚本用于安全删除生产环境上的多个 key，执行删除的时候先把 key 按行放到 <code>keys.txt</code> 中，执行如下指令可以在删除的同时备份到 <code>delete-backup.json</code>，如果出了问题直接回滚就好。
脚本仅支持五大基本类型，<code>hyperloglog</code> 类型的数据占用不会太大，也没想法子去兼容，<code>list</code> 类型出于可重复性回滚数据的考虑，每次都会先删除记录再回滚，如果线上在 push 列表，有一定的丢数据风险，考虑停机再次导出并合并有关的 list 数据。

<h3>用法</h3>

<pre><code class="language-shell line-numbers">python convert.py delete keys.txt  # safe delte and generate delete-backup.json
python convert.py revert delete-backup.json  # rollback by delete-backup.json
</code></pre>

<h3>代码</h3>

<pre><code class="language-python line-numbers">import redis
import sys
import os
import json


def check_backup_file(backup_path):
    if os.path.exists(backup_path):
        raise BaseException('you are already have a backup file ' + backup_path + ', please remove it first')


def op_backup(r, keys, output):
    check_backup_file(output)
    result = {}
    for key in keys:
        t = r.type(key)

        if t == 'string':
            val = r.get(key)
        elif t == 'list':
            val = r.lrange(key, 0, -1)
        elif t == 'set':
            val = list(r.smembers(key))
        elif t == 'zset':
            data = r.zrange(key, 0, -1, withscores=True)
            val = {}
            for v in data:
                val[v[0]] = v[1]
        elif t == "hash":
            val = r.hgetall(key)
        else:
            print('warning: ', key, ', type:', t, ' is not support')
            continue
        result[key] = {
            "type": t,
            "val": val,
        }
    with open(output, 'w') as f:
        json.dump(result, f)
    return result


def op_revert(r, result):
    for key in result:
        item = result[key]
        if item['type'] == 'string':
            r.set(key, item['val'])
        elif item['type'] == 'list':
            r.delete(key)
            r.rpush(key, *item['val'])
        elif item['type'] == 'set':
            r.sadd(key, *item['val'])
        elif item['type'] == 'zset':
            r.zadd(key, item['val'])
        elif item['type'] == "hash":
            r.hset(key, mapping=item["val"])
        else:
            print('revert warning: ', key, ', type:', item.type, ' is not support')
            continue


def op_delete(r, keys, backup_path):
    op_backup(r, keys, backup_path)
    r.delete(*keys)


def read_keys(filename):
    keys = []
    with open(filename) as f:
        line = f.readline()
        while line:
            line = line.strip()  # remove \n
            if not line == '':
                keys.append(line)
            line = f.readline()
    return keys


def read_json(filename):
    with open(filename) as f:
        return json.load(f)


def init_test_data():
    result = {
        'test-str': {'type': 'string', 'val': 'this is a long long string'},
        'test-list': {'type': 'list', 'val': ['str1', 'str2', 'str3']},
        'test-set': {'type': 'set', 'val': ['str1', 'str2', 'str3']},
        'test-zset': {'type': 'zset', 'val': {"key1": 6.0, "key2": 8.0, "key3": 10.0}},
        'test-hash': {'type': 'hash', 'val': {"key1": "123", "key2": "456", "key3": "789"}},
    }

    with open('test-backup.json', 'w') as f:
        json.dump(result, f)
    with open('test-keys.txt', 'w') as f:
        for key in result.keys():
            f.writelines(key + "\n")


def main():
    r = redis.Redis(host="localhost", port=6379, db=0, decode_responses=True)

    if len(sys.argv) &lt; 3:
        print("python convert.py backup|delete|revert keys.txt|keys.txt|backup.json")
        return False

    op = sys.argv[1]
    file = sys.argv[2]

    if op == 'backup':
        keys = read_keys(file)
        backup_path = 'backup.json'
        op_backup(r, keys, backup_path)
    elif op == 'delete':
        keys = read_keys(file)
        backup_path = 'delete-backup.json'
        check_backup_file(backup_path)
        op_delete(r, keys, backup_path)
    elif op == 'revert':
        result = read_json(file)
        op_revert(r, result)
    else:
        print("not support", op)


if __name__ == '__main__':
    main()
    # init_test_data()

</code></pre>

<h2>总结</h2>

本文主要介绍了 redis 内存分析的方法和工具，以及如何恢复数据，如何进行分析，以及如何安全的删除，希望能有所帮助。]]></content:encoded>
		<excerpt:encoded><![CDATA[本文主要介绍了 redis 内存分析的方法和工具，以及如何恢复数据，如何进行分析，以及如何安全的删除，希望能有所帮助。]]></excerpt:encoded>
		<wp:post_id>601</wp:post_id>
		<wp:post_date><![CDATA[2020-07-01 16:26:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-01 08:26:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[redis-%e5%a6%82%e4%bd%95%e8%bf%9b%e8%a1%8c%e5%86%85%e5%ad%98%e5%8d%a0%e7%94%a8%e5%88%86%e6%9e%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="redis"><![CDATA[redis]]></category>
		<category domain="post_tag" nicename="%e5%86%85%e5%ad%98%e5%8d%a0%e7%94%a8"><![CDATA[内存占用]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[836]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[603]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[378]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【译】使用AWS Lambda 为 Serverless 架构下的静态网站做基础认证</title>
		<link>https://blog.wj2015.com/2020/07/21/%e3%80%90%e8%af%91%e3%80%91%e4%bd%bf%e7%94%a8aws-lambda-%e4%b8%ba-serverless-%e6%9e%b6%e6%9e%84%e4%b8%8b%e7%9a%84%e9%9d%99%e6%80%81%e7%bd%91%e7%ab%99%e5%81%9a%e5%9f%ba%e7%a1%80%e8%ae%a4%e8%af%81/</link>
		<pubDate>Tue, 21 Jul 2020 02:05:50 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=608</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>译者前言</h2>

本篇文章主要介绍如何通过 AWS 中的 CloudFront 以及 Lambda 实现简单的无服务器架构( Serverless )网站下的 Basic 鉴权，在理解架构之后不难，但是想锻炼下自己的英文阅读能力，于是翻译了一下原博文。

原文链接：<a class="wp-editor-md-post-content-link" href="https://douglasduhaime.com/posts/s3-lambda-auth.html" title="https://douglasduhaime.com/posts/s3-lambda-auth.html">https://douglasduhaime.com/posts/s3-lambda-auth.html</a>
原作者：<a class="wp-editor-md-post-content-link" href="https://github.com/duhaime" title="duhaime">duhaime</a>
译者：<a class="wp-editor-md-post-content-link" href="https://github.com/wangerzi">Jeffrey Wang</a>
本篇翻译已获得作者授权：<a class="wp-editor-md-post-content-link" href="https://github.com/duhaime/douglasduhaime.com/issues/19" title="Can I translate your article to chinese and republish to my blog?">Can I translate your article to chinese and republish to my blog?</a>

<h3>基础概念科普</h3>

为保证普通读者能读懂本文，基于博主本人的理解提前科普一点基础概念：

<h4>S3 是什么？</h4>

S3 是 AWS 中类似于国内 『七牛云』『阿里云-OSS』『腾讯云-COS』存储桶的概念，<strong>能够存放用户的文件</strong>，并且能做到文件粒度的权限管理，还可以把存储桶设置为 <code>Static Web Hosting</code>，译为静态网站托管，可以像常见的 Apache 那样提供静态网站服务。
<strong>但是 S3 的 web 流量价格相对 <code>CloudFront</code> 较高</strong>，一般都使用<code>CloudFront</code> 做 CDN 分发，流量成本相对低廉，那么什么是<code>CloudFront</code> 请看下文。

<h4>CloudFront 是什么？</h4>

CloudFront 是 AWS 中用于<strong>分发静态资源，加速请求的工具</strong>，其实就是常见的 CDN，CDN都知道，可以让用户访问某个 WEB 资源的时候自动分发到距离用户最近的节点，不过 CloudFront 比较灵活，<strong>可以在用户发起请求、自动回源、响应请求 等节点执行自定义的逻辑</strong>，这种逻辑在 AWS 中被称为 <code>Lambda</code>，<code>Lambda</code> 的介绍如下。

<h4>Lambda 是什么？</h4>

一提到 Lambda 相信很多人会想到 Lamda 函数，在 AWS 中，Lambda 就是一段自定义功能的代码，可以用 go/nodejs/python 等语言进行编写，类似于面向切面编程的思想，在 AWS 其他组件的特定节点可以触发这一段逻辑，比如 <code>CloudFront</code> 中就可以在用户请求时触发自定义逻辑，鉴权成功则返回内容，否则响应401，提示鉴权失败。

<h4>Serverless 是什么？</h4>

字面含义就是<strong>不需要管理服务器，但是能提供高稳定可扩展服务的一种架构</strong>，我们常见的 WEB 服务可以在服务器上由 Apache、Nginx 等软件提供，但是现在我们也可以通过云计算厂商提供的函数计算，对象存储，队列等功能，无需管理服务器但是能提供稳定高效的后端服务。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/626bfddfdd6664714ff47708f988d975.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/626bfddfdd6664714ff47708f988d975.png" alt="" /></a>

其他概念就不再赘述，下面正文开始：

<h1>使用AWS Lambda 为 Serverless 架构下的静态网站做基础认证</h1>

Many websites require authentication to protect private data. When working on a website that uses a server, it’s usually not too much trouble to create some server-side middleware that protects certain routes or web pages. When working on a serverless website served by Apache or Nginx, one can use htpasswd files to challenge users to authenticate. When working on a serverless website hosted from an S3 bucket, however, creating an authentication layer is a little more tricky. This post will attempt to make the process a little easier for others to create password-protected static sites with S3, CloudFront, and Lambda.

<blockquote>
  很多网站需要用鉴权认证去保护隐私数据，当我们使用服务器上的服务端中间件去保护某一个路由或者网页时并不会遇到太大的问题。当我们使用 Apache 或者Nginx 搭建一个非 Serverless 网站的时候，可以通过 <a class="wp-editor-md-post-content-link" href="https://httpd.apache.org/docs/2.4/programs/htpasswd.html">htpasswd 文件</a> 对用户进行鉴权。但当我们试图通过 S3 存储桶建立无服务器的网站（Serverless）并希望对其鉴权时，创建一个鉴权层会比较棘手。本片文章将尝试去创建一个基于S3、CloudFront、Lambda的，带密码保护的静态网站。
</blockquote>

<h2>在S3上创建一个静态文件</h2>

To get started, you’ll want to create a sample web page. Here’s the one I’ll be using:

<blockquote>
  准备开始，首先你需要创建一个简单的 web 页面，如下即是我们使用的页面文件。
</blockquote>

<pre data-language=HTML><code class="language-markup line-numbers">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset='UTF-8'&gt;
    &lt;title&gt;HELLO!&lt;/title&gt;
  &lt;style&gt;
  body {
    background-color: #ffcb50;
    background-image: url(iam.png);
    background-size: 50px;
  }
  &lt;/style&gt;
  &lt;/head&gt;
  &lt;body /&gt;
&lt;/html&gt;
</code></pre>

Once you have an HTML page to display, you’ll need to <a class="wp-editor-md-post-content-link" href="https://aws.amazon.com/free/">register for an AWS account</a> if you don’t already have one. Then, after signing in, go to your <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/s3/home">list of S3 buckets</a>, click “<strong>Create bucket</strong>” and give your bucket a name. I’ll name my bucket <strong>lambda-authentication</strong>:

<blockquote>
  一旦你想要展示一个 HTML 文件，首先你需要注册一个 <a class="wp-editor-md-post-content-link" href="https://aws.amazon.com/free/">AWS 账号</a>（如果你没有的话）。在使用账号登录之后，进入 <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/s3/home">S3 存储桶列表</a>，点击 <strong>创建桶</strong>，然后给你的桶取一个名字，这里我给桶取名为 <strong>lambda-authentication</strong>:
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/953f030fec3af398e307142a9d7b150c.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/953f030fec3af398e307142a9d7b150c.png" alt="" /></a>

When prompted to set the permissions for the bucket, under <strong>“Manage public permissions”</strong> select <strong>“Grant public read acess to this bucket”</strong>. That will display a little orange message confirming that your bucket contents will be public (we’ll change this later):

<blockquote>
  点击下一步，当我们试图为本存储桶设置权限的时候，在<strong>"管理公共权限"</strong> 下选择 <strong>"给本存储桶授予公共读权限"</strong>，这里将会显示一个橙色信息让你确认这个桶的内容将会被公开（随后会改回来）
  
  译者注：这里不会直接将存储桶设为公开的，原博文在此只是为了展示 S3 的 Web-Host 能力，<strong>如果公开了不就意味着谁都可以不经授权访问桶内文件的内容了，那还做鉴权干哈</strong>。
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/ff2bb56b1611f791f3c19ce84ad01218.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/ff2bb56b1611f791f3c19ce84ad01218.png" alt="" /></a>

All other defaults are fine to accept. Once the bucket is created, you can upload your HTML file to the bucket by clicking the bucket, then clicking the “Upload” button. Drag your HTML file (which should be named index.html) into the filepicker, click <strong>“Next”</strong> until you are prompted to <strong>“Manage public permissions”</strong> for your uploaded file, and select <strong>“Grant public read access to this object(s)”</strong>:

<blockquote>
  其他默认配置直接下一步就行，这个桶创建好之后，你就可以点击这个桶，然后点击“上传”按钮来上传你的 HTML 文件了。拖动你的 HTML 文件（需要命名为 index.html）到文件选择器中，点击<strong>“下一步”</strong> 直到你被提醒为上传到的文件<strong>“管理公共权限”</strong>， <strong>然后选择“为这些个对象授权公共读访问”</strong>
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/ff2bb56b1611f791f3c19ce84ad01218.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/ff2bb56b1611f791f3c19ce84ad01218.png" alt="" /></a>

Then keep clicking <strong>“Next”</strong> until you get to the end, and click <strong>“Upload”</strong>. Next click the <strong>“Properties”</strong> tab in your bucket, select <strong>“ website hosting”</strong>, select <strong>“Use this bucket to host a website”</strong>, and specify <strong>“index.html”</strong> as the default and error documents:

<blockquote>
  然后一直点下一步到最后，点击“上传”。然后点开你存储桶的“属性”标签，再选择“静态网站托管”，然后把“index.html” 作为默认页面和错误页面：
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/3ed826adc2051b867f0fbe7498886ad1.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/3ed826adc2051b867f0fbe7498886ad1.png" alt="" /></a>

Finally save your settings. If you want to get fancy later, you can upload a special 404 page and specify that file as the error document, but let’s keep things simple for now.

<blockquote>
  最后保存设置，如果你想更完善一点，可以传一个 404 页面过去，然后指定为错误页面
</blockquote>

If you click on the <strong>“Static website hosting”</strong> card again, you should see an <strong>“Endpoint”</strong> specified. If you visit that web address, you should see your website:

<blockquote>
  如果你再次点击“静态网站托管”卡片，可以看到指定的“节点”。访问这个web地址就能看到你的网站。
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/435757a90bb5d756e0c11e98d5543bfa.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/435757a90bb5d756e0c11e98d5543bfa.png" alt="" /></a>

Great! You’re now ready to create a user-authentication layer by configuring a CloudFront distribution for your site.

<blockquote>
  秀儿！你现在已经做好准备，可以在 CloudFront 为你的网站创建一个用户授权层了。
</blockquote>

<h2>使用CloudFront分发你的S3</h2>

CloudFront is AWS’s content distribution network, which distributes your S3 site content to servers around the world, getting your content to viewers faster. CloudFront also allows us to add authentication to an S3 site.

<blockquote>
  CloudFront 是 AWS 的内容分发网络（CDN），可以把你的 S3 里边的内容分发到全世界，加速你的文件获取和浏览。CloudFront 也可以给我们的S3网站添加授权认证。
</blockquote>

To get started with CloudFront, return to the AWS <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/console/home?region=us-east-1">console</a> and click the CloudFront link, then click the big blue button that says <strong>“Create Distribution”</strong>:

<blockquote>
  接下来开始使用 CloudFront，首先回到 <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/console/home?region=us-east-1">AWS 控制台</a> 然后点击 CloudFront 链接，然后点击那个又大又蓝的叫做<strong>“创建分配”</strong>的按钮：
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/5f6c44c46c0f1214dce04775126ef7b2.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/5f6c44c46c0f1214dce04775126ef7b2.png" alt="" /></a>

On the following screen, click the blue button that says <strong>“Get Started”</strong> under the <strong>“Web”</strong> section, then select your S3 bucket address under <strong>“Origin Domain Name”</strong>. Under <strong>“Restrict Bucket Access”</strong> select <strong>“Yes”</strong>, set <strong>“access-identity-lambda-authentication”</strong> as the identity to use, and finally choose <strong>“Yes, Update Bucket Policy”</strong>:

<blockquote>
  在接下来的界面里，点击那个在<strong>“web”</strong>模块下的蓝蓝的<strong>“开始使用”</strong>按钮，然后在<strong>“原始域名称”</strong> 中选择你的 S3存储桶地址。在 <strong>“限制桶访问”</strong> 右侧选中 <strong>“Yes”</strong>，在访问身份那里选中 <strong>“access-identity-lambda-authentication”</strong>，最后在“授予桶的读权限”右侧选择 “是的，请更新桶权限”
  
  译者注：
  这里的 Grant Read Permissions on Bucket 是关键，这里会自动给你的 S3 加上 CloudFront 的访问权限，<strong>所以在你关闭掉 S3 的公有读权限后，CloudFront还能正常访问到你的 S3</strong>，AWS 中权限控制粒度特别细也特别严格，每一个资源每一个行为都可以控制。
  除此之外，这里还需要选择 Origin Access Identities（源访问身份），如果选择<strong>自动创建新身份的话需要你拥有创建 IAM 角色的权限</strong>，否则请让管理员帮忙创建好能访问对应S3桶的角色。
  博主在中文版下的创建界面如下：
  <a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/94a57782bc61fa324e78700caf264b4b.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/94a57782bc61fa324e78700caf264b4b.png" alt="" /></a>
</blockquote>

原版图如下：
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/7685bc75b9b692349dd8f133389f2eec.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/7685bc75b9b692349dd8f133389f2eec.png" alt="" /></a>

In the text field labelled <strong>“Default Root Object”</strong> below, type <strong>“index.html”</strong>, then click <strong>“Create Distribution”</strong>. From the next page, you should be able to click the <strong>“Distributions”</strong> link in the left sidebar to see your new distribution’s status. Take a note of the value under <strong>“Domain Name”</strong> – in just a few moments that value will become the new address of your new website. The <strong>“Status”</strong> field will say <strong>“in progress”</strong> for a few minutes, so while it's generating we can configure the Lambda function that will provide the actual authentication mechanism.

<blockquote>
  在<strong>“默认根对象”</strong>字段中写入<strong>“index.html”</strong>，然后点击<strong>“创建分配”</strong>按钮。到了下一页，点击左侧边栏的<strong>“分配”</strong>链接就可以看到新建出来的分配(CDN)状态。还可以在 <strong>“主机名称”</strong> 下拿到一个链接，这个链接将是你的新的网站地址。短暂的几分钟内<strong>“状态”</strong>字段将会是<strong>“处理中”</strong>，所以在生成过程中我们先去配置好一个可以提供认证机制的Lambda函数。
</blockquote>

<h2>创建 IAM 凭证</h2>

In order to configure Lambda to work with an S3 bucket, we’ll need to create an IAM profile that has access to the bucket. To do so, navigate back go the AWS <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/console/home?region=us-east-1">console</a> and click the link for the <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/iam/home?region=us-east-1#/home">IAM</a> service. Once there, click <strong>“Roles”</strong> in the left-hand sidebar, then <strong>“Create role”</strong>. On the next screen, under <strong>“Choose the service that will use this role”</strong> click <strong>“Lambda”</strong>, then click <strong>“Next: Permissions”</strong> at the bottom of the screen. Search for and select the <strong>“AWSLambdaExecute”</strong> role:

<blockquote>
  为了使 Lambda 和 S3 存储桶一起工作，我们需要创建一个可以访问存储桶的 IAM 信息。可以按照如下的步骤来做，首先顶部导航回到 <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/console/home?region=us-east-1">AWS 控制台</a>，然后点击 <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/iam/home?region=us-east-1#/home">IAM</a> 服务的链接，进入之后在左侧边栏点击<strong>“角色”</strong>，然后<strong>“创建角色”</strong>。在接下来的界面里，找到“选择这个角色需要用到的服务”点击 <strong>“Lambda”</strong>，然后在界面底部点击<strong>“下一步：权限”</strong>。搜索并选择<strong>“AWSLambdaExecute”</strong> 角色：
  
  译者注：这个权限是Lambda执行的基础权限，这里为某个函数单独建一个权限方便扩展，比如想要在Lambda中对其他资源进行操作，则需要在此额外赋予权限。
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/c06f7972aaba0a43c39d809bf0b0d78e.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/c06f7972aaba0a43c39d809bf0b0d78e.png" alt="" /></a>

Then click <strong>“Next: Review”</strong> at the bottom of the page. On the next screen, name your role <strong>“lambda-execute-role”</strong>, then click <strong>“Create role”</strong>:

<blockquote>
  然后在页面底部点击<strong>“下一步：审查”</strong>。在下一步的界面为你的角色命名为<strong>“lambda-execute-role”</strong>，然后点击<strong>“创建角色”</strong>。
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/2c45e2f99cd2074a2df7beaa1231111a.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/2c45e2f99cd2074a2df7beaa1231111a.png" alt="" /></a>

On the next page you should see that your Lambda role has been created. Once it’s created, click on the link to the role, then click <strong>“Trust relationships”</strong>, then click <strong>“Edit trust relationship”</strong> and replace the contents with the following:

<blockquote>
  在下一步的界面，你就可以看到你的Lambda角色已经创建成功了。创建成功后，点击链接进去角色信息，然后点击<strong>“信任关系”</strong>，然后点击<strong>“编辑信任关系”</strong>然后用下面的内容替换掉其中的内容。
</blockquote>

<pre><code class="language-json line-numbers">{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": [
            "lambda.amazonaws.com",
            "edgelambda.amazonaws.com"
        ]
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
</code></pre>

This little update allows the policy to interact with <a class="wp-editor-md-post-content-link" href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-edge.html">Lambda@Edge</a>, which is the service that provides the authentication logic. Once that’s all set, you are ready to proceed to using this role in Lambda itself.

<blockquote>
  这亿点点变动允许这个策略作用到 <a class="wp-editor-md-post-content-link" href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-edge.html">Lambda@Edge</a> 上，我们要提供的鉴权逻辑就在运行在 Lambda@Edge 中。一旦以上操作都进行完毕了，你就可以在 Lambda 中使用这个角色了。
  
  译者注：这一步非常重要，一不小心就踩坑，只有 lambda 服务的权限是不够的，因为这个 Lambda 函数需要跑在 CloudFront 的边缘节点上，边缘 lambda 和普通的 lambda 执行位置和限制都有区别，后续会讲到。
</blockquote>

<h2>使用 AWS lambda 创建鉴权层</h2>

With all of the stage-setting in place, we can now create the actual logic that will handle user-authentication. To do so, return once again to the AWS <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/console/home?region=us-east-1">console</a>. Once you’re there, take a look at the black navigational bar at the top of your screen. Off to the right you should be able to select the <strong>“region”</strong> in which you wish to operate. For this next step you must be in the N. Virginia region (a.k.a. us-east-1). Once you’re in the N. Virginia region, click the link for <strong>“Lambda”</strong>.

<blockquote>
  有了前面的铺垫，我们现在可以创建一个实际的用户鉴权逻辑了。接下来，返回 <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/console/home?region=us-east-1">AWS 控制台</a>。进入之后，先瞅一瞅顶上那个黑黢黢的导航栏，在那个导航栏的右边，可以选择你要操作的<strong>“区域”</strong>。下一步你需要选择 N. Virginia region (a.k.a. us-east-1)，如果你已经在这个区域了，点击<strong>“Lambda”</strong>链接。
  
  译者注：这里必须是 us-east-1，不然 CloudFront 不认，除了lambda 有这个限制，CloudFront 自定义域名的SSL证书也有这个限制，只能选择 us-east-1 中的资源。
</blockquote>

Lambda is a piece of AWS’s “serverless” stack that allows one to run serverside code without having to build, run, and maintain a whole server. We’ll use it to run our authentication logic. On the Lambda landing page, click the orange button that says <strong>“Create a function”</strong>:

<blockquote>
  Lambda 是 AWS Serverless 栈中的一部分，他允许运行一段服务器端的代码并且不需要构建、运行、维护在一整个服务器。我们需要用到这个工具去运行鉴权逻辑。在 Lambda 主页，点击那个黄橙橙的叫做<strong>“创建一个函数”</strong>的按钮：
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/f93deae3623b7705cdc3ec3f35a012f5.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/f93deae3623b7705cdc3ec3f35a012f5.png" alt="" /></a>

On the next page, keep <strong>“Author from scratch”</strong> selected. Name the function <strong>“authentication”</strong>, select Node.js as the runtime, select <strong>“Choose an existing role”</strong> , and select <strong>“lambda-execute-role”</strong> as the existing role to use (this is the role we just created in the IAM console):

<blockquote>
  在下一个页面，选中 “重头开始”，函数名称叫做<strong>“authentication”</strong>，选中 Node.js 作为运行程序，再中 "选择一个已经存在的角色"（这个角色在上文我们在 IAM 中创建过了）：
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/23b9b8034d5d8b3e41d8c2a059295eec.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/23b9b8034d5d8b3e41d8c2a059295eec.png" alt="" /></a>

Finally, click <strong>“Create function”</strong> at the bottom of the page. Scroll down to the code editor and paste the following snippet into the input field:

<blockquote>
  最后，在页面底部点击“创建函数”按钮，滚动到diamante编辑器，然后把下边的代码粘贴到输入框里边：
</blockquote>

<pre><code class="language-js line-numbers">exports.handler = (event, context, callback) =&gt; {

  // Get the request and its headers
  const request = event.Records[0].cf.request;
  const headers = request.headers;

  // Specify the username and password to be used
  const user = 'user';
  const pw = 'password';

  // Build a Basic Authentication string
  const authString = 'Basic ' + new Buffer(user + ':' + pw).toString('base64');

  // Challenge for auth if auth credentials are absent or incorrect
  if (typeof headers.authorization == 'undefined' || headers.authorization[0].value != authString) {
    const response = {
      status: '401',
      statusDescription: 'Unauthorized',
      body: 'Unauthorized',
      headers: {
        'www-authenticate': [{key: 'WWW-Authenticate', value:'Basic'}]
      },
    };
    callback(null, response);
  }

  // User has authenticated
  callback(null, request);
};
</code></pre>

This snippet exports a single function that takes as input the three default arguments Lambda provides to Node.js functions <a class="wp-editor-md-post-content-link" href="https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html">docs</a>. The function then pulls out the user’s HTTP request and its headers, specifies the correct username and password, and checks to see if the user’s request contained the username and password in its authentication headers. If not, it prompts the user to authenticate; if so it allows the user into the site.

<blockquote>
  这个代码片段导出了一个函数，这个函数有三个默认参数，这三个参数是 Lambda 注入到 Node.js 函数中的，<a class="wp-editor-md-post-content-link" href="https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html">文档在此</a>。该函数提取用户的 HTTP 标头，指定好当前的用户名密码，然后检查用户名和密码是否包含在用户的请求头中。
</blockquote>

After defining the function, click the big orange <strong>“Save”</strong> button in the upper-right of the screen. Then, in the list of <strong>“Actions”</strong> at the top of the screen, click <strong>“Publish”</strong>, enter a version statement, and click <strong>“Publish”</strong>:

<blockquote>
  在定义完函数之后，点击你屏幕右上角那个大大的橘色按钮<strong>“保存”</strong>。然后在你屏幕顶上有个 <strong>“操作”</strong> 列表，点<strong>“发布”</strong>，<strong>输入一个版本号</strong>，然后点击<strong>“发布”</strong>
  
  译者注：这里一定要注意，版本号是必须的，每次更新完函数都需要发一个新版本，Lambda Edge 有要求必须指定版本号。
  然后这里的代码也需要注意，不能给代码设置环境变量（比如你想用来管理用户名和密码），因为 Lambda Edge 是在边缘节点执行的，环境变量不能全局控制所有的节点。
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/99c5278fff24bc327c92f4f98f2e2164.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/99c5278fff24bc327c92f4f98f2e2164.png" alt="" /></a>

Next, under the <strong>“Designer”</strong> section toward the top of the page, click <strong>“CloudFront”</strong>, which will move CloudFront into the triggers portion of the displayed diagram:

<blockquote>
  然后，在页面顶部 “设计蓝图” 这个部分下，点击<strong>“CloudFront”</strong>，可以把 CloudFront 作为这个设计图的触发器：
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/908a5c20f4fbe77a05497b3cd09baa70.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/908a5c20f4fbe77a05497b3cd09baa70.png" alt="" /></a>

If you then scroll down a bit, you’ll see a section titled <strong>“Configure triggers”</strong>. Select your CloudFront distribution’s ID under the <strong>“Distribution”</strong> selector (this is displayed under the ID column in your CloudFront distribution list), make sure you select <strong>“Viewer request”</strong> as the CloudFront event that will trigger the function defined above, and click the box that says <strong>“Enable trigger and replicate”</strong>:

<blockquote>
  往下划一点点，可以看到一个标题是“配置触发器”的部分，选择你的 CloudFront 分配 ID（CloudFront列表里边的ID列），确保你选择了“查看器请求”事件，这个时间会触发你之前定义的函数。然后勾上“允许触发和复制”
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/9bebfbc4dbdb2cbfe2b2401be79d8624.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/9bebfbc4dbdb2cbfe2b2401be79d8624.png" alt="" /></a>

Then click <strong>“Add”</strong>, and click the orange <strong>“Save”</strong> button in the upper-right hand corner. If you then try to access the address specified under the <strong>“Domain Name”</strong> column in your CloudFront distribution list <a class="wp-editor-md-post-content-link" href="https://dfdm943axhisa.cloudfront.net/">example</a>, you’ll be prompted for a username and password:

<blockquote>
  然后点击<strong>“添加”</strong>按钮，再点击右上角那个橘黄色的<strong>“保存”</strong>按钮。如果你访问 CloudFront 分配列表中 <strong>“主机名”</strong> 那一列的访问地址，比如这个<a class="wp-editor-md-post-content-link" href="https://dfdm943axhisa.cloudfront.net/">案例</a>，就会被要求输入用户名和密码。
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/c8be2b0f16ec0737a0790a7ca8487323.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/c8be2b0f16ec0737a0790a7ca8487323.png" alt="" /></a>

If you type “user” and “password” as the credentials (or whichever values you set as the username and password in your lambda password), you’ll see the site itself!

<blockquote>
  如果你输入了"user"和"pass"作为凭证（或者其他你在 lambda 中设置的用户名和密码），就可以看到网站内容了。
  
  译者注：经过博主实操，这里还可以有另一种关联 CloudFront 的方式，就是在CloudFront中找到对应的分配，找到行为标签页，编辑默认行为(或者其他路径的行为)，然后在页面底部选择“查看器请求”，然后粘贴 lambda 函数某个版本的 arn，如下图所示。
  <a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/66ad46128fb41251d3275e438dfd312e.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/66ad46128fb41251d3275e438dfd312e.png" alt="" /></a>
  <a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/ff096fe45a09f547a3859e1c51d90421.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/ff096fe45a09f547a3859e1c51d90421.png" alt="" /></a>
</blockquote>

<h2>清理之前的配置</h2>

There’s just one problem with the setup we established above. If you request your original S3 bucket address, you’ll be able to access your content without being challenged to authenticate. To fix this, return to the AWS <a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/console/home?region=us-east-1">console</a>, delete your content, and reupload your web files. This time, don’t add public read permissions to the uploaded files:

<blockquote>
  我们在之前建立的S3，在这里还有一个问题。如果你直接请求 S3 的源地址，是可以不经鉴权直接访问到内容的。为了修复这个问题，返回 AWS 控制台，删除你的内容，重新上传web文件，不要给你新上传的文件选择公共可读权限。
  
  译者注：
  这里建议再把 S3 的静态网站托管关掉，让请求都从 CloudFront 走，也可以解决这样的问题。
  如果这里想不明白，可以翻阅文档好好理解下 “查看器请求” 触发的 Lambda 在整个请求过程中的位置。
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/5c577ef067c35e83eca31ab7d159e7a1.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/5c577ef067c35e83eca31ab7d159e7a1.png" alt="" /></a>

Thereafter, if you request your bucket address directly, you’ll get a 403 response as expected:

<blockquote>
  至此，直接请求桶的访问地址，就会如所预料的一样返回403。
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/7aa96a2aab95d7b9b22ebee32af14b92.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/7aa96a2aab95d7b9b22ebee32af14b92.png" alt="" /></a>

If you request the address of your distribution instead, you’ll be able to authenticate and see your <a class="wp-editor-md-post-content-link" href="https://dfdm943axhisa.cloudfront.net/">website</a>:

<blockquote>
  如果请求分配（CloudFront）的地址，你就可以进行身份认证然后看到你的站了。
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/07/8ab86d5c0ab47e3589fe329816bd7d1a.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/07/8ab86d5c0ab47e3589fe329816bd7d1a.png" alt="" /></a>

<h2>译者后记</h2>

翻译真的是一件比较耗时间的事情，可能看一篇英文技术博客也就几分钟，再按照自己的理解实操加写出来也就两三个小时；但是以我目前的水平，完完全全翻译出来花了至少6个小时，不过看着成果非常开心就是了。]]></content:encoded>
		<excerpt:encoded><![CDATA[本篇文章主要介绍如何通过 AWS 中的 CloudFront 以及 Lambda 实现简单的无服务器架构( Serverless )网站下的 Basic 鉴权，在理解架构之后不难，但是想锻炼下自己的英文阅读能力，于是翻译了一下原博文。]]></excerpt:encoded>
		<wp:post_id>608</wp:post_id>
		<wp:post_date><![CDATA[2020-07-21 10:05:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-21 02:05:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%af%91%e3%80%91%e4%bd%bf%e7%94%a8aws-lambda-%e4%b8%ba-serverless-%e6%9e%b6%e6%9e%84%e4%b8%8b%e7%9a%84%e9%9d%99%e6%80%81%e7%bd%91%e7%ab%99%e5%81%9a%e5%9f%ba%e7%a1%80%e8%ae%a4%e8%af%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="authorization"><![CDATA[authorization]]></category>
		<category domain="post_tag" nicename="aws"><![CDATA[aws]]></category>
		<category domain="post_tag" nicename="cloudfront"><![CDATA[cloudfront]]></category>
		<category domain="category" nicename="serverless"><![CDATA[Serverless]]></category>
		<category domain="post_tag" nicename="serverless"><![CDATA[Serverless]]></category>
		<category domain="category" nicename="web-background"><![CDATA[后端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[72]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[614]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[69]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kibana中KQL的使用</title>
		<link>https://blog.wj2015.com/2020/08/26/kibana%e4%b8%adkql%e7%9a%84%e4%bd%bf%e7%94%a8/</link>
		<pubDate>Wed, 26 Aug 2020 13:17:33 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=620</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

当我们需要查看 ElasticSearch 中存放的数据时，通常会使用 Kibana 这个可视化工具。
但是 Kibana 中的 Discover 页面默认只会展示最近收到的数据，当我们需要查询符合某个条件数据时，就需要用到 KQL(Kibana Query Language) 了，没有接触之前觉得高大上，看完之后才发现设计如此简单。

英文还可以的同学可以直接看官方文档，结合数据实例进行讲解，也比较清晰
官方文档：<a class="wp-editor-md-post-content-link" href="https://www.elastic.co/guide/en/kibana/current/kuery-query.html#kuery-query">https://www.elastic.co/guide/en/kibana/current/kuery-query.html#kuery-query</a>

<h2>筛选语法</h2>

将所有涉及到的语法铺展开来，首先准备好官网文档中的数据如下：

<pre><code class="language-json line-numbers">{
  "grocery_name": "Elastic Eats",
  "items": [
    {
      "name": "banana",
      "stock": "12",
      "category": "fruit"
    },
    {
      "name": "peach",
      "stock": "10",
      "category": "fruit"
    },
   {
      "name": "peach test",
      "stock": "10",
      "category": "fruit"
    },
    {
      "name": "carrot",
      "stock": "9",
      "category": "vegetable"
    },
    {
      "name": "broccoli",
      "stock": "5",
      "category": "vegetable"
    }
  ]
}
</code></pre>

需要根据实际情况做尝试的时候进入 Kibana 的 Discover页面在输入框中填入筛选即可。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/08/bf38129fb9a6a1d593feb32d28b50582.png"><img src="https://blog.wj2015.com/wp-content/uploads/2020/08/bf38129fb9a6a1d593feb32d28b50582.png" alt="" /></a>

<blockquote>
  生产环境截图不便还请谅解 &#x1f601;
</blockquote>

<h3>简单查询</h3>

简单查询就是 关键字匹配、字符串包含等，比如说如下语句会找出 name 字段是 banana 的所有数据：

<pre><code class="language-kql line-numbers">name: banana
</code></pre>

但是如果 name 包含 <code>peach</code> 和 <code>peach test</code>，然后下面两个语句查出来会是两个结果。

<pre><code class="language-kql line-numbers">name: peach test
</code></pre>

上述查询会将 name 是 <code>peach</code> 和 name 是 <code>peach test</code> 的都给查出来

<pre><code class="language-kql line-numbers">name: "peach test"
</code></pre>

上述查询只会将 <code>peach test</code> 查出来，因为如果不加引号会自动关键字分词，将包含该关键字的所有数据匹配出来。

<h3>条件运算符</h3>

条件运算符就是 > >= &lt; &lt;=，在 KQL 里边都支持，使用也很简单，比如如下语句表示 age 字段大于等于 10。

<pre><code class="language-kql line-numbers">age &gt;= 10
</code></pre>

<h3>逻辑运算符</h3>

查询语言自然少不了逻辑运算符 与或非，在 KQL 中代表了 and or not

and 的用法：

<pre><code class="language-kql line-numbers">age &gt;= 10 and age &lt; 100
</code></pre>

上述语句表示查询出 age 在 10 到 100 的左开右闭区间中的所有数据。

or 的用法：

<pre><code class="language-kql line-numbers">name: "Jeff" or name: "Kitty"
</code></pre>

上述语句表示筛选出 name 包含 <code>Jeff</code> 或者 <code>Kitty</code> 关键字的所有数据。

not 的用法：

<pre><code class="language-kql line-numbers">not age &gt;= 10
</code></pre>

上述语句表示筛选出 age 小于 10 的所有数据。

其中 and 的优先级比 or 的高

<pre><code class="language-kql line-numbers">age &lt; 100 or name: wang and age &gt;= 10
</code></pre>

and 优先级高会先结合，所以意思是 满足 name 是wang age >= 10  或者 age &lt; 100。

当然也可以通过小括号来改变优先级，比如：

<pre><code class="language-kql line-numbers">(age &lt; 100 or name: wang) and age &gt;= 10
</code></pre>

意思是 age >=10 并且这条数据的 name是wang或者age &lt; 100

<h4>同一字段运算符简写</h4>

可以用括号将多个逻辑运算符和条件合并到一起

<pre><code class="language-kql line-numbers">age = 10 or age = 100
# 等价于
age: ( 10 or 100)
</code></pre>

<h3>通配符</h3>

通配符可以用于查找出存在某个key的数据

<pre><code class="language-kql line-numbers">name: *
</code></pre>

表示查找出所有带 name 字段的数据

<pre><code class="language-kql line-numbers">system: win*
</code></pre>

可以匹配到 system: win7，system: win10 等。

<h3>字段嵌套查询</h3>

首先准备一个多层的数据，比如下面的这几条数据。

<pre><code class="language-json line-numbers">{
  "level1": [
    {
      "level2": [
        {
          "prop1": "foo",
          "prop2": "bar"
        },
        {
          "prop1": "baz",
          "prop2": "qux"
        }
      ]
    }
  ]
}
</code></pre>

比如想筛选 level1.level2.prop1 是 <code>foo</code> 或者是 <code>baz</code>的，可以这样写：

<pre><code class="language-kql line-numbers">level1.level2 { prop1: "foo" or prop1: "baz" }
</code></pre>

<h2>总结</h2>

KQL是一个比较简单筛选数据的查询语言，包括条件、逻辑、多层查询等用法，能辅助报表的制作和实时日志的筛选。]]></content:encoded>
		<excerpt:encoded><![CDATA[当我们需要查看 ElasticSearch 中存放的数据时，通常会使用 Kibana 这个可视化工具。
但是 Kibana 中的 Discover 页面默认只会展示最近收到的数据，当我们需要查询符合某个条件数据时，就需要用到 KQL(Kibana Query Language) 了，没有接触之前觉得高大上，看完之后才发现设计如此简单。]]></excerpt:encoded>
		<wp:post_id>620</wp:post_id>
		<wp:post_date><![CDATA[2020-08-26 21:17:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-08-26 13:17:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kibana%e4%b8%adkql%e7%9a%84%e4%bd%bf%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="elasticsearch"><![CDATA[ElasticSearch]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[623]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[556]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[12774]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AWS 中仅允许 CloudFront访问的安全组创建</title>
		<link>https://blog.wj2015.com/2020/11/22/aws-%e4%b8%ad%e4%bb%85%e5%85%81%e8%ae%b8-cloudfront%e8%ae%bf%e9%97%ae%e7%9a%84%e5%ae%89%e5%85%a8%e7%bb%84%e5%88%9b%e5%bb%ba/</link>
		<pubDate>Sun, 22 Nov 2020 05:21:01 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=636</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>目的</h2>

生产环境中出于安全和并发的考虑，一般会用 CDN 和 LB 为后端服务/资源进行加速和并发防护，在 AWS 中，CDN 服务是 CloudFront，为了从根源上避免直接访问到源，需要通过安全组的方式组织非 CloudFront 边缘节点的访问。

<h2>思路</h2>

根据官方博客 <a class="wp-editor-md-post-content-link" href="https://aws.amazon.com/cn/blogs/security/how-to-automatically-update-your-security-groups-for-amazon-cloudfront-and-aws-waf-by-using-aws-lambda/">How to Automatically Update Your Security Groups for Amazon CloudFront and AWS WAF by Using AWS Lambda</a>中所属步骤，创建好 Lambda 函数和相关安全组，并监听 IP 更新的 SNS 即可。

对应代码仓库：<a class="wp-editor-md-post-content-link" href="https://github.com/awslabs/aws-cloudfront-samples">aws-cloudfront-samples</a>

原理就是每次在AWS更新 CloudFront 的IP时都会触发 Lambda 函数的执行，Lambda 里边获取 <a class="wp-editor-md-post-content-link" href="https://ip-ranges.amazonaws.com/ip-ranges.json">IP ranges</a>，找出里边 CloudFront 的 Global IP 和 Region IP，保存到对应的安全组去。

<blockquote>
  注意：如果服务器在多个区或同一个区不同的 VPC，需要每个区都执行安全组创建+lambda，同区的不同 VPC 只要创建好安全组即可。
  
  注意：如果运行过程中提示你每个安全组规则数量不可超过 50 导致无法更新成功，需要在 AWS 控制台申请扩大单个安全组规则最大限制，100~200即可。
</blockquote>

<h2>操作过程</h2>

<h3>创建安全组</h3>

<a class="wp-editor-md-post-content-link" href="https://us-west-2.console.aws.amazon.com/ec2/v2/home?region=us-west-2#SecurityGroups:">安全组控制台</a>

首先把需要CloudFront IP 访问控制的安全组创建起来，由于 Global 和 Region 是分两个组存的，HTTP 和 HTTPS 也是分两个组存的，所以我们需要创建四个安全组，名称和标签如下表所示。

<table>
<thead>
<tr>
  <th>安全组名称</th>
  <th>描述</th>
  <th>协议</th>
  <th>类型</th>
  <th>Tag:Name</th>
  <th>Tag:Protocol</th>
  <th>Tag:AutoUpdate</th>
</tr>
</thead>
<tbody>
<tr>
  <td>HTTP_CLOUDFRONT_IP_ONLY</td>
  <td>HTTP for cloudfront global ip.</td>
  <td>HTTP</td>
  <td>Global</td>
  <td>cloudfront_g</td>
  <td>http</td>
  <td>true</td>
</tr>
<tr>
  <td>HTTP_CLOUDFRONT_IP_ONLY_R</td>
  <td>HTTP for cloudfront region ip.</td>
  <td>HTTP</td>
  <td>Region</td>
  <td>cloudfront_r</td>
  <td>http</td>
  <td>true</td>
</tr>
<tr>
  <td>HTTPS_CLOUDFRONT_IP_ONLY</td>
  <td>HTTPS for cloudfront global ip.</td>
  <td>HTTPS</td>
  <td>Global</td>
  <td>cloudfront_g</td>
  <td>https</td>
  <td>true</td>
</tr>
<tr>
  <td>HTTPS_CLOUDFRONT_IP_ONLY_R</td>
  <td>HTTPS for cloudfront region ip.</td>
  <td>HTTPS</td>
  <td>Region</td>
  <td>cloudfront_r</td>
  <td>https</td>
  <td>true</td>
</tr>
</tbody>
</table>

<blockquote>
  注：所有的 EC2 和 LB 都需要选择 HTTP_CLOUDFRONT_IP_ONLY 和 HTTP_CLOUDFRONT_IP_ONLY_R  这两个安全组。
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_7092ef83875ab140cb81c7e1d9fed2d8.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_7092ef83875ab140cb81c7e1d9fed2d8.jpg" alt="" /></a>
创建完大概就是这样：

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_55e62d5672bde84b42fba64c5b992b0c.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_55e62d5672bde84b42fba64c5b992b0c.jpg" alt="" /></a>

<h3>创建Lambda执行角色</h3>

<a class="wp-editor-md-post-content-link" href="https://console.aws.amazon.com/iam/home?region=us-west-1#/roles">IAM角色</a>

首先进入 IAM 角色控制台，点击『创建角色』，选择『Lambda』，点击『下一步』

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_f1d3d67dca44e87a06e1e5311d580ccb.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_f1d3d67dca44e87a06e1e5311d580ccb.jpg" alt="" /></a>
再选择『创建策略』，点击『JSON』标签，将如下内容粘贴进去

<pre><code class="language-json line-numbers">{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeSecurityGroups",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:RevokeSecurityGroupIngress"
      ],
      "Resource": "*"
    }
  ]
}
</code></pre>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_98594b8a74ef2f31faaf96482ea86672.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_98594b8a74ef2f31faaf96482ea86672.jpg" alt="" /></a>
命好名字，创建策略即可。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_005357534d0d74fcb6e2386836423f97.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_005357534d0d74fcb6e2386836423f97.jpg" alt="" /></a>

随后返回继续创建角色，搜索到对应的策略后勾选并点击『下一步：标签』

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_3db02e43119ec89211db531ff29314c4.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_3db02e43119ec89211db531ff29314c4.jpg" alt="" /></a>

直到最后，点击创建角色即可，<strong>这个角色会用来执行 Lambda 函数</strong>。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_3db02e43119ec89211db531ff29314c4.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_3db02e43119ec89211db531ff29314c4.jpg" alt="" /></a>

<h3>创建函数</h3>

<a class="wp-editor-md-post-content-link" href="https://us-west-2.console.aws.amazon.com/lambda/home?region=us-west-2#/functions">Lambda函数控制台</a>

点击『创建函数』，定义好名称选择好角色，点击『创建函数』

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_043d0764d073f967d9a6b1244a3ef411.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_043d0764d073f967d9a6b1244a3ef411.jpg" alt="" /></a>
将参考了 <a class="wp-editor-md-post-content-link" href="https://github.com/aws-samples/aws-cloudfront-samples/blob/master/update_security_groups_lambda/update_security_groups.py">官方代码</a> 的改进版代码拷贝到『函数代码』区域，在右上角点击『保存』

<h4>代码改进</h4>

<h5>第10行</h5>

<pre><code class="language-python line-numbers">INGRESS_PORTS = { 'http' : 80, 'https': 443, 'example': 8080}
</code></pre>

改为

<pre><code class="language-python line-numbers">INGRESS_PORTS = { 'http' : 80, 'https': 443}
</code></pre>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_b81cb7f4b41fda58c33c74aa7a1f8d2c.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_b81cb7f4b41fda58c33c74aa7a1f8d2c.jpg" alt="" /></a>
修改函数的执行时间设置为1分钟，否则容易超时

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_2b9bec1d31d33d7d265e7d560cf9670c.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_2b9bec1d31d33d7d265e7d560cf9670c.jpg" alt="" /></a>

可以点击运行测试用例尝试下是否会更新安全组，如果出现 md5 错误，手动修改下测试数据即可

<h3>自动更新</h3>

点击『添加触发器』，选择SNS，主题输入框输入 <code>arn:aws:sns:us-east-1:806199016981:AmazonIpSpaceChanged</code>，点击『添加』

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_d3e3ab1240d6a3bf5e5ff0d8634402c0.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2020/11/wp_editor_md_d3e3ab1240d6a3bf5e5ff0d8634402c0.jpg" alt="" /></a>

<h3>更新 EC2 或 ELB 的安全组策略</h3>

进入到 EC2 控制台或者 ELB 的控制台，根据需要更新安全组为刚才生成的 <code>HTTP_CLOUDFRONT_IP_ONLY</code>, <code>HTTP_CLOUDFRONT_IP_ONLY_R</code> 安全组即可。

<h2>总结</h2>

整体思路就是通过一个 lambda 函数 <strong>监听 AWS 官方通知队列</strong> ，这个队列一旦有消息就会执行函数体，函数内部 <strong>拉去最新的 cloudfront ip 列表</strong> ，然后 <strong>自动生成规则</strong> 更新带有对应 TAG 的安全组]]></content:encoded>
		<excerpt:encoded><![CDATA[生产环境中出于安全和并发的考虑，一般会用 CDN 和 LB 为后端服务/资源进行加速和并发防护，在 AWS 中，CDN 服务是 CloudFront，为了从根源上避免直接访问到源，需要通过安全组的方式组织非 CloudFront 边缘节点的访问。]]></excerpt:encoded>
		<wp:post_id>636</wp:post_id>
		<wp:post_date><![CDATA[2020-11-22 13:21:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-11-22 05:21:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[aws-%e4%b8%ad%e4%bb%85%e5%85%81%e8%ae%b8-cloudfront%e8%ae%bf%e9%97%ae%e7%9a%84%e5%ae%89%e5%85%a8%e7%bb%84%e5%88%9b%e5%bb%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aws"><![CDATA[aws]]></category>
		<category domain="post_tag" nicename="cloudfront"><![CDATA[cloudfront]]></category>
		<category domain="post_tag" nicename="lambda"><![CDATA[lambda]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="serverless"><![CDATA[Serverless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[637]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[79]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[433]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>分享一下 Vue 中 nextTick 的使用</title>
		<link>https://blog.wj2015.com/2021/01/25/%e5%88%86%e4%ba%ab%e4%b8%80%e4%b8%8b-vue-%e4%b8%ad-nexttick-%e7%9a%84%e4%bd%bf%e7%94%a8/</link>
		<pubDate>Mon, 25 Jan 2021 02:22:51 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=646</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  本文也发布于 learnku社区，博主最近有部分时间在该社区活跃，翻译文章，讨论问题等，learnku文章链接：https://learnku.com/articles/53633
</blockquote>

<h2>目的</h2>

理解下 nextTick 的作用和几个简单的使用场景

<h2>正文</h2>

<h3>起什么作用？</h3>

在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。

我想各位都知道或了解 Vue 的渲染流程，Vue 在监听到数据变化后会重新渲染，配合 VDOM 更新真实的 DOM，而 nextTick 的触发时机就是在调用方法后的第一次重新渲染完毕后。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/01/wp_editor_md_1131d00b8d98f0283656b40d6755cf20.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/01/wp_editor_md_1131d00b8d98f0283656b40d6755cf20.jpg" alt="" /></a>

<h3>如何使用？</h3>

有两种使用方法，一种是传入回调，另一种是 Promise，官方使用示例如下：

<pre><code class="language-js line-numbers">// 修改数据
vm.msg = 'Hello'
// DOM 还没有更新
Vue.nextTick(function () {
  // DOM 更新了
})

// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)
Vue.nextTick()
  .then(function () {
    // DOM 更新了
  })
</code></pre>

如果在 SPA（单文件组件） 中，可能是这个样子

<pre><code class="language-vue line-numbers">&lt;template&gt;
  &lt;div id="test"&gt;{{msg}}&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'app',
  data() {
    return {
      "msg": "Hello World!"
    }
  },
  method() {
    this.msg = "Hi World!";
    this.$nextTick(() =&gt; {
      console.log('DOM updated:', document.getElementById('test').innerHTML)
    });
  }
}
&lt;/script&gt;
</code></pre>

<h3>有什么使用场景？</h3>

需要等待渲染完成后执行的一些方法

<h4>初始化绑定或操作 DOM</h4>

比如在 <code>created</code> 和 <code>mounted</code> 回调中，需要操作渲染好的 DOM，则需要在 <code>nextTick</code> 中执行相关逻辑，这在必须使用一些老的需要绑定 DOM 的库时很有用。

比如，在加载 UEditor 时，可能会这样玩

<pre><code class="language-vue line-numbers">&lt;template&gt;
&lt;script  id="container"  name="content"  type="text/plain"&gt;  这里写你的初始化内容  &lt;/script&gt;
&lt;/template&gt;
&lt;script&gt;
export default {
    mounted() {
        this.nextTick(() =&gt; {
            var ue = UE.getEditor('container');
        });
    }
}
</code></pre>

<h4>获取元素宽度</h4>

在 Vue 中获取元素宽度有两种方式，第一种是通过 <code>$refs[ref名称].style.width</code>，第二种可以使用传统操作 DOM 的方式获取，但这两者要获取到准确的元素宽度，则需要在 DOM 渲染完毕后执行。

<pre><code class="language-vue line-numbers">&lt;template&gt;
&lt;p ref="myWidth" v-if="showMe"&gt;{{ message }}&lt;/p&gt;  &lt;button @click="getMyWidth"&gt;获取p元素宽度&lt;/button&gt;
&lt;/template&gt;
&lt;script&gt;
export default {
  data() {
    return {
      message: "Hello world!",
      showMe: false,
    },
    methods: {
      getMyWidth() {
        this.showMe = true;
        //this.message = this.$refs.myWidth.offsetWidth; 
        //报错 TypeError: this.$refs.myWidth is undefined 
        this.$nextTick(()=&gt;{
        //dom元素更新后执行，此时能拿到p元素的属性  
        this.message = this.$refs.myWidth.offsetWidth; })
      }
    }
  }
}
&lt;/script&gt;
</code></pre>

<h2>总结</h2>

虽说 Vue 的设计理念并不建议我们去直接操作 DOM，但有些场景下出现了特别令人迷惑的问题，理解 Vue 的渲染逻辑后，使用 nextTick() 可以解决。]]></content:encoded>
		<excerpt:encoded><![CDATA[在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。]]></excerpt:encoded>
		<wp:post_id>646</wp:post_id>
		<wp:post_date><![CDATA[2021-01-25 10:22:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-25 02:22:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%86%e4%ba%ab%e4%b8%80%e4%b8%8b-vue-%e4%b8%ad-nexttick-%e7%9a%84%e4%bd%bf%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="nexttick"><![CDATA[nextTick]]></category>
		<category domain="post_tag" nicename="vue"><![CDATA[vue]]></category>
		<category domain="category" nicename="web-front"><![CDATA[前端开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[648]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>我的2020年记-大浪潮下的小小打工人</title>
		<link>https://blog.wj2015.com/2021/02/07/%e6%88%91%e7%9a%842020%e5%b9%b4%e8%ae%b0-%e5%a4%a7%e6%b5%aa%e6%bd%ae%e4%b8%8b%e7%9a%84%e5%b0%8f%e5%b0%8f%e6%89%93%e5%b7%a5%e4%ba%ba/</link>
		<pubDate>Sat, 06 Feb 2021 16:26:36 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=651</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>大纲</h2>

2020在疫情中启程，也在疫情中结束；首先是工作上先体验了一波 <code>停工+自由职业</code> 的感觉，2月到4月也是我博客输出最多的时间，随后在4月找到了新工作，开始在新的业务场景中探索，技术大方向上了解并研究了 <code>机器学习、NodeJs、ElasticSearch、Serverless、CI/CD、容器化</code> 等等一系列的东西；
与之前做内部系统的公司不同，进入到做 App的公司让我 <strong>对生产环境更为谨慎和敬畏，更多的考虑到细节和退路</strong> 。再持续为公司招聘大半年终于把后端运维团队凑齐，基于 <code>nodejs 和  AWS Lambda 的 Serverless 架构</code> 也在探索过程中逐步成型。

<h2>工作</h2>

<h3>海外旅游公司的衰落</h3>

由于疫情的影响，公司的春节旺季直接变成了亏本求生存的状态，特别是公司主要做海外轻奢定制游，收入变 0，供应商还有款项拖欠。旅游行业从渠道到供应商全体变老赖，公司全体进入 <strong>停工状态</strong> ，领上海最低公司。

当时刚过年，看着海外疫情和国内感染人数蹭蹭往上涨，觉着旅游公司至少大半年没有起色（实际上是一整年了，还是没有一点起色），工作属于挂着简历，没多少面试的状态。但还好与公司 PM 比较熟悉，接了两个外包的活儿，靠着公司低保和外包结款，再加上疫情期间支出也缩减了，一月花呗 1400多，收支平衡还是做到了。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_151bafec821834074a668f6a7c8c9d70.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_151bafec821834074a668f6a7c8c9d70.jpg" alt="" /></a>

随后在公司进一步缩减规模前，我找到了新工作，是一家做海外APP发行的小公司，吸引我的是深度学习的实践场景、技术氛围的承诺和创业公司依旧 965 的作风，<strong>至少意味着技术方向上能有不少的补全以及充足的时间自我提升。</strong>

<blockquote>
  PS：老板还是非常义气的，在几乎没有收入的情境下，六七月还把 19年的年终奖发了
</blockquote>

<h3>我的征程也是公司的征程</h3>

入职后发现公司正好处于分家、搬家、老员工离职的过渡期，给了两天时间交接工作，了解后端状况，然后就搬到了通勤 1h 的中科路（之前面百度去过的地方，真没想到日后会经常走这条路）

随后就接手了越来越多的工作，核心产品请求加密算法改造、AWS <code>Serverless</code>、<code>AWS</code> 的容器化方案 <code>Fargate</code> 和阿里云的 <code>Serverless</code>  <code>K8S</code>、过亿 ES 数据清理和迁移、<code>logstash</code> 日志手机方案、<code>CodeReview</code>、性能优化、<code>CI/CD</code> 及持续了大半年的针对运维和开发的招聘。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_35ad07e6fad9b10b2702c917b6115cd6.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_35ad07e6fad9b10b2702c917b6115cd6.jpg" alt="" /></a>

不断招聘的这大半年，经过 HR 初筛 + 题目初筛到我手上的后端开发简历 33份，运维简历 32份，听说 HR 这半年把符合的都聊了个遍，到最后还是靠着缘分，<strong>在12月到元旦这个时间找到了满足需求的人。</strong>

持久面试也是一种锻炼，最多的一天排了四个面试，每次都需要从拟好的角度配合对方的经历进行交流， <strong>从一开始控制不住面试时间，到后来渐渐把控好交流节奏，一点点的对这个过程变得熟悉。面试中遇到过从业二十年但知识也随着两侧的斑白慢慢过期的老兵，也遇到过半瓶水但莽撞桀骜的面试者，还有满足技术需求但经历作假被 HR 淘汰的各式各样的人。</strong>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_cd5de3784ad86556ee5e47c1accc7beb.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_cd5de3784ad86556ee5e47c1accc7beb.jpg" alt="" /></a>

到2020年底，团队各角色也已齐整，大部分架构已经搭建完毕趋于稳定，各个组件也都已经调整到符合当前业务的状态，<strong>回头一望，一切过往皆为序章；身为后端或身为全栈或为更好的将来做打算，技术生涯不能只放眼于现在，路在脚下，慢慢走。</strong>

<h2>社区</h2>

<h3>个人开源</h3>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_dba17a8f019ca5c8071133dd46579e35.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_dba17a8f019ca5c8071133dd46579e35.jpg" alt="" /></a>

今年的开源贡献算是稳定吧，连续一段时间都能持续输出，新增了 <code>Web3d</code> 模型转换和展示相关的项目和为招聘而写的 <code>hire-tools</code>，还有数据库迁移、API签名计算等零散的小项目。

得知我的 BUG 被深藏北极冰封上千年，心情一阵激动，甚至还为此发了朋友圈。

<strong>也许是觉得自己也许并不能在漫漫历史上有所笔墨，但我的 BUG 会比我存在的更久，在岁月中留下痕迹，也许以后它还会被送进历史博物馆也说不准呢。</strong>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_62383e4fc6596f7a2d7a4bdcd06a0a74.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_62383e4fc6596f7a2d7a4bdcd06a0a74.jpg" alt="" /></a>

<code>lay-excel</code> 项目继续修修补补，中间用了 <code>webpack</code> 重新做了打包，在11月发布了 <code>1.7.2</code>，能帮助到更多的人，让我的代码跑在世界各地的机器上，非常开心且荣幸。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_d746d83c63549fb77a454b9ce7af2f19.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_d746d83c63549fb77a454b9ce7af2f19.jpg" alt="" /></a>

<h3>Learnku</h3>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_ef02fcf2dd3186a3a25e81999215b97a.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_ef02fcf2dd3186a3a25e81999215b97a.jpg" alt="" /></a>

自 <code>2020.12</code> 发现这个平台以来，贡献了一百多个翻译分段，<code>VueJS</code> 见习版主已经到第 10周了，还有两周达到版主的要求。几乎每周都会译者排行截图留恋，霸榜的感觉真好&#x1f601;。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_c87c25f7d23409792cfe9ec22740f142.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_c87c25f7d23409792cfe9ec22740f142.jpg" alt="" /></a>

社区的新帖子每个都点开看，基本每个帖子都点赞，基本每个问题都尝试答，但是社区本身就不太活跃的样子，所以大多数声望都来自翻译；其实想在见习版主结束后转到 go 社区，因为目前个人大的学习方向就是 golang，多在社区交流发帖有利提升。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_5506b6b6b7bdd590aa2541b51e00e653.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_5506b6b6b7bdd590aa2541b51e00e653.jpg" alt="" /></a>

在这个平台的一两个月，也建立起了对英文技术翻译的一些兴趣和自信，虽然遇到长句翻译也很容易蒙圈，但看到那些英文文档和文章都没这么怕了。

<h3>开发者大会</h3>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_3a7553f9d9a7fc266a543a8ad1a9e7d9.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_3a7553f9d9a7fc266a543a8ad1a9e7d9.jpg" alt="" /></a>

参加了今年的 PHP 开发者大会，了解了一些相对前沿一些的应用和架构开阔眼界，积极互动还得了一堆小奖品

<code>Golang</code> 学差不多考虑去听听 <code>Gopher China</code>，听说 20 年分享的干货还是有不少的。

<h2>个人技术提升</h2>

<h4>深度学习</h4>

这门子技术在去年就一直很感兴趣，停工期间公司有技术分享的计划，在自己看了基础入门书籍后，做了两堂关于深度学习的分享。

那本书现在还记忆犹新，名字叫做 <strong>《深度学习的数学》</strong> ，主要涉及到的都是数学基础以及卷积、向量机的原理，基于此写了一系列博客，两三星期的样子，写了11篇，有两篇阅读量还出乎意料的不错。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/category/%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0/">机器学习</a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_730568dc32b989db86425a3908aceda9.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_730568dc32b989db86425a3908aceda9.jpg" alt="" /></a>

随后进入了现在这家公司，规模不是太大，里边也有部分深度学习的技术场景，基于 <code>VGG19</code> 做的图像风格迁移，当时招聘还专门考察了这部分的基础能力；

进公司后第二天老板就送了我两本书，一本 <strong>《深度学习之美》</strong>，一本 <strong>《DEEP LEARNING》</strong> ，第一本看了个多月刷完了，对基本的卷积、时序、OSTM、胶囊网络有了个概念，但是没上手写多少代码，实操还停留在手写数字识别上，也没有整理相关的博客。

体验到了炼丹师的快乐，hhhhh

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_c56df5c7066357f4f233ca5c48082664.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_c56df5c7066357f4f233ca5c48082664.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_980846a95915e8c326c4eb90ea8dfeec.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_980846a95915e8c326c4eb90ea8dfeec.jpg" alt="" /></a>

现在这两本书还在我的案头（并没有垫显示器）

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_c13b2f268c3aefbc74e32e49e120b4c3.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_c13b2f268c3aefbc74e32e49e120b4c3.jpg" alt="" /></a>

随后公司让调研了很多深度学习相关的产品方向，包括 <code>黑白图转彩色，动漫画风迁移，AI抠图</code> 等等，给一些项目提过一些简单的 PR，能上生产的方向特别少，最后对比多家采用了百度的抠图 API 并针对海外场景做了中转，随后由于产品停滞，进入维护阶段后就没有相关工作了，有点遗憾。

个人对这个方向还是很感兴趣的，就是积累和实践所需成本暂时无法给到，因为其他的 <strong>后端、前端方向还需要加精，不能走成了四不像。</strong>

<h4>MySQL底层</h4>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_00e8ad70ee4285c6f0f305ecfbbd09bc.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_00e8ad70ee4285c6f0f305ecfbbd09bc.jpg" alt="" /></a>
今年把 <strong>《从根上理解MySQL》</strong> 这本书读了两遍，电子版一遍，纸质版一遍，对 MySQL 的理解个人觉得得到了不少的增强，从底层行结构到页再到表空间，再从索引原理到 JOIN 再到查询优化器，以及 页Buffer 和锁，都是之前业务代码中不曾想到的东西，理解底层之后对 SQL 优化的理解更深，遇到问题的时候更加有方向。

<h4>Redis 底层</h4>

<strong>《Redis 设计与实现》</strong> 这本书去年看了一遍底层数据结构，今年重新刷了一遍，看到哨兵和集群还有槽分配的时候，身边的场景不足，了解但不够理解，还需要继续加深。

<h4>算法</h4>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_72dc99b003e7b354b5d877f1d412672d.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_72dc99b003e7b354b5d877f1d412672d.jpg" alt="" /></a>

年初买了本 <strong>《小灰的算法之旅》</strong> 很快就看完了，对算法思想有了初步的认识，但是 <strong>动手太少了</strong> 的问题依旧存在，导致很快就会忘掉。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_050f0b9e4019976901ea0310f0a75732.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_050f0b9e4019976901ea0310f0a75732.jpg" alt="" /></a>

后来刷了半个月的 <code>LeetCode</code> 每日一题，有思路的都尝试实现掉，但是很多题都找不到思路，于是乎买了一本 <strong>《labuladong 的算法小抄》</strong> ，公众号写的很不错的就买了实体书，但问题又出现了，本来我是去食堂吃饭 12:30 回来就可以刷刷算法，但是新的运维和后端小伙伴来了之后，经常外边吃，本就不充裕的时间通常就来不及看算法了。这本书看了 <code>DFS/BFS/动态规划</code> 后就被放到了桌角，有所斩获，但是跟预想的收获有点差别。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_35085ef1f3264c853de324437183cbf2.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_35085ef1f3264c853de324437183cbf2.jpg" alt="" /></a>

<h4>Web3D</h4>

<code>Web3d</code> 这个方向是疫情期间研究的，正好女朋友公司也在做这个调研，我顺着 <code>threejs</code> 折腾出来了一个效果还行的渲染，还对模型格式有了一定的理解；

还参与了部分 <a class="wp-editor-md-post-content-link" href="https://github.com/hujiulong/vue-3d-model">vue-3d-model</a> 的开发，后来找到新工作后，就没继续往里边提 PR 了。

配合之前的 python 基础以及 node 基础，结合 Docker 整了一个转换模型格式的工具出来，这就是新开源的 <a class="wp-editor-md-post-content-link" href="https://github.com/wangerzi/3d-model-convert-to-gltf">3d-model-convert-to-gltf</a> 可以 <strong>将 STL/IGES/STEP/OBJ/FBX 格式的模型转换为 GLTF 格式</strong> ，并自动压缩，有利于 web3d 的模型展示和渲染。

<table>
<thead>
<tr>
  <th>文件类型</th>
  <th>文件名</th>
  <th>转换时间</th>
  <th>原大小</th>
  <th>转换后大小</th>
</tr>
</thead>
<tbody>
<tr>
  <td>stl</td>
  <td>assets/test.stl</td>
  <td>2368.890ms</td>
  <td>7.6 MB</td>
  <td>86 KB</td>
</tr>
<tr>
  <td>iges</td>
  <td>assets/test.iges</td>
  <td>1641.226ms</td>
  <td>1 M</td>
  <td>111 KB</td>
</tr>
<tr>
  <td>stp</td>
  <td>assets/test.stp</td>
  <td>2969.200ms</td>
  <td>5.1 MB</td>
  <td>217 KB</td>
</tr>
<tr>
  <td>fbx</td>
  <td>assets/Samba Dancing.fbx</td>
  <td>&lt;1000ms</td>
  <td>3.7 MB</td>
  <td>614 KB</td>
</tr>
</tbody>
</table>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/2020/03/08/step%e5%92%8ciges%e6%a8%a1%e5%9e%8b%e8%bd%ac%e6%8d%a2%e4%b8%ba%e9%80%82%e7%94%a8web%e7%9a%84glb%e6%a0%bc%e5%bc%8f/">STEP和IGES模型转换为适用Web的glb格式</a>

还有折腾出的一些 demo 级别的东西

比如 threejs 官方 <a class="wp-editor-md-post-content-link" href="http://3d-works.wj2015.com/#/work-helmet">头盔渲染</a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_690d44ad4ef62c4299eba240953ca77e.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_690d44ad4ef62c4299eba240953ca77e.jpg" alt="" /></a>

比如一个带监控报表的 <a class="wp-editor-md-post-content-link" href="http://3d-works.wj2015.com/#/work-factory-robot">高达工厂</a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_0fafc399515674d90881a7ff7dde2232.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_0fafc399515674d90881a7ff7dde2232.jpg" alt="" /></a>

还有带简单交互，体积计算的小模型 <a class="wp-editor-md-post-content-link" href="http://3d-works.wj2015.com/#/work-eye-bone">眼骨</a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_3f6618165e396c554a6099979adefebf.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_3f6618165e396c554a6099979adefebf.jpg" alt="" /></a>

模型场景 <a class="wp-editor-md-post-content-link" href="https://preview.mobox3d.com/index.html#/Manage/editor/EAAYIrBA">编辑器</a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_0fdb59be14a2317b35a000bc754a1c77.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_0fdb59be14a2317b35a000bc754a1c77.jpg" alt="" /></a>

还有 <a class="wp-editor-md-post-content-link" href="https://github.com/wangerzi/modelbox-sdk">modelbox-sdk</a> 项目，可以动态的 <a class="wp-editor-md-post-content-link" href="https://wangerzi.gitee.io/modelbox-sdk/examples/index.html">上传模型</a> ，转换模型，然后直接生成 <a class="wp-editor-md-post-content-link" href="http://preview.mobox3d.com/index.html#/PreviewModel/EAAYIrBA">预览链接</a> 嵌入到项目中

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_b31dc89635b240a2ad0fd7bad2b95253.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_b31dc89635b240a2ad0fd7bad2b95253.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_ae5e652fa9385b8d6f8d0d5a33c7a9c7.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_ae5e652fa9385b8d6f8d0d5a33c7a9c7.jpg" alt="" /></a>

<h4>CSS及泛前端</h4>

日常工作和方向都偏向后端、运维方面，但前端来说还是很感兴趣，抽空看了 <strong>《CSS权威指南·上卷》</strong> 以了解 CSS 属性的全局和部分实现机制，介绍还是很清楚，如果工作需要的话当速查书也是很不错的选择。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_7e34fd55d711ef39377351e1c71615ca.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_7e34fd55d711ef39377351e1c71615ca.jpg" alt="" /></a>

还在拉钩教育上一分钱薅羊毛买了不少课，写得还是很好的，比如当时追更看的 <strong>《前端高手进阶》</strong>、<strong>《Webpack原理与实践》</strong>
高手进阶里边对 DOM树、 AST 语法树和浏览器渲染的部分让我印象挺深刻的
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_961df3653beec75e19ff64becdb20776.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_961df3653beec75e19ff64becdb20776.jpg" alt="" /></a>

Webpack 那本小册对执行机制和插件机制讲的很浅显易懂，看完我就 <strong>反手把之前用 <code>glup</code> 打包的 <code>lay-excel</code> 开源项目改为 <code>webpack</code> 了。</strong>

<blockquote>
  并不是只看了 8m，追更到第8讲把 plugin 之类的都讲过了
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_4c8f9013a2d24e2db9fa9ebcbcad5bd9.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_4c8f9013a2d24e2db9fa9ebcbcad5bd9.jpg" alt="" /></a>

<h4>ElasticSearch</h4>

ES 方面之前接触比较少，主要是在换公司之后，有大量业务数据存在了 ES 集群中，而集群的配置又很不合理，于是乎开始了整理老数据和集群优化之旅。

其中最为惊心动魄的就是数据迁移，来之前 ES 的 <code>rollover</code> 都是由特定机器上的定时脚本跑的，不知道何时这个脚本突然不跑了，间接导致了一个超大索引，具体细节记不太清了，大概是 60G，数据量妥妥过亿；有些索引迁移到一半还给误操作删掉了，大概一千万条，还好不是特别重要的数据，至此除了那些立马要执行的删除，我 <strong>再也不敢把 DELETE 语句放到 Console 里边了</strong> 。

<blockquote>
  其实这一千万条还能通过备份找回来，但当时问过了没关系就算了
</blockquote>

随后对 ES 的存储部分做了比较详细的调研，最后选择用 <code>AWS ElasticSearch</code> 的 IAM 来做索引的自动过期删除，原有老逻辑的 <code>rollover</code> 还是走自动脚本。

还针对索引的分片策略进行过优化，配合无用数据清理，成功在合理的数据范围内把分片数量从 <strong>1000个降到 100个</strong> ，配置也从 <strong>三主六数据降到了一主两数据</strong> ，速度还比之前快。

<h4>Golang</h4>

想写 golang 不是一天两天了，中间尝试过两次但都由于各种各样的原因没有持续下来，直到后来耐住性子抽出俩星期把基础语法和 <code>net/http</code> <code>gin</code> <code>gorm</code> 的常用库弄懂了，才算正式入门，目前做出的东西暂时还没有值得一提的，就是编译产物直接能在 <code>alphine</code> 的基础 Docker 镜像上跑还是很吸引我的，对容器大小压缩和部署很有帮助。

这两天发现了 <a class="wp-editor-md-post-content-link" href="https://github.com/tal-tech/go-zero">go-zero</a> 这个开源项目，非常强大，作者微信直连，很赞。

<h4>Nodejs - Serverless</h4>

来到新公司的另一个收获是对无服务化的理解，<code>AWS Lambda</code> 只是 <code>FAAS</code> 的一种实现方式，目前支持 <code>python/nodejs</code> 两种语言；在 <code>Lambda</code> 中，时间就是金钱，最近修改计费维度为 1ms，省钱的作用就更明显了，代码写越好执行时间越短越省。

两种语言我都写过，都是弱类型的脚本语言，在包管理和逻辑编写上还是 JS 相对更舒服一点，而且 <code>Nodejs</code> 前端也能很快上手，维护成本相对低一些。

曾写过一个 <code>dynamo</code> 数据流同步 <code>ES</code> 的需求，官方代码是 <code>Python</code> 的，部署上去的包特别大，还老是莫名其妙执行超时导致后继所有流推送失败，跑得还特别慢（记得是 1s 上下）；随后用 <code>NodeJs</code> 重写了一份相同的逻辑，运行非常稳定，一次推送平均 40ms（算上启动时间）。

写这么久 <code>Lambda</code>，要想真正发挥其作用还是需要与生态相结合，比如 <code>AWS</code> 中的 <code>CDN</code>、<code>API GATEWAY</code> 以及整合 <code>Lambda</code> 的神器 <code>step function</code> 工作流，可惜现在还不支持 <code>RESTFUL</code> 风格的 <code>API GATEWAY</code>，不然就作为公司无服务架构的核心了。

<code>Serverless</code> 也不全是好的方面，首当其冲 <strong>冷启动问题</strong> ，比如长时间没有请求进来，lambda 的运行池中没有你部署的代码，第一次启动就会非常慢，甚至能有几百个毫秒；亦或者请求比较零散，没有做预启动实例的情况下，长时间都只有一个实例在运行，突然请求多起来了，出现了两个实例并行运行的情况，冷启动问题又出现了，这种问题目前的云厂商都还没有好的解决方案。

还有偶现的全局变量连接复用时，连接超时、连接被关闭等问题持续存在，需要经常分析日志和报表才能从中发现和解决。

<h4>Docker 容器化及 CI/CD</h4>

这一年运维任务上接触最多的就是 <code>Docker</code> 了，从我进入新公司开始，就开始了环境容器化之旅，先是基于 <code>docker-compose</code> 做了一个可复用的测试环境，随后开始为项目编写 <code>Dockerfile</code>，搭建镜像仓库，做项目基础镜像等等工作。

随后新项目要部署，调研了 <code>AWS Fargate</code> 容器化方案以及 <code>Aliyun Serverless K8S</code> 容器化方案对项目做了流程化的部署，弹性伸缩和自动滚动发布是真好用，偶尔看着高峰期自动加上的机器就有种莫名成就感hhhh。

毕竟要容器化部署，打包之类的自然得自动化，公司仓库用的 <code>Github</code>，于是顺理成章用来 <code>GithubActions</code>，跟 <code>Gitlab-CI</code> 用起来差不太多，大多数场景用封装好的 <code>action</code> 就能实现，挺简洁的。

测试分支推送后会自动更新到测试环境，生产环境需要打 <code>tag</code> 生成对应镜像后半手工上线，已经比之前人肉运维逐个机器进行灰度发布好太多了。

<h2>个人</h2>

<h3>旅行</h3>

去年和女朋友定下的主题是 <strong>“陪你一起看世界”</strong>，所以 2020 年农历春节本来打算一起桂林深圳游玩一下，请假、旅行计划和机票都准备好了，但是疫情突如其来，全盘打乱，哪儿也去不成，返沪后疫情未曾好转，还有外包和找工作悬着，所以直到下半年才开始慢慢出游。

单论去过的地方，今年还是有不少的，八月去了黄山，十一回了趟重庆，元旦前去了南阳，再去了杭州，然后去了绍兴。

元旦之行还借了单反，学会了单反的基础操作，也拍出来了一些看起来不错的照片。

<h3>黄山之行</h3>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_0a13149821b1227ea738459e13f5783b.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_0a13149821b1227ea738459e13f5783b.jpg" alt="" /></a>

黄山真的超美，烟雾朦胧，时不时露出人造小亭和嶙峋奇石，恍若仙境。
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_3769a3dab5b80b91224d1a311823eda2.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_3769a3dab5b80b91224d1a311823eda2.jpg" alt="" /></a>

黄山给我印象最深的除了日出，还有凌晨四点为了看日出出门后看到的第一眼星空， <strong>它不像城市内看到的星星那么暗淡无光，也不像虚拟星空软件里边每颗星都那么刺眼，但就是那么清晰，buling buling 的闪，抬头看到的那一刹那我感觉眼泪都快涌出来了</strong>，无际的星光以及皎洁的月光洒在额头上，自己就像变身成了光，置身于空旷无际的宇宙。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_df7c9bd95db30ba5a384261519148e5d.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_df7c9bd95db30ba5a384261519148e5d.jpg" alt="" /></a>

当时拍照全靠手机，无法照下这震撼的一幕，网上找了拍摄图，但跟身临其境的体验差别还是很大的。

<h3>国庆之行</h3>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_30f59df4d9aef7d367fec8dbf3b43143.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_30f59df4d9aef7d367fec8dbf3b43143.jpg" alt="" /></a>

十一国庆去了绍兴见了家长，天气不冷不热，温度刚好，风儿喧嚣，充满了生活的气息。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_74a1b5afd8da9f25e299b74d28e48b4a.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_74a1b5afd8da9f25e299b74d28e48b4a.jpg" alt="" /></a>

还跟大学室友、女朋友一起在重庆齐聚一堂，虽然我是土生土长的重庆人，但有些地方也是第一次去，有些店也是第一次吃。

洪崖洞不管去几次都会有一种华灯初上，千与千寻的感觉~

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_1c265c55852fd9d23a45fbf14f341188.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_1c265c55852fd9d23a45fbf14f341188.jpg" alt="" /></a>

到了重庆自然是少不了的火锅，较场口佩姐火锅（伙伴们搜出来的，本地人只听过没去吃过）

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_dffc413e7966df31512392bbf5ef2a47.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_dffc413e7966df31512392bbf5ef2a47.jpg" alt="" /></a>

国庆生活还是很丰富多彩的，连续十一天，从东到西又从西到东。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_4634ddf3801f8917cb714320b18811c1.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_4634ddf3801f8917cb714320b18811c1.jpg" alt="" /></a>

<h3>元旦之行</h3>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_4c85c1d5f1241daf382ee7541007228a.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_4c85c1d5f1241daf382ee7541007228a.jpg" alt="" /></a>

元旦九天的安排更为松散，学了两晚上的单反，然后就带着一路游一路拍，从上海到南阳与记忆中的人和物团聚，再从南阳到杭州领略西湖风光，最后再拜访了女方家长，收官！

<h4>记忆和现实交触的校园</h4>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_d2c5e4011aa345c204368bea839564ce.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_d2c5e4011aa345c204368bea839564ce.jpg" alt="" /></a>

总是能回想起踏上技术之路的点点滴滴，熟悉的学生社团、熟悉的教室，位置没变场景没变，但是人变了，变得都不认识了，教室也没有我们的位置了。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_3dd3495319f045a6c309b41c0984dd1a.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_3dd3495319f045a6c309b41c0984dd1a.jpg" alt="" /></a>

<h4>蒙出来的精选作品分享</h4>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_88fa6633d61577e6b74ad1c9e0f064a6.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_88fa6633d61577e6b74ad1c9e0f064a6.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_30c98d7257622bfb08fe69e148030667.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_30c98d7257622bfb08fe69e148030667.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_604499a42f0bd815224b5c3552f17e61.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_604499a42f0bd815224b5c3552f17e61.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_4dc36e57bf48059fdc5e6edb9f9a1151.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_4dc36e57bf48059fdc5e6edb9f9a1151.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_e4b2a264fae8b6c7071b0564fea992a1.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_e4b2a264fae8b6c7071b0564fea992a1.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_70a37b55602d24ea21c674d2914c429a.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/02/wp_editor_md_70a37b55602d24ea21c674d2914c429a.jpg" alt="" /></a>

<h2>关于未来</h2>

<strong>时间不会停下来等待任何人，变化总在时时刻刻的发生着</strong> ，从实习进入互联网工作的这两年中，经历过数次业务缩减裁员，公司由盛转衰再到疫情打击下的举步维艰。再经历了停工+自由职业，再慢慢稳定找到了一个适合当前阶段的公司开始新征程。

之前看 <strong>《谁偷了我的奶酪》</strong>，就喜欢像 匆匆、嗅嗅 那样，不放松警惕，<strong>发现周围的变化，脚踏实地去做，用以应对突然可能发生的变动，尽量把主动权握到自己手里！</strong>

<strong>在平时也都会有一种危机感和焦虑感，一是来自技术，二是来自生活。</strong> 互联网行业现在相对传统行业确实有着相对高的薪资，有点机器逐步淘汰和剥削传统手工业的感觉。举个可能不很恰当的例子，当年煤矿业也是令人羡慕的赚钱行当，资深矿工也能拿到相对不错的高薪资，但是随着产业和大工业的发展，矿工的工资也变得与普通工种一样。<strong>像程序猿这个行当，在智能化和滚滚后浪推前浪的趋势下，在未来也可能变成普通工种，唯像前文说的 “匆匆”、“嗅嗅” 那样关注及适应变化，方可在时代的大潮起伏中向前游去。</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>651</wp:post_id>
		<wp:post_date><![CDATA[2021-02-07 00:26:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-06 16:26:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%88%91%e7%9a%842020%e5%b9%b4%e8%ae%b0-%e5%a4%a7%e6%b5%aa%e6%bd%ae%e4%b8%8b%e7%9a%84%e5%b0%8f%e5%b0%8f%e6%89%93%e5%b7%a5%e4%ba%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2020"><![CDATA[2020]]></category>
		<category domain="post_tag" nicename="%e6%80%bb%e7%bb%93"><![CDATA[总结]]></category>
		<category domain="post_tag" nicename="%e6%97%85%e8%a1%8c"><![CDATA[旅行]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<category domain="category" nicename="%e9%9a%8f%e7%ac%94"><![CDATA[随笔]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[280]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[29]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[669]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用 Vue3 + vite + elementUI 开发一个 Utools Markdown 编辑器插件</title>
		<link>https://blog.wj2015.com/2021/08/12/%e4%bd%bf%e7%94%a8-vue3-vite-elementui-%e5%bc%80%e5%8f%91%e4%b8%80%e4%b8%aa-utools-markdown-%e7%bc%96%e8%be%91%e5%99%a8%e6%8f%92%e4%bb%b6/</link>
		<pubDate>Thu, 12 Aug 2021 03:19:06 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=689</guid>
		<description></description>
		<content:encoded><![CDATA[<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_2ac49382f138dd58872b7151056eca99.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_2ac49382f138dd58872b7151056eca99.jpg" alt="" /></a>

[toc]

<h2>目的</h2>

博主个人已经用了很久的 Utools 了，会员也续到了 2024 年，它跟随博主从 Deepin 到 Manjaro，再到 Windows 再到 MacOS，在很多场景下都非常方便，比如选中文本中键翻译、复制 JSON 后自动格式化、正则表达式匹配小工具、计算稿纸等。已推荐给很多同事、朋友使用，无不夸其高效便捷。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_caa59a234ecad2dac37d0b52ee546460.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_caa59a234ecad2dac37d0b52ee546460.jpg" alt="" /></a>

而在使用的同时，也想为社区出一份力，实现一些插件为自己为他人提供更多的便利，<strong>Utools 为实现多端兼容，主要使用 JS 开发插件</strong>，界面 UI 与组件交互与传统的 web 开发别无二致，只不过可以利用更多的系统能力去做传统 web 开发不能做到的事情。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_f5c05cf892a8820a62ed1b11398a8ec6.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_f5c05cf892a8820a62ed1b11398a8ec6.jpg" alt="" /></a>

<h3>开发文档整理</h3>

Utools 开发者文档：http://u.tools/docs/developer/welcome.html
ElementUI开发文档：https://element-plus.org/#/zh-CN/component/installation
Vue3 开发文档：https://v3.vuejs.org/guide/introduction.html
Vite 开发文档：https://vitejs.dev/config/

在开发者文档中，快速上手仅提供了原生 JS + utools 能力的调用结合，这篇文档的目标是<strong>将 Vue3 与 Utools 开发结合，并将国内比较流行的 ElementUI 框架集成在一起</strong>，最终会基于这些技术创造出一个简易的 Markdown 编辑器，Utools 上搜索 <strong>『清爽 Markdown 编辑器』</strong> 即可体验。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_79861a0615b3fba0215da77bdaafb508.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_79861a0615b3fba0215da77bdaafb508.jpg" alt="" /></a>

具体代码见：

Github：https://github.com/wangerzi/utools-vue3-markdown-editor

Gitee：https://gitee.com/wangerzi/utools-vue3-markdown-editor

界面效果如下：

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_03fa153f98a6b7131bd78234b8fcfc9e.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_03fa153f98a6b7131bd78234b8fcfc9e.jpg" alt="" /></a>

还有一些优秀的开源插件可参考：

<a class="wp-editor-md-post-content-link" href="https://github.com/xiaou66/utools-pictureBed">https://github.com/xiaou66/utools-pictureBed</a>

<a class="wp-editor-md-post-content-link" href="https://github.com/xkloveme/utools-calendar">https://github.com/xkloveme/utools-calendar</a>

<a class="wp-editor-md-post-content-link" href="https://github.com/in3102/upassword">https://github.com/in3102/upassword</a>

<h2>基础工具的集成</h2>

这一小节的目的主要是将业务框架和主要依赖安装好，为实现业务做准备。

空白项目只有一个 <code>README.md</code> 和 <code>.gitignore</code>

本阶段的配置和代码执行已放入 <a class="wp-editor-md-post-content-link" href="https://github.com/wangerzi/utools-vue3-markdown-editor/tree/element-template">https://github.com/wangerzi/utools-vue3-markdown-editor/tree/element-template</a> ，如果想基于同样的技术栈做研发，可以直接把代码下载下来改。

<h3>初始化项目</h3>

首先，这是一个 vue3 + vite 的项目，根据官方的 <a class="wp-editor-md-post-content-link" href="https://v3.vuejs.org/guide/installation.html#vite">快速上手指引</a>，在项目根目录下执行如下指令，注意对比执行结果和 node 版本

<blockquote>
  其中  <code>mv utools-vue3-markdown-editor/* ./</code> 是因为项目初始化在子文件夹中，不在主目录初始化是因为会删除该目录所有文件，而空白项目中已经有 .git/README.md/.gitignore 了，初始化到本目录中，会导致这些数据被清理掉，规避风险所以创建在了子目录中。
</blockquote>

<pre><code class="language-shell line-numbers">$ node -v
v12.16.1

$ npm -v
6.13.4

$ npm init vite utools-vue3-markdown-editor -- --template vue
npx: 6 安装成功，用时 3.61 秒
√ Select a framework: » vue
√ Select a variant: » vue

Scaffolding project in D:\phpStudy\WWW\github\utools-vue3-markdown-editor\utools-vue3-markdown-editor...

Done. Now run:

  cd utools-vue3-markdown-editor
  npm install
  npm run dev

$ mv utools-vue3-markdown-editor/* ./

$ rm -rf utools-vue3-markdown-editor\

$ npm install

&gt; esbuild@0.12.18 postinstall D:\phpStudy\WWW\github\utools-vue3-markdown-editor\node_modules\esbuild
&gt; node install.js

npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN utools-vue3-markdown-editor@0.0.0 No repository field.
npm WARN utools-vue3-markdown-editor@0.0.0 No license field.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})

added 57 packages from 78 contributors in 10.725s

3 packages are looking for funding
  run `npm fund` for details


$ npm run dev

&gt; utools-vue3-markdown-editor@0.0.0 dev D:\phpStudy\WWW\github\utools-vue3-markdown-editor
&gt; vite

Pre-bundling dependencies:
  vue
(this will be run only when your dependencies or config have changed)

  vite v2.4.4 dev server running at:

  &gt; Local: http://localhost:3000/
  &gt; Network: use `--host` to expose

  ready in 1375ms.
</code></pre>

此时访问 http://localhost:3000/ 将会看到如下界面，表示项目初始化完成

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_351fe3c5194528957a7dbbd354d05644.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_351fe3c5194528957a7dbbd354d05644.jpg" alt="" /></a>

<h3>框架引入</h3>

下一步引入 element 框架，主要参考 <a class="wp-editor-md-post-content-link" href="https://element-plus.org/#/zh-CN/component/installation">官方安装文档</a>

执行如下指令

<pre><code class="language-shell line-numbers">$ npm install element-plus --save
npm WARN utools-vue3-markdown-editor@0.0.0 No repository field.
npm WARN utools-vue3-markdown-editor@0.0.0 No license field.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})

+ element-plus@1.0.2-beta.70
added 9 packages from 6 contributors in 11.379s

4 packages are looking for funding
  run `npm fund` for details

</code></pre>

<h4>按需引用和 SASS</h4>

由于 vite 、 webpack 等打包工具会用 tree-shaking 剔除未使用的代码，做按需引用可最大程度的利用此功能，减少打包体积。ElementUI 官方也提供了 <a class="wp-editor-md-post-content-link" href="https://element-plus.org/#/zh-CN/component/quickstart">element 按需引用的使用说明</a>。

这一步的目的是安装 vite 的 style 引入插件，并安装 sass 和 sass-loader 以兼容 sass 的加载，执行如下指令：

<pre><code class="language-shell line-numbers">$ npm install vite-plugin-style-import -D
npm WARN utools-vue3-markdown-editor@0.0.0 No repository field.
npm WARN utools-vue3-markdown-editor@0.0.0 No license field.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})

+ vite-plugin-style-import@1.1.1
added 22 packages from 10 contributors in 3.215s

5 packages are looking for funding
  run `npm fund` for details

$ npm install sass sass-loader
npm WARN sass-loader@12.1.0 requires a peer of fibers@&gt;= 3.1.0 but none is installed. You must install peer dependencies yourself.
npm WARN sass-loader@12.1.0 requires a peer of node-sass@^4.0.0 || ^5.0.0 || ^6.0.0 but none is installed. You must install peer dependencies yourself.
npm WARN sass-loader@12.1.0 requires a peer of webpack@^5.0.0 but none is installed. You must install peer dependencies yourself.
npm WARN utools-vue3-markdown-editor@0.0.0 No repository field.
npm WARN utools-vue3-markdown-editor@0.0.0 No license field.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})

+ sass@1.37.5
+ sass-loader@12.1.0
added 17 packages from 20 contributors in 3.052s

6 packages are looking for funding
  run `npm fund` for details
</code></pre>

编辑 <code>vite.config.js</code>，调整为如下格式，这一步的目的有两个

<ul>
<li>指定明确的开发端口，这在 utools 的开发配置中也将有所体现</li>
<li>按需加载 elementUI 的 .scss 文件处理</li>
</ul>

<pre><code class="language-js line-numbers">import {defineConfig} from 'vite'
import vue from '@vitejs/plugin-vue'
import styleImport from 'vite-plugin-style-import'

// https://vitejs.dev/config/
export default defineConfig({
  base: './', // !!!!!!! 非常重要，否则打包后无法访问 !!!!!!!
  server: {
    port: 3000,
  },
  plugins: [
    vue(),
    styleImport({
      libs: [{
        libraryName: 'element-plus',
        esModule: true,
        ensureStyleFile: true,
        resolveStyle: (name) =&gt; {
          name = name.slice(3)
          return `element-plus/packages/theme-chalk/src/${name}.scss`
        },
        resolveComponent: (name) =&gt; {
          return `element-plus/lib/${name}`
        },
      }]
    })
  ]
})
</code></pre>

随后，修改 <code>src/main.js</code>，在其中添入按需引入的 ElementUI 插件和 <code>base.scss</code>

<pre><code class="language-js line-numbers">import { createApp } from 'vue'
import App from './App.vue'

import { ElButton, ElSelect } from 'element-plus'
import 'element-plus/packages/theme-chalk/src/base.scss'

const app = createApp(App);

app.component(ElButton.name, ElButton)
app.component(ElSelect.name, ElSelect)

app.mount('#app')
</code></pre>

<h4>引入验证</h4>

在 <code>src/components/HelloWorld.vue</code> 中小改一下

<pre><code class="language-vue line-numbers">&lt;template&gt;
  &lt;el-button&gt;Hello World&lt;/el-button&gt;
  &lt;h1&gt;{{ msg }}&lt;/h1&gt;

  &lt;p&gt;
    &lt;a href="https://vitejs.dev/guide/features.html" target="_blank"&gt;
      Vite Documentation
    &lt;/a&gt;
    |
    &lt;a href="https://v3.vuejs.org/" target="_blank"&gt;Vue 3 Documentation&lt;/a&gt;
  &lt;/p&gt;

  &lt;button type="button" @click="state.count++"&gt;
    count is: {{ state.count }}
  &lt;/button&gt;
  &lt;p&gt;
    Edit
    &lt;code&gt;components/HelloWorld.vue&lt;/code&gt; to test hot module replacement.
  &lt;/p&gt;
&lt;/template&gt;

&lt;script setup&gt;
import { defineProps, reactive } from 'vue'

defineProps({
  msg: String
})

const state = reactive({ count: 0 })
&lt;/script&gt;

&lt;style scoped&gt;
a {
  color: #42b983;
}
&lt;/style&gt;
</code></pre>

执行 <code>npm run dev</code> 并访问 <code>http://localhost:3000/</code>，看到 ElementUI 风格的按钮展现在页面上即表示成功

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_05005799edf5402c602ea2ab31421932.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_05005799edf5402c602ea2ab31421932.jpg" alt="" /></a>

<h3>utools 开发配置</h3>

上面的步骤操作完毕后，开发框架和基础目录都已经建好了，但 utools 与传统 web 开发有区别的地方在于，它可以利用客户端的能力，并能在 utools 中快速调用，所以我们需要定义两个文件 <code>plugin.json</code> 和 <code>preload.js</code> 用来指定插件的配置，封装插件可使用的客户端能力。

官方配置文档：<a class="wp-editor-md-post-content-link" href="http://u.tools/docs/developer/welcome.html">http://u.tools/docs/developer/welcome.html</a>

由于我们调试环境是运行在 <code>localhost:3000</code> 上的，utools 也考虑到了这种调试需求，根据文档可以做出配置

而这次要实现插件可以由两个入口进入，可定义两个 <code>feature</code>

<ul>
<li>关键字 『markdown 编辑器』进入主页面</li>
<li>复制后缀名为 <code>.md</code> 的文件后，唤醒 utools，我们将会自动读取对应文件并做相关编辑</li>
</ul>

考虑到 <strong>打包后的 <code>plugin.json</code> 和 <code>preload.js</code> <code>logo.png</code> 均需要出现在 <code>dist/</code> 目录下</strong> ，所以我将这三个文件都放到了 <code>public/</code> 中，这样打包后这三个文件将会出现在 <code>dist/plugin.json</code> 、 <code>dist/preload.js</code> <code>dist/logo.png</code>，符合打包要求，utools 需要加载的目标文件就是 <code>dist/index.html</code>，所以 <code>plugin.json</code> 中的 <code>main</code> 配置写 <code>index.html</code> 即可。

logo 去 <a class="wp-editor-md-post-content-link" href="https://www.iconfont.cn/">https://www.iconfont.cn/</a> 随便找了个跟文本编辑相关的拿来用了

public/plugin.json

<pre><code class="language-json line-numbers">{
  "main": "index.html",
  "logo": "logo.png",
  "platform": ["win32", "darwin", "linux"],
  "preload": "preload.js",
  "development": {
    "main": "http://127.0.0.1:3000"
  },
  "features": [
    {
      "code": "main",
      "explain": "一个方便的 markdown 编辑工具",
      "cmds":["markdown 编辑器"]
    },
    {
      "code": "copy",
      "explain": "复制文件预览及编辑",
      "cmds": [
        {
          "type": "files",
          "label": "markdown 文件预览",
          "fileType": "file",
          "match": "/\\.md$/i",
          "minLength": 1,
          "maxLength": 1
        }
      ]
    }
  ]
}
</code></pre>

preload 先简单写一个 console，具体需要用到 node / electron 相关能力了，再回来补全。

public/preload.js

<pre><code class="language-js line-numbers">console.log("preload js loaded")
</code></pre>

运行 <code>npm run dev</code> 尝试下打包：

<pre><code class="language-shell line-numbers">$ npm run build

&gt; utools-vue3-markdown-editor@0.0.0 build D:\phpStudy\WWW\github\utools-vue3-markdown-editor
&gt; vite build

vite v2.4.4 building for production...
✓ 358 modules transformed.
dist/assets/logo.03d6d6da.png             6.69kb
dist/assets/element-icons.9c88a535.woff   24.24kb
dist/assets/element-icons.de5eb258.ttf    49.19kb
dist/index.html                           0.48kb
dist/assets/index.5be5297f.js             1.02kb / brotli: 0.52kb
dist/assets/index.66070cd5.css            52.22kb / brotli: 7.52kb
dist/assets/vendor.27ac3d2d.js            211.72kb / brotli: 63.94kb
</code></pre>

<h4>调试和打包插件</h4>

首先去 utools 插件中搜索『开发者工具』，打开后点击新建项目，补齐相关信息

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_6964053e6c5db9d7ac218d450fec68f4.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_6964053e6c5db9d7ac218d450fec68f4.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_b3dbf29945d410ba504e3370c39aaf3c.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_b3dbf29945d410ba504e3370c39aaf3c.jpg" alt="" /></a>

上一步 <code>npm build</code> 后，会产生一个 <code>dist/</code> 目录，将其下的 <code>dist/plugin.json</code> 拖到开发者工具中，点击运行

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_b314f853096dc1539c13ce06c547e3bf.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_b314f853096dc1539c13ce06c547e3bf.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_a7d3a7601deac820b902bbe66eb4948f.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_a7d3a7601deac820b902bbe66eb4948f.jpg" alt="" /></a>

由于是调试模式，并且我们在 <code>plugin.json</code> 中制定了 <code>development.main</code> 为 <code>localhost:3000</code>，所以在调试期间需要 <code>npm run dev</code> 把 devserver 跑起来

<pre><code class="language-shell line-numbers">$ npm run dev

&gt; utools-vue3-markdown-editor@0.0.0 dev D:\phpStudy\WWW\github\utools-vue3-markdown-editor
&gt; vite


  vite v2.4.4 dev server running at:

  &gt; Local: http://localhost:3000/
  &gt; Network: use `--host` to expose

  ready in 1238ms.

[@vue/compiler-sfc] &lt;script setup&gt; is still an experimental proposal.
Follow its status at https://github.com/vuejs/rfcs/pull/227.

[@vue/compiler-sfc] When using experimental features,
it is recommended to pin your vue dependencies to exact versions to avoid breakage.

[@vue/compiler-sfc] `defineProps` is a compiler macro and no longer needs to be imported.
</code></pre>

然后 utools 中输入关键字 『markdown』即可看到处于 dev 状态下的插件

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_d1426f0cf2d191d207f337b4a57d0351.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_d1426f0cf2d191d207f337b4a57d0351.jpg" alt="" /></a>

进入插件后，点击右上角按钮或者 ctrl+sfhit+i 可进入开发者模式，开发者模式中可以看到 <code>preload.js</code> 正常运行，输出了 『preload js loaded』

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_e3ad758990d218f4d845f19c5d284dc5.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_e3ad758990d218f4d845f19c5d284dc5.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_30e0b6bad7f7f5d9884428a3a8b773e7.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_30e0b6bad7f7f5d9884428a3a8b773e7.jpg" alt="" /></a>

<blockquote>
  注意：指定的 plugin.json 为 <code>dev/plugin.json</code>，所以 <code>public/plugin.json</code> 、 <code>public/preload.js</code> 有任何修改，需要手动复制或者 <code>npm run build</code> 重新打包，然后 utools 开发者工具点击按钮刷新 plugin.json 即可。
</blockquote>

<h2>功能实现</h2>

功能整体比较简单，左侧为编辑区，由 textarea 实现，右侧为预览区，实时渲染左侧编辑区域的 markdown 语法的结果，下方为两个控制按钮，分别是保存和另存。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_6440d39f4c109823505bb18de6dca1d3.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_6440d39f4c109823505bb18de6dca1d3.jpg" alt="" /></a>

<h3>依赖库的安装调用</h3>

<pre><code class="language-shell line-numbers">$ npm i marked keyboardjs github-markdown-css highlight.js
npm WARN sass-loader@12.1.0 requires a peer of webpack@^5.0.0 but none is installed. You must install peer dependencies yourself.
npm WARN utools-vue3-markdown-editor@0.0.0 No repository field.
npm WARN utools-vue3-markdown-editor@0.0.0 No license field.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})

+ marked@2.1.3
added 1 package from 1 contributor in 33.831s

6 packages are looking for funding
  run `npm fund` for details
</code></pre>

<h3>布局实现</h3>

由于此应用单页即可完成，所以简单改造下 <code>src/App.vue</code> 和 <code>src/components/HelloWorld.vue</code> 即可，其中 <code>HelloWorld.vue</code> 在项目中被重命名为了 <code>Editor.vue</code>，目录结构如下图所示：

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_488df0b2674602bde37f94811ac9c965.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_488df0b2674602bde37f94811ac9c965.jpg" alt="" /></a>

<h4>Editor.vue</h4>

模板部分用了 Element 的 el-row 和 el-col，规划好基础布局

<pre><code class="language-vue line-numbers">&lt;template&gt;
  &lt;div class="container"&gt;
    &lt;el-divider content-position="center"&gt;{{props.path?('当前：'+props.path):'临时文件'}}&lt;/el-divider&gt;
    &lt;el-row :gutter="30"&gt;
      &lt;el-col :span="12"&gt;
        &lt;el-input type="textarea" placeholder="markdown..." resize="none" :rows="19" :autofocus="true" v-model="state.content"&gt;&lt;/el-input&gt;
      &lt;/el-col&gt;
      &lt;el-col :span="12"&gt;
        &lt;div class="rendered markdown-body" v-html="renderedContent"&gt;&lt;/div&gt;
      &lt;/el-col&gt;
    &lt;/el-row&gt;

    &lt;el-row justify="center" :gutter="30"&gt;
      &lt;el-col :span="6"&gt;
        &lt;el-button class="save-button" @click="handleSave"&gt;{{saveText}}&lt;/el-button&gt;
      &lt;/el-col&gt;
      &lt;el-col :span="6"&gt;
        &lt;el-button class="save-button" @click="handleSaveAs"&gt;{{saveAsText}}&lt;/el-button&gt;
      &lt;/el-col&gt;
    &lt;/el-row&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>

样式部分，手动做了些阴影和高度、换行限制

<pre data-language=HTML><code class="language-markup line-numbers">&lt;style scoped&gt;
.el-row {
  margin-bottom: 20px;
}
.container {
  width: 90%;
  margin: 20px auto;
}
.rendered {
  /*height: calc(100% - 20px);*/

  height: calc(407px - 20px);

  word-break: break-all;

  box-shadow: 0 2px 4px rgba(0,0,0,0.12),0 0 6px rgba(0,0,0,0.04);

  border: 2px solid #eee;
  padding: 10px 20px;

  overflow-y: auto;
}

.save-button {
  margin: 0 auto;
  display: block;
}
&lt;/style&gt;
</code></pre>

处理逻辑里边，使用了 vue3 的 setup api，定义了 <code>state.path</code> 和 <code>state.content</code> 两个关键的响应式变量，调用了 <code>markd</code>, <code>highlight</code>, <code>keyboardjs</code> 等项目实现功能。

<pre data-language=HTML><code class="language-markup line-numbers">&lt;script setup&gt;
import { defineProps, defineEmits, reactive, watch, computed } from 'vue'
import marked from 'marked'
import "github-markdown-css/github-markdown.css"

import hljs from 'highlight.js'
import "highlight.js/scss/default.scss"

import keyboard from "keyboardjs"

marked.setOptions({
  renderer: new marked.Renderer(),
  highlight: function(code, lang) {
    const language = hljs.getLanguage(lang) ? lang : 'plaintext';
    return hljs.highlight(code, { language }).value;
  },
  pedantic: false,
  gfm: true,
  breaks: false,
  sanitize: false,
  smartLists: true,
  smartypants: false,
  xhtml: false
});

const props = defineProps({
  content: String,
  path: String,
})

const state = reactive({ content: props.content })

watch(() =&gt; props.content, () =&gt; {
  state.content = props.content
})

watch(() =&gt; props.path, () =&gt; {
  state.path = props.path
})

const renderedContent = computed(() =&gt; {
  return marked(state.content)
})


// save and save as
const emits = defineEmits(['save'])

const saveText = "保存（ " + (utools.isMacOs() ? "⌘" : 'Ctrl') + " + S ）"
const saveAsText = "另存为（ " + (utools.isMacOs() ? "⌘" : 'Ctrl') + " + Shift + S ）"

function handleSave() {
  if (props.path === "") {
    handleSaveAs()
  } else {
    emits('save', props.path, state.content);
  }
}

function handleSaveAs() {
  const savePath = utools.showSaveDialog({
    title: '保存位置',
    defaultPath: "临时文件.md",
    buttonLabel: '保存'
  })
  if (savePath) {
    emits('save', savePath, state.content);
  }
}

// keyboard
keyboard.bind("mod &gt; s", () =&gt; {
  handleSave()
});
keyboard.bind("mod + shift &gt; s", () =&gt; {
  handleSaveAs()
});

&lt;/script&gt;
</code></pre>

<h3>调用 utools 能力做保存</h3>

<h4>preload.js</h4>

上一节提到了 preload.js 可以实现一些 web 无法实现的客户端功能，比如读取、保存客户端文件，官方规定，需要上架插件市场的插件，均需要明文 preload.js 以便审核，这里的需要用到的核心能力就是读取和保存用户文件了，这里针对读取和保存也做了收口，减少由于业务层 BUG 穿透过去影响系统正常运行的可能性。

<pre><code class="language-js line-numbers">const fs = require('fs');

console.log("preload js loaded")

window.readMarkdownFile = function (path) {
  if (path.match(/\.md$/i)) {
    return fs.readFileSync(path, {
      encoding: "utf-8"
    });
  } else {
    return "";
  }
}

window.writeMarkdownFile = function (path, content) {
  if (fs.existsSync(path)) {
    if (path.match(/\.md$/i)) {
      fs.writeFileSync(path, content)
      return true;
    } else {
      return false;
    }
  } else {
    fs.writeFileSync(path, content)
    return true;
  }
}
</code></pre>

<h4>App.vue</h4>

在业务层中即可调用经过 window 变量暴露出来的 <code>readMarkdownFile</code> 和 <code>writeMarkdownFile</code> 方法，使用 utools 的钩子函数（<a class="wp-editor-md-post-content-link" href="http://u.tools/docs/developer/api.html#%E4%BA%8B%E4%BB%B6">onPluginEnter</a>）即可识别入口为复制了 markdown 文件还是直接打开。

<pre><code class="language-vue line-numbers">&lt;template&gt;
  &lt;Editor :content="state.content" :path="state.path" @save="handleSave" /&gt;
&lt;/template&gt;

&lt;script setup&gt;
import {reactive} from 'vue';
import { ElMessage } from 'element-plus'
import Editor from './components/Editor.vue'

const state = reactive({
  content: "",
  path: "",
})

function handleSave(path, content) {
  if (path &amp;&amp; content !== state.content) {
    writeMarkdownFile(path, content)
    ElMessage.success({
      message: '保存成功',
      type: 'success'
    });

    if (state.path === '') {
      state.path = path
      state.content = readMarkdownFile(state.path)
    }
  }
}

utools.onPluginEnter(({code, type, payload}) =&gt; {
  console.log('用户进入插件', code, type, payload)

  if (type === 'files') {
    state.path = payload[0].path;
    state.content = readMarkdownFile(state.path)
  } else {
    state.path = ""
    state.content = ""
  }
})
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre>

<h3>打包 upx 或发布到插件中心</h3>

调试无误后，点击打包为 upx 即可自行安装测试或分发

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_9c839b65f108be43c2316fba14d174db.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_9c839b65f108be43c2316fba14d174db.jpg" alt="" /></a>

也可以在『插件发布中』点击发布插件，填写相关信息，审核后即可在插件市场看到发布的插件。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_e1cdddbccf8c285262e833d393a7d89e.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2021/08/wp_editor_md_e1cdddbccf8c285262e833d393a7d89e.jpg" alt="" /></a>

<h2>常见问题和总结</h2>

不论是使用 webpack 还是 vite ，打包时一定要注意打包路径（base: "./"），因为 utools 需要根据相对路径索引打包资源，否则调试模式下是好的，只要发布为 upx 就出问题。

开发 utools 插件上手也很快的，本博客对应的插件在基础框架引入后，开发、调试、编写文档的时间不到六小时。

最后，祝 utools 越做越好，完善 utools 插件生态的人越来越多，星星之火可以燎原。]]></content:encoded>
		<excerpt:encoded><![CDATA[在使用 Utools 的同时，也想为社区出一份力，实现一些插件为自己为他人提供更多的便利，**Utools 为实现多端兼容，主要使用 JS 开发插件**，界面 UI 与组件交互与传统的 web 开发别无二致，只不过可以利用更多的系统能力去做传统 web 开发不能做到的事情。]]></excerpt:encoded>
		<wp:post_id>689</wp:post_id>
		<wp:post_date><![CDATA[2021-08-12 11:19:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-12 03:19:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bd%bf%e7%94%a8-vue3-vite-elementui-%e5%bc%80%e5%8f%91%e4%b8%80%e4%b8%aa-utools-markdown-%e7%bc%96%e8%be%91%e5%99%a8%e6%8f%92%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="markdown"><![CDATA[Markdown]]></category>
		<category domain="post_tag" nicename="utools"><![CDATA[utools]]></category>
		<category domain="category" nicename="web-front"><![CDATA[前端开发]]></category>
		<category domain="post_tag" nicename="%e6%8f%92%e4%bb%b6"><![CDATA[插件]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[695]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_48731327566e02bcdc51e24858658c72]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[85]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_47d96b68a6709451a21e74547a1920aa]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_8485ebd32cf62158aecd5b8be23f5001]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[183]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1503</wp:comment_id>
			<wp:comment_author><![CDATA[helei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hardyfish@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[42.3.19.84]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-12-13 14:06:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-12-13 06:06:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好，看到你的网站，对你的技术能力很感兴趣，我司在做3D模型这块，能否详细谈一谈，请VX 159 626 70772]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1639375568]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1639375568.873707;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1647773531.420625;s:5:"event";s:15:"status-approved";s:4:"user";s:3:"Jie";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>区块链是怎样保证数据不被篡改的？</title>
		<link>https://blog.wj2015.com/2022/03/22/%e5%8c%ba%e5%9d%97%e9%93%be%e6%98%af%e6%80%8e%e6%a0%b7%e4%bf%9d%e8%af%81%e6%95%b0%e6%8d%ae%e4%b8%8d%e8%a2%ab%e7%af%a1%e6%94%b9%e7%9a%84%ef%bc%9f/</link>
		<pubDate>Tue, 22 Mar 2022 15:08:21 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=701</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

真正接触区块链有大半个月了，几年前同做后端的朋友就提到过区块链以及当时大火的虚拟币这个概念，总是不可避免的与骗局、忽悠、违法等等主观印象联系在一起。

最近公司想探索一下 NFT 相关的业务，作为后端自然就需要对区块链的原理、发展、机制有一个整体的了解，而 <strong>『区块链是怎样保证数据不被篡改的？』则是我最开始看比特币白皮书以及以太坊开发时最好奇的问题</strong> ，故整理本篇博客。

<h2>何谓中心化</h2>

以日常生活中常见的交易为例，我们与商贩平时用微信和支付宝付款，是因为我们和商贩都信任这些服务背后的企业，每一笔交易都由我与商贩外的第三方做一个权威的认证，如果对这笔交易有异议，依旧有一个利益第三方可以从中协调或作证。所以我们交易的基础就是基于交易双方对第三方的信任，如果这个第三方服务不靠谱，比如他叫『微付宝』，交易发起方付完钱后，交易接受方没有收到钱，而且这个『微付宝』由于自身数据管理不当，把创建好的交易记录弄丢了，那这笔交易就没人能说的清了。

这里的<strong>第三人就是交易的中心，上述交易就是中心化的交易</strong>。如果我们不想要这个第三方介入两个人的交易，那么势必需要解决中心信任问题，假如 A 在路边摊买一斤橘子，买的时候有好多路人都看到了，看到的路人都可以为这笔交易作证，那就<strong>不需要一个双方都信任的第三方了，这种机制就是去中心化的机制</strong>。

<h2>何谓不可篡改？</h2>

比如我发起了一笔交易，<strong>交易完成后，应该是所有人都认可，并且无法被否认的，这就是不可篡改</strong>。传统的各种各样的 web 系统，淘宝京东、QQ、微信、王者荣耀，他们的数据都存在于各个厂的数据库中，如果各个厂的数据库遭遇黑客攻击，或者你的数据集中放置于郊区的机房，那么某个地方的机房由于不可抗力损坏或者断网了呢，数据也会存在丢失的风险。

互联网的一般做法是，在全球各地建立数据中心，如果一个掉线了，还有备用的机器，也就是分布式系统，需要尽可能保证其数据可用且同步，而这些工作都是由各自企业管理的，数据的修改维护也是由相关企业管理的，<strong>所以在这种集中式的管理中，数据并不是不可篡改的</strong>。

同样的，如果我们不想让数据由中心化的、利益相关的企业来管理，因为企业可能监守自盗或者保管不当；<strong>那么我们就需要一套去中心化的、一旦数据达成共识就谁都不可篡改的机制，这些数据总是有带着先后顺序接踵而至的，所以这就像是一条被全世界公认的链，区块链就是想要实现这样的一条被全世界公认的历史记录不可篡改的数据链。</strong>

<h2>区块链是如何工作的？</h2>

这里有一篇比特币白皮书的翻译，当初是跟着这篇文章入门的，非常有帮助：
<a class="wp-editor-md-post-content-link" href="https://zhuanlan.zhihu.com/p/25039679">https://zhuanlan.zhihu.com/p/25039679</a>

<h3>什么是区块</h3>

<strong>数据需要一个存放他的数据结构，区块就是这样一个存储数据的数据结构</strong>，跟链表类似，一个区块总有着下一个区块的地址，从前往后遍历，就能获取所有被公信的数据。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_f1e1f8734c89e3b7fb1ce2b9fc63e722.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_f1e1f8734c89e3b7fb1ce2b9fc63e722.jpg" alt="" /></a>

上图是比特币白皮书的区块结构截图，每一个区块有自己的hash，包含的交易信息，以及 Nonce，Nonce 是块结构中一个比较关键的参数，后续会慢慢揭晓。

平时我们使用的数据，诸如图片、文本、音乐等等，如果都塞到区块里边，那么路人需要记录的东西也太多了。因此在<strong>链上只会存关键的可以代表一个具体数据资源的索引</strong>，然后具体的资源就去可被信任的资源存放处获取，因为<strong>这些数据不需要被所有人『记住』，这些数据发生的『交易/所属变化』才值得被大家记住</strong>。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_26f8ec253c458c10aab2855e8c4a16ff.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_26f8ec253c458c10aab2855e8c4a16ff.jpg" alt="" /></a>

也就是图里表现的，区块里边只存储一个 rootHash，并且这些交易信息也会被压缩、重运算，因为老的交易记录已经被之前的区块公认了，随时溯源可查。

<h3>什么是交易</h3>

区块的示意图中，tx 指的就是交易，刚才也提到过，具体的数据不需要被所有人『记住』，这些数据发生的『交易/所属变化』才值得被大家记住，比如在比特币的世界里，比特币的每一次转账就是一笔交易，最近比较火热的 NFT ，<strong>每一次转手、每一次生成，都是一笔交易，这些信息都需要被『记住』，也就是都需要被打包到区块，然后追加到大家公认的链上去，这笔交易就被大家认可了</strong>。

<h3>什么是链，链式怎样形成的</h3>

<strong>数据链就是由上面的区块一个个连起来而成的</strong>，这个比较容易理解，那么这些链是怎样形成的呢，如果我想往里记录一些数据，应该怎样操作呢？

这里就需要补充几个关键点了：

<ul>
<li>所有人都可以往链上追加新的区块</li>
<li>区块链最长的链被称为主链</li>
<li>主链上的信息是经过公认不可被篡改的</li>
</ul>

<h4>所有人都可以往链上追加新的区块</h4>

任何一台已经联网的，可以运行区块链节点程序的机器，都可以参与区块链生成的这一过程，简单分为这么几步

<ul>
<li>拉取到需要打包的交易</li>
<li>将打包好的交易生成一个区块</li>
<li>用自己计算机的性能争夺记账权，让自己的区块能被认可</li>
</ul>

为什么要争夺记账权呢，因为每一个出块周期只能有一个区块能上链，也就是<strong>全世界无数台计算机，最终只有一台计算机打包的块能够被全世界认可</strong>。

以以太坊为例，<a class="wp-editor-md-post-content-link" href="https://etherscan.io/">https://etherscan.io/</a> 大概十来秒，就会有一个新的区块被追加，以太坊也会奖励这个追加新区块的矿工。
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_a8fcf5b0062b7b4e30750fe035db2503.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_a8fcf5b0062b7b4e30750fe035db2503.jpg" alt="" /></a>

<blockquote>
  这里还会衍生出来另一个问题，为什么比特币控制在大约 10min 出一个新块，而以太坊十来秒就出一个新块呢？这是因为以太坊希望交易信息能尽快的上链，所以尽可能的压缩了出块时间，但也因此引入了新的问题，比如更多链分叉的出现，网络传播过程中大矿池的抢跑优势更严重等等。
</blockquote>

<h5>如何争夺记账权</h5>

所谓的争夺记账权有一个更专业和准确的名字叫做 <strong>POW(Proof Of Work 工作量证明)</strong>，还记得上文提到的区块中有个很重要的参数 nonce 么，这个 nonce 是矿工们挖矿时可以控制的一个参数，而且这个 Nonce 在出块时保证不会重复。那么如何证明自己的计算工作呢，矿工们把下面的信息打包在一起，version、前一个区块的 hash、Merkle 树根节点（存交易信息的）、时间戳、控制难度的字节以及 <strong>Nonce</strong>，这些信息中 <strong>只有 Nonce 是矿工可变的，因为交易信息是从网络上拉取到的，生成的 Merkle 树算出的 hash 不可控</strong>，如果找到一个 Nonce 可以将上述信息 hash 出来的结果 <strong>与官方设置的难度目标小，那么你打包的区块就会追加到链上并被网络上其他节点所认可</strong>。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_e2c84cf9f9921653ecea9ec4e6352157.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_e2c84cf9f9921653ecea9ec4e6352157.jpg" alt="" /></a>

那么如何找到这个 Nonce 呢，也很简单，在 Nonce 的可能范围内一个一个试，只需要判断算出来的 hash 是否与预期一致即可。所以一台计算机，或者说一个矿池的算力越高，同一时间内能尝试的 hash 次数就越多，算的就越快，就越可能拿到正确的 nonce。<strong>节点拿到了这个 Nonce 就是这个节点付出的相关工作的证明。</strong>

而难度目标和算出来的 hash 一样，都是一个 256 位的数字，随便拿一个 Nonce 算出来的结果要比固定的难度目标小，这个概率是 难度目标/2^256，进而可以通过该参数控制出块速度，如果出的太快了，就把难度目标降低，反之增加。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_65f8e4bd93928c55e283320bd0dc0e04.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_65f8e4bd93928c55e283320bd0dc0e04.jpg" alt="" /></a>

<h4>区块链最长的链被称为主链</h4>

为什么会有最长的链这么一说呢，因为区块链是一个大型的，全球的分布式系统，所有的数据同步和确认都需要通过网络，如果中国一个矿工打包了一个块并广播了出去，国内的节点间网速比较快，很快就认可了这个块，但几乎与此同时，美国的一个矿工也找到了 Nonce 并广播了出去，美国那边的节点就认可了美国矿工打包的新块，<strong>而国内新打包的区块还没有通过网络传输到海外，在这样的场景下，链就出现了分叉</strong>。

出现了分叉之后怎么办呢，答案是暂时放之不理，因为区块链最初是给比特币交易用的，比特币 10min 出一个块，所以近乎同时算出来 Nonce 的概率是很低的，<strong>下一个块几乎不可能再次出现冲突，所以分叉的两条链中必然会有一条链更长，而新加入的节点和陪跑的节点只认最长的链，那么分叉就被中止了</strong>。

这里可能有人会问，如果我就是想追着短一个区块的链继续工作呢？区块链不阻止你这样做，但因为大多数节点都只在最长链上工作了，最长链只会涨得比次长链快，在短一点的链上工作就没有什么意义了。

<h4>主链上的信息是经过公认不可被篡改的</h4>

如果一个攻击者想生成一个比诚实链更长的替换链，可以将此问题看做赌博破产问题。

p = 诚实链发现下一个区块的概率

q = 攻击者发现下一个区块的概率

qz = 攻击者花费 z 区块追赶上了

qz = {1 if p &lt;= q; (q/p)^z if p > q}

如果 p > q，也就是攻击者并未掌握 50%+ 的算力，追上的概率 P 可由泊松分布等公示推导而成

最后求得 P &lt; 0.001 的时候，q = 0.1 时，z = 5，也就是说哪怕攻击者掌握了全网 10% 算力，等 6 个区块被算出来，他也绝对改不了。

<h4>未被上链的区块，算力是浪费了么？</h4>

这是我听到区块链的追加区块规则后就在想，全世界无数的计算机在打包区块，结果一次出块只有一个计算机的区块会被认可，那这么多计算机的工作不就浪费了么。
从区块的角度来讲，<strong>一个区块没有上链那么这个区块的信息确实无法被公认，这些工作就是被浪费掉了</strong>，但这些算力会保障主链免受 51% 算力攻击，因为破坏者想要破坏这个系统时，只有超过全网 51% 的算力，才有可能篡改自己曾今的消费记录，<strong>如果没有这么多的陪跑者，网络会更加脆弱</strong>。

<h2>总结</h2>

区块链正是凭借其独特的运行机制，工作量证明机制，保障主链上的数据都是全网公认安全可信，不可篡改的，其中涉及到的概念都比较笼统不具体，但领会其中设计的深意和博弈，才是最重要的。

<h2>参考文档</h2>

<a class="wp-editor-md-post-content-link" href="https://bitcoin.org/bitcoin.pdf">Bitcoin whitepaper</a>
<a class="wp-editor-md-post-content-link" href="https://zhuanlan.zhihu.com/p/133202649">比特币是什么</a>
<a class="wp-editor-md-post-content-link" href="https://www.tutorialspoint.com/what-is-a-nonce-in-block-chain">What is a Nonce in Block Chain?</a>
<a class="wp-editor-md-post-content-link" href="https://paybis.com/blog/what-is-pow/">What Is PoW And What Are The Best PoW Coins?</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[最近公司想探索一下 NFT 相关的业务，作为后端自然就需要对区块链的原理、发展、机制有一个整体的了解，而『区块链是怎样保证数据不被篡改的？』则是我最开始看比特币白皮书以及以太坊开发时最好奇的问题，故整理本篇博客。]]></excerpt:encoded>
		<wp:post_id>701</wp:post_id>
		<wp:post_date><![CDATA[2022-03-22 23:08:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-03-22 15:08:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8c%ba%e5%9d%97%e9%93%be%e6%98%af%e6%80%8e%e6%a0%b7%e4%bf%9d%e8%af%81%e6%95%b0%e6%8d%ae%e4%b8%8d%e8%a2%ab%e7%af%a1%e6%94%b9%e7%9a%84%ef%bc%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="pow"><![CDATA[POW]]></category>
		<category domain="category" nicename="%e5%8c%ba%e5%9d%97%e9%93%be"><![CDATA[区块链]]></category>
		<category domain="post_tag" nicename="%e5%8c%ba%e5%9d%97%e9%93%be"><![CDATA[区块链]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[728]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Alchemy、Geth 推荐的 gasPrice 是怎么来的？</title>
		<link>https://blog.wj2015.com/2022/03/22/alchemy%e3%80%81geth-%e6%8e%a8%e8%8d%90%e7%9a%84-gasprice-%e6%98%af%e6%80%8e%e4%b9%88%e6%9d%a5%e7%9a%84/</link>
		<pubDate>Tue, 22 Mar 2022 02:22:01 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=705</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

最近公司发展 NFT 相关的业务，而 mint/transfer 都需要改变合约状态，所以需要打包并发起交易，调研 Alchemy 的时候发现他给的 gasPrice 与 MetaMask 这种钱包给的三档价格有略微区别，于是进行了一番追查。

<h2>追查记录</h2>

小狐狸的出价类似 <a class="wp-editor-md-post-content-link" href="https://ethgasstation.info/">Eth Gas Station</a>，有三档

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_b98b564720c2e6d82cd14c7e73624af1.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_b98b564720c2e6d82cd14c7e73624af1.jpg" alt="" /></a>

但 Alchemy 提供的获取 gasPrice 的接口只返回一个数据

<a class="wp-editor-md-post-content-link" href="https://docs.alchemy.com/alchemy/tutorials/sending-txs#7.-create-sendtx.js-file">https://docs.alchemy.com/alchemy/tutorials/sending-txs#7.-create-sendtx.js-file</a>
<a class="wp-editor-md-post-content-link" href="https://docs.alchemy.com/alchemy/apis/polygon-api/eth_gasprice">https://docs.alchemy.com/alchemy/apis/polygon-api/eth_gasprice</a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_5ed9b1e5a9fa4ca509fa58071c1e9364.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_5ed9b1e5a9fa4ca509fa58071c1e9364.jpg" alt="" /></a>

<h3>从 alchemy 到 web3</h3>

文档和 google 里边并没有找到，只在 EIP1155 里边提了一嘴
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_52b824f9c73640545d97cb6547415e8f.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_52b824f9c73640545d97cb6547415e8f.jpg" alt="" /></a>

好在他们的 web3 wrapper 是开源的，找了下并没有对 gasPrice 做任何的包装和处理，<a class="wp-editor-md-post-content-link" href="https://github.com/alchemyplatform/alchemy-web3">https://github.com/alchemyplatform/alchemy-web3</a>

而 web3 的 gasPrice 默认值是 web3.eth.gasPrice

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_b5b72e823fea2eac40bf7d9a95b5acfc.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_b5b72e823fea2eac40bf7d9a95b5acfc.jpg" alt="" /></a>

告诉我们是从 gas price 预言机找到的

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_b1d03fa510ca8629608d86c383b8fa01.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_b1d03fa510ca8629608d86c383b8fa01.jpg" alt="" /></a>

好在 web3.js 也是开源的，找到相关的代码，<a class="wp-editor-md-post-content-link" href="https://github.com/ChainSafe/web3.js">https://github.com/ChainSafe/web3.js</a>
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_fd0750947aa048f462135cf7389dbf90.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_fd0750947aa048f462135cf7389dbf90.jpg" alt="" /></a>

需要去调用对应 json-rpc 主机的 eth_gasPrice 方法

<h3>从 web3 到 geth</h3>

Alchemy 的文档提了一下其间差别

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_a020234f1ba8e2b99afcd4675b7b0bfb.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_a020234f1ba8e2b99afcd4675b7b0bfb.jpg" alt="" /></a>

对应的问题：<a class="wp-editor-md-post-content-link" href="https://github.com/ethereum/go-ethereum/issues/15825">https://github.com/ethereum/go-ethereum/issues/15825</a> ，意思是这个 price 是 geth 实现的
追查了相关的代码变更：<a class="wp-editor-md-post-content-link" href="https://github.com/ethereum/go-ethereum/pull/15828/files">https://github.com/ethereum/go-ethereum/pull/15828/files</a>
翻查了 geth 的源码，<a class="wp-editor-md-post-content-link" href="https://github.com/ethereum/go-ethereum/">https://github.com/ethereum/go-ethereum/</a>

提问时配置是：

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_3132a5643621fb39447d69941e9e633d.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_3132a5643621fb39447d69941e9e633d.jpg" alt="" /></a>

现在配置是：

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_43243742af37a4f86e409e63dd9eea72.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_43243742af37a4f86e409e63dd9eea72.jpg" alt="" /></a>

代码实现：
<a class="wp-editor-md-post-content-link" href="https://github.com/ethereum/go-ethereum/blob/f01e2fab07a20a4be5bedde45a366cfe89f07cd4/internal/ethapi/api.go#L64" title="https://github.com/ethereum/go-ethereum/blob/f01e2fab07a20a4be5bedde45a366cfe89f07cd4/internal/ethapi/api.go#L64">https://github.com/ethereum/go-ethereum/blob/f01e2fab07a20a4be5bedde45a366cfe89f07cd4/internal/ethapi/api.go#L64</a>
<a class="wp-editor-md-post-content-link" href="https://github.com/ethereum/go-ethereum/blob/f01e2fab07a20a4be5bedde45a366cfe89f07cd4/eth/gasprice/gasprice.go#L149" title="https://github.com/ethereum/go-ethereum/blob/f01e2fab07a20a4be5bedde45a366cfe89f07cd4/eth/gasprice/gasprice.go#L149">https://github.com/ethereum/go-ethereum/blob/f01e2fab07a20a4be5bedde45a366cfe89f07cd4/eth/gasprice/gasprice.go#L149</a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_7e8eb201b71790449d4b85b9f70601db.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_7e8eb201b71790449d4b85b9f70601db.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_0ec7fbf4f828bd300ec66c0e6baa26a2.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_0ec7fbf4f828bd300ec66c0e6baa26a2.jpg" alt="" /></a>

<strong>大概意思是，取20个块中价格位于 60% 的交易价格</strong>

网上的一些解析：<a class="wp-editor-md-post-content-link" href="https://stackoverflow.com/questions/55431745/how-do-geth-estimategas-and-suggest-gas-price-work" title="https://stackoverflow.com/questions/55431745/how-do-geth-estimategas-and-suggest-gas-price-work">https://stackoverflow.com/questions/55431745/how-do-geth-estimategas-and-suggest-gas-price-work</a>

<h2>参考文档</h2>

<a class="wp-editor-md-post-content-link" href="https://docs.alchemy.com/alchemy/tutorials/how-to-create-an-nft/how-to-mint-a-nft#step-9-call-mint-nft-and-run-node-contract-interact-js">Mint NFT and Run Node Contract</a>
<a class="wp-editor-md-post-content-link" href="https://docs.alchemy.com/alchemy/apis/polygon-api#parameters-28">Alchemy Transaction Parameters</a>
<a class="wp-editor-md-post-content-link" href="https://docs.alchemy.com/alchemy/guides/eip-1559/maxpriorityfeepergas-vs-maxfeepergas#what-is-the-base-fee-per-gas">maxPriorityFeePerGas vs maxFeePerGas</a>
<a class="wp-editor-md-post-content-link" href="https://docs.alchemy.com/alchemy/guides/eip-1559/send-tx-eip-1559#add-max-priority-fee-per-gas-field-only-recommended">How to Send Transactions with EIP 1559</a>
<a class="wp-editor-md-post-content-link" href="https://blog.alchemy.com/blog/eip-1559">The Developer EIP-1559 Prep Kit</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[最近公司发展 NFT 相关的业务，而 mint/transfer 都需要改变合约状态，所以需要打包并发起交易，调研 Alchemy 的时候发现他给的 gasPrice 与 MetaMask 这种钱包给的三档价格有略微区别，于是进行了一番追查。]]></excerpt:encoded>
		<wp:post_id>705</wp:post_id>
		<wp:post_date><![CDATA[2022-03-22 10:22:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-03-22 02:22:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[alchemy%e3%80%81geth-%e6%8e%a8%e8%8d%90%e7%9a%84-gasprice-%e6%98%af%e6%80%8e%e4%b9%88%e6%9d%a5%e7%9a%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gasprice"><![CDATA[gasPrice]]></category>
		<category domain="post_tag" nicename="web3"><![CDATA[web3]]></category>
		<category domain="category" nicename="%e5%8c%ba%e5%9d%97%e9%93%be"><![CDATA[区块链]]></category>
		<category domain="post_tag" nicename="%e5%8c%ba%e5%9d%97%e9%93%be"><![CDATA[区块链]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[706]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_9f1f2b56623758fc9d17cc9d0ac4d00e]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f08981e35c1577d10b81b946fae5d55e]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_24f2b2dfff4813e917e2b85af78a48f2]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【软考知识总结】概览</title>
		<link>https://blog.wj2015.com/2022/03/27/%e3%80%90%e8%bd%af%e8%80%83%e7%9f%a5%e8%af%86%e6%80%bb%e7%bb%93%e3%80%91%e6%a6%82%e8%a7%88/</link>
		<pubDate>Sun, 27 Mar 2022 11:21:32 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=717</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

博主最近报名了中级软考，自报名那天起正式开始了复习之旅，为期两个月

<h2>考试构成和目的</h2>

<h3>为啥要考</h3>

对在职程序员来说，先考个中级证书主要有这么几个用处

<ul>
<li>影响上海居住证积分</li>
<li>有个人所得税减免</li>
<li>简历上小加一笔</li>
</ul>

<h3>考试总纲</h3>

<ul>
<li><strong>计算机组成</strong></li>
<li>应用数学</li>
<li>计算机体系结构</li>
<li><strong>操作系统</strong></li>
<li><strong>数据结构</strong></li>
<li>计算机网络</li>
<li>C、C++/JAVA</li>
<li><strong>软件工程</strong></li>
<li>软件设计</li>
<li>信息化，安全性</li>
<li>英文资料阅读</li>
</ul>

<h3>试题结构</h3>

75 道单选+6道问答

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_9443f3da310332b9336acdc0f07b89bd.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_9443f3da310332b9336acdc0f07b89bd.jpg" alt="" /></a>

重点是组成原理、软件工程、系统开发和面向对象，其次是网络、操作系统和数据库

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_66041f3dd6cfae8b4951d8f9294b582d.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_66041f3dd6cfae8b4951d8f9294b582d.jpg" alt="" /></a>

<h3>学习模式</h3>

看了一些参考资料，大概顺序就是先看视频理解考试重点，然后不停的从后往前刷真题，视频资料是淘宝买书送的，书未到，就可以开始视频+电子书的形式开始了

视频主要是讲重点、考点，很多细节都是给到算法然后不求甚解的，作为一名从业者可以理解的更深入一些，进而更容易理解以及得到更深的印象

<h2>总结</h2>

工作之后，对于软考这类资格考试还是有一些畏难情绪的，主要是会吞噬大量的业余时间，但估算了下自己的时间，特别是最近魔都疫情严重，居家办公上下班的通勤时间也被释放出来了，花一部分时间在这上面也值得。]]></content:encoded>
		<excerpt:encoded><![CDATA[博主最近报名了中级软考，自报名那天起正式开始了复习之旅，为期两个月，这篇博客是整体概览]]></excerpt:encoded>
		<wp:post_id>717</wp:post_id>
		<wp:post_date><![CDATA[2022-03-27 19:21:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-03-27 11:21:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%bd%af%e8%80%83%e7%9f%a5%e8%af%86%e6%80%bb%e7%bb%93%e3%80%91%e6%a6%82%e8%a7%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86"><![CDATA[基础知识]]></category>
		<category domain="post_tag" nicename="%e8%bd%af%e8%80%83"><![CDATA[软考]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[725]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【软考知识总结】计算机组成结构</title>
		<link>https://blog.wj2015.com/2022/03/27/%e3%80%90%e8%bd%af%e8%80%83%e7%9f%a5%e8%af%86%e6%80%bb%e7%bb%93%e3%80%91%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bb%84%e6%88%90%e7%bb%93%e6%9e%84/</link>
		<pubDate>Sun, 27 Mar 2022 12:11:43 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=721</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

本章主要包含计算机硬件组成，CPU 、计算机各个组件，部分信息加密，安全等等

<h3>章节大纲</h3>

计算机系统

<ul>
<li>硬件组成</li>
<li>CPU</li>
<li>数据表示</li>
<li>校验码</li>
</ul>

体系结构

<ul>
<li>指令</li>
<li>存储</li>
<li>输入输出</li>
<li>总线</li>
</ul>

安全性可靠性

<ul>
<li>可靠性分析</li>
<li>安全</li>
<li>加密和认证</li>
</ul>

其中 <strong>数据表示、校验码、加密是重点</strong>

<h2>计算机系统</h2>

<h3>硬件组成</h3>

硬件五大部分，<strong>运算器，控制器，存储器，输入设备和输出设备</strong>

<h3>CPU</h3>

CPU 由运算器，控制器，寄存器和内部总线组成

运算器由 算术逻辑单元 ALU，累加寄存器 AC（临时存储逻辑运算数据），数据缓冲寄存器 DR，状态条件寄存器 PSW 组成，用于执行加减乘除和逻辑运算。

控制器由指令寄存器 IR，程序计数器 PC（存放指令地址），地址寄存器 AR，指令译码器 ID，用于程序控制和时序控制。

<h3>数据表示</h3>

十进制转 R进制，取余然后从下往上排列即可。
M转N进制，用十进制中转即可。

原码：数的正常二进制表示
反码：负数的反码取反，即为对应的数值
补码：负数的补码取反加一
移码： 常用于表示浮点数中的阶码（0.123 * 10^3），这个 3 就是阶码，包含1个符号位和n个数值位，特点是方便比大小

移码计算：偏移量为 2^n - 1，真值（整数）+偏移量即为移码的表示
比如补码 0111 1110，其移码表示 0111 1110 + 0111 1111 = 1011 1101
浮点数规格化的意思就类似 0.12&#42;10^3，二进制上的表现就是 0.101011 &#42; 2^n，小数后第一位不为0，这时候阶码才是对齐的
《阶码，尾数，移码》https://www.jianshu.com/p/180baf2e88d4
移码怎么算啊～? https://www.zhihu.com/question/491056632/answer/2234280842

小数的范围直接除以 2^(n-1)，因为留一个1在小数点前，其他的数用二进制表示，补码和移码范围一致
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_a6f983f8bee6e20646fe2a1f09afe9f1.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_a6f983f8bee6e20646fe2a1f09afe9f1.jpg" alt="" /></a>

字长指的是 CPU 能同时处理和传输的位数，字(word)用于表示一次性处理事务的固定长度，字的位数就是字长。

浮点数表示法：N = F * 2^E，F 为尾数，E为阶码，类似 101.011 = 0.101011 * 2^3

浮点数由 阶符 + 阶码 + 数符 + 尾数组成，范围由阶码确定，数值精度由尾数确定

规格化表示里，正数的补码为 0.1xxx，负数的补码应为 1.0xxx（取反+1后，第一个小数位还是1）

对阶，两个数的阶码需要相同，小阶码向大阶码看起，阶码加几位，尾数右移几位，注意溢出。
结果做规格化，尾数就可以直接相加

如果阶码（包括阶符）由 R 位移码表示，尾数（包括数符）由 M 位补码表示，则浮点数数值范围：
最大正数：(1-2(-M+1))&#42;2^(2^(R-1) -1)
最小负数：-1&#42;2^(2^(R-1) -1)

<h3>校验码</h3>

码距指编码 A -> 编码 B 需要改变的位的数，比如 00->01 的码距为1，因为只改变一位

<h4>奇偶校验码</h4>

奇偶校验码，指的是多一个位来使1的个数为奇数或者偶数，相当于把变化的码距由1变为2，只能校验正确性不能纠错，但有问题，比如刚好改了两个位，奇偶校验是看不出来的。

<h4>CRC 校验（重点）</h4>

CRC 校验，只能校验不能纠错，原理是把原码除以本源多项式，所得余数即为 CRC 校验码。
实际做题会比较简单，直接拿着数字除即可，多项式有n位，原码后补充 n-1 个0，CRC 结果也需要补齐到 n-1 位，左侧补0。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_84dbaf55fafed13ce4f4aa5fa27e92f3.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_84dbaf55fafed13ce4f4aa5fa27e92f3.jpg" alt="" /></a>

参考：https://blog.csdn.net/u013073067/article/details/86621770

<h4>海明码（重点）</h4>

海明码：原理是通过奇偶校验位，以及固定位填充数据扩大码距，从而达到校验和纠错的目的。
校验位于从低往高数，2^n 方位都是校验位，从0次方开始，1/2/4/8/16，其余位用于填充数据。
基于这个原理有个结论，海明码的校验位 k，数据位 n 满足 2^k > n+k，因为 2^k 是临界点，对应下一个校验码。

具体的算法就是，每一个校验位对应 2^k，那么其左侧的包含 2^k 的所有数据都要拿过来做顺序的疑惑，详见截图。
位于从右往左数位于第四位的校验码，即为 5/6/7 这三个位的值异或而来，1 xor 0 = 1, 1 xor 1 =0，也可以理解为奇数个 1为1，偶数个1 为0，因为 5 = 4 + 1, 6 = 4 + 2, 7 = 4 + 2 + 1
同理，位于从右往左数位于第二位的校验码，就要找解构后包含 2 的位，即为 3/6/7 异或而来，所以为0
再同理，位于第一位的校验码，找解构后包含1的位，即 3/5/7 异或而来，所以为 1

如果接收方发现数据位算出来的校验位非全0（因为算上校验位和校验位对应的位，一定是偶数个1），那么接收方拿到的校验位，比如是 100，那么就说明第 4 位数据有误，需要翻转。

为啥只有一位呢，因为错误的那个位，对应的所有校验位都是错的，比如 7 错了，那么包含他的校验位 4/2/1 都会错，因为 7 = 4 + 2 + 1，而 4/2/1 都错，也就是 111 相当于对应的 2^n 方拼接起来 4 + 2 + 1 = 7。

但这样只能纠错一位，如果两个位都错了，得出来的结果就有问题了。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_2d817c91509a4f094a5c4a84b5070826.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_2d817c91509a4f094a5c4a84b5070826.jpg" alt="" /></a>

<h2>体系结构</h2>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_b945e950bea9af4769b7eec7a54d6c99.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_b945e950bea9af4769b7eec7a54d6c99.jpg" alt="" /></a>

Flynn 分类法，两个指标，指令流和数据流，指令 Instruction，数据 Data，单 Sing，多 M，所以分为 SISD/SIMD/MISD/MIMD 四种类型。

指令对应的是控制部分，数据对应的是处理器，而内存模块是只要指令和数据存在一个是多个，那么就需要是多个。
所以多指令，单数据这个模型不实际，因为指挥者有多个，数据处理却只有一个，但对应后端关联一下，nodejs 这种事件轮询机制，redis 这种单线程处理请求的模式却有点像这个特点。

<h3>指令</h3>

指令由操作码和操作数组成，指令执行过程，<strong>取指->分析->执行</strong>

指令寻址
- 顺序，直接从 PC（程序计数器）一条条读取
- 跳跃，特殊的 jump 操作码，跳转到指定的指令上

操作数寻址
- 立即寻址，操作数即为值
- 直接寻址，给到主存地址
- 间接寻址，给到主存地址，其主存对应存放值的真实地址
- 寄存器寻址，存寄存器编号

<strong>重点</strong> 指令系统，CISC（复杂指令集），RISC（精简指令集）

特点
- CISC 指令数量多，使用频率差距大，可变格式，多种寻址方式，微程序控制实现，成本高
- RISC 指令数量少，使用频率差不多，格式少，寻址方式少，寄存器多，硬件实现逻辑，适合指令流水线，可以进行编译优化，支持高级语言

<strong>指令流水线</strong>是指 取指->分析->执行 这三个过程可以叠加在同一时间并行执行，A指令分析时，B指令就可以取指了。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_8c16b555640c3af36ba8412610ec6600.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_8c16b555640c3af36ba8412610ec6600.jpg" alt="" /></a>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_bbb5846df264a1901c7304ed0c0a9da1.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_bbb5846df264a1901c7304ed0c0a9da1.jpg" alt="" /></a>

流水线周期，指的是 取指->分析->执行 中最长过程的执行事件，因为这三个执行过程会相互影响和等待。
指令执行时间，n个指令的总执行时间为 一个完整的指令执行时间 + (n-1) * 流水线周期
吞吐率，指令执行数量/指令执行时间
加速比，不适用流水线时间/用了流水线的时间

如果有超标量流水线，比如同时能3个一起执行，那么总执行时间为 一个完整指令执行时间 + ceil((n-1)/3) * 流水线周期

<h3>存储</h3>

金字塔型是为了解决容量和速度的矛盾，从上到下，容量+，速度-。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_e3b42870efdfe091c7ab3f2b59cad144.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_e3b42870efdfe091c7ab3f2b59cad144.jpg" alt="" /></a>

为什么要做缓存，因为存储有局部性原理，也就是 CPU 在运行时，会倾向于访问较小的局部空间地址。

<ul>
<li>时间局部性原理，如果一个数据项正在被访问，不短的将来，可能会被再次访问</li>
<li>空间局部性原理，一个数据被访问，与之相邻的数据可能被再次访问</li>
</ul>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_7ba587b9bd8ea27d8f35bab270ded191.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_7ba587b9bd8ea27d8f35bab270ded191.jpg" alt="" /></a>

因为 CPU 访问 cache 的时候，用的是主存地址，那么缓存需要将主存地址映射到自己的空间内以查看是否存在，<strong>这个映射由硬件完成</strong>，主要有如下几种方案。

<ul>
<li>直接映射法，将主存分为 M个区和 N个块，缓存也分块分组，直接对应到主存的某块内存，缺点是浪费资源，因为有些分组可能用得很少</li>
<li>全相连映射法，主存直接分块，缓存记录这是在主存的哪个块，可以随意映射，缺点是慢，但不容易冲突</li>
<li>组相连映射法，结合上述两者，先给主存和缓存分组分块，然后在每一组内，进行不固定块的全相联映射，确保一个组内尽可能高的利用率，但又不至于数据规模过大导致缓存读写缓慢。</li>
</ul>

<h4>存储相关的计算</h4>

如何计算主存容量呢，容量 = 内存单元 * N字节编址，做下单位转换即可
需要用多少存储芯片，主存容量除以存储芯片容量即可

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_16cfe339b8013e72cdc52b643360a3b8.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_16cfe339b8013e72cdc52b643360a3b8.jpg" alt="" /></a>

<h3>总线</h3>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_5ffa2c30408396365382bba6b21826d6.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_5ffa2c30408396365382bba6b21826d6.jpg" alt="" /></a>

总线分三类

<ul>
<li>内部总线，芯片级别总线，芯片与处理器间通信的总线</li>
<li>系统总线，连接各个组件

<ul>
<li>数据总线，并行处理数据的大小</li>
<li>地址总线，可管理内存的大小</li>
<li>控制总线，传递控制命令</li>
</ul></li>
<li>外部总线，设备一级的，SCSI/USB 等</li>
</ul>

<h2>安全性可靠性</h2>

<h3>可靠性分析</h3>

平均无故障时间 MTTF = 1/失效率
平均故障修复时间 MTTR = 1/修复率
平均故障间隔 MTBF = MTTF + MTTR
系统可用性 MTTF/(MTTF + MTTR) * 100%

串联、并联、混合，串联是一个不可靠，全都不可靠，并联是全部不可靠才会让系统不可靠，混合就是两个可靠性公式组合在一起。

串：R=R1&#42;R2;
并：R=1- (1-R1)&#42;(1-R2)
混：R=R1*(1- (1-R2)&#42;(1-R3))

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_55b130ee0d8498c57aec83e722f2c04c.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_55b130ee0d8498c57aec83e722f2c04c.jpg" alt="" /></a>

<h3>网络安全</h3>

网络安全五要素

<ul>
<li>保密性，最小授权，信息加密，物理加密</li>
<li>完整性，传输正确无误</li>
<li>可用性，合法用户能以合法的方式访问数据</li>
<li>可控性，控制授权范围内信息流向及行为方式</li>
<li>不可抵赖性，信息参与者不能否认自己的行为，参与者身份真实有效</li>
</ul>

网络安全分类

<ul>
<li><strong>重放攻击 ARP</strong></li>
<li><strong>拒绝服务 DOS</strong></li>
<li>窃听</li>
<li>业务流分析</li>
<li>信息泄露</li>
<li>破坏信息完整</li>
<li>非授权访问</li>
<li>假冒</li>
<li><strong>旁路攻击</strong></li>
<li><strong>授权侵犯，不是按照设计的授权去做应该做的事</strong></li>
<li><strong>木马</strong></li>
<li>陷阱门，隐藏逻辑</li>
<li>抵赖（侵犯不可抵赖性）</li>
</ul>

<h3>加密和认证</h3>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_b22cc0090d422d64a5ad28256094e045.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_b22cc0090d422d64a5ad28256094e045.jpg" alt="" /></a>

常见对称加密算法：

<ul>
<li>DES</li>
<li>3DES</li>
<li><strong>AES</strong></li>
<li>RC-5</li>
<li>IDEA 算法</li>
</ul>

常见非对称算法：

<ul>
<li><strong>RSA</strong></li>
<li>PGP</li>
<li>ECC 椭圆曲线</li>
<li>Elgamal</li>
<li>背包算法、Rabin、D-H 等</li>
</ul>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_a2c50d6b4cc87a749797bb3ec965de01.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/03/wp_editor_md_a2c50d6b4cc87a749797bb3ec965de01.jpg" alt="" /></a>

<h5>数字签名</h5>

基于非对称加密，信息发送方私钥加密报文签名，公钥公开出去，接收方用公钥解密得到可信的报文签名即可。

由 CA 认证过的数字证书，以避免信息发送方的公钥私钥被替换，用户会从 CA 下载公钥，并用 CA 的公钥验证真实性。

PKI 公钥基础设施
KMC(Key Mangement Center,密钥管理中心)
KMI，由 KMC 提供的密钥管理服务

三大功能
- 核实发送者报文签名，验证来源真实姓
- 发送方无法抵赖对报文的签名
- 数据摘要能正常的被公钥解密则表明未被篡改

<h2>总结</h2>

计算机组成结构是比较重点的一个章节，分值比较高，主要复习大学时期组成原理以及部分网络原理的内容。]]></content:encoded>
		<excerpt:encoded><![CDATA[计算机组成结构是比较重点的一个章节，分值比较高，主要复习大学时期组成原理以及部分网络原理的内容。]]></excerpt:encoded>
		<wp:post_id>721</wp:post_id>
		<wp:post_date><![CDATA[2022-03-27 20:11:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-03-27 12:11:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%bd%af%e8%80%83%e7%9f%a5%e8%af%86%e6%80%bb%e7%bb%93%e3%80%91%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bb%84%e6%88%90%e7%bb%93%e6%9e%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86"><![CDATA[基础知识]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bb%84%e6%88%90%e7%bb%93%e6%9e%84"><![CDATA[计算机组成结构]]></category>
		<category domain="post_tag" nicename="%e8%bd%af%e8%80%83"><![CDATA[软考]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[725]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【软考知识总结】操作系统</title>
		<link>https://blog.wj2015.com/2022/04/10/%e3%80%90%e8%bd%af%e8%80%83%e7%9f%a5%e8%af%86%e6%80%bb%e7%bb%93%e3%80%91%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f/</link>
		<pubDate>Sun, 10 Apr 2022 02:33:25 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=724</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

操作系统部分的重点是进程状态变化以及文件存储部分，对工作和考是来说还是挺重要的，信号量 PV 的操作是重点中的重点

<h2>大纲</h2>

进程管理

<ul>
<li>状态</li>
<li><strong>前驱图</strong></li>
<li><strong>PV 操作</strong></li>
<li>进程调度</li>
<li>死锁</li>
<li>线程</li>
</ul>

存储管理

<ul>
<li>分区存储</li>
<li><strong>页式存储</strong></li>
<li>段式存储</li>
<li>段式页存储</li>
</ul>

文件管理
- <strong>索引文件</strong>
- <strong>树形结构</strong>
- <strong>空闲存储管理</strong>

设备管理

<ul>
<li>I/O 软件</li>
<li><strong>输入输出技术</strong></li>
<li>SPOOLING 技术</li>
</ul>

<h2>详细知识点</h2>

<h3>操作系统概述</h3>

操作系统的特征

<ul>
<li>并发性</li>
<li>共享性</li>
<li>虚拟性</li>
<li>不确定性</li>
</ul>

操作系统的功能

<ul>
<li>进程管理</li>
<li>存储管理</li>
<li>文件管理</li>
<li>设备管理</li>
<li>作业管理</li>
</ul>

<h3>进程</h3>

<h4>进程的三态、五态及其转换（重点）</h4>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_b7fbb11467904744a8464ae044c0c746.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_b7fbb11467904744a8464ae044c0c746.jpg" alt="" /></a>

系统自动控制时，进程<strong>只有三态，就绪、运行、等待</strong>

五态图，多的两个状态都是人工操作切换的，静止就绪态和静止等待态分别和就绪、等待，有转换关系

<h4>进程的前驱图和 PV 操作（重点）</h4>

前驱图：表示哪些任务需要并行执行，哪些任务有顺序关系

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_c56307a0cd806f05b373cc005d41409a.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_c56307a0cd806f05b373cc005d41409a.jpg" alt="" /></a>

进程资源图，一个箭头表示一个资源，箭头指向进程表示进程占有资源，箭头指向资源表示进程需要资源

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_a868d9a7a57ed35eb624cc4ce6571757.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_a868d9a7a57ed35eb624cc4ce6571757.jpg" alt="" /></a>

阻塞进程：所需资源被分配完，即被阻塞
非阻塞进程：需要的资源还有剩余，可以在分配资源后继续执行
死锁：所有进程都是阻塞状态

临界资源：各进程间需要以互斥的方式进行资源访问，与之相对的是共享资源
临界区：对临界资源进行操作的那一段代码

互斥：临界资源只能被一个进程占用，比如打印机，与之相对的是共享
同步：任务可以并发执行，但是并发进行的任务可能有执行时间上的差异

互斥信号量，临界资源的可访问控制
同步信号量，对共享资源的访问控制，记录数量

P操作，申请资源，信号量S=S-1，如果减完 &lt;0，进入阻塞进程队列
V操作，释放资源，信号量S=S+1

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_dff803595531bf234c32f19da8c3b585.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_dff803595531bf234c32f19da8c3b585.jpg" alt="" /></a>

视频中有一个挺好的例题
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_21f957319dee07925f711208c947d2f5.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_21f957319dee07925f711208c947d2f5.jpg" alt="" /></a>

<h4>进程死锁</h4>

产生死锁的四个条件
- 资源互斥
- 进程都占有并等待其他资源
- 系统不能强行剥夺资源
- 进程资源图是一个环

预防死锁，打破产生死锁的条件
- 避免：一般用银行家算法，提前算出来一条不会死锁的通路（重点）
- 检测：查到之后尝试解除
- 解除：强制剥夺资源，杀死进程

死锁计算，系统有 n 个进程，每个进程需要 R 个资源，那么假设每个进程都已经持有了 r-1 个资源，所以发生死锁的最大的资源数量为 n * (r-1)，那么不发生死锁的最小资源就是上述表达式 + 1

<h4>线程</h4>

传统进程的属性
- 可拥有资源的独立单位
- 可独立调度和分配的基本单位

<strong>线程是独立调度的最小单位，进程是拥有资源的最小单位，线程可以共享进程的公共数据，但不能共享线程独有的资源</strong>

<h3>计算机存储</h3>

<h4>页式存储结构</h4>

页存储结构：页号+页内地址，我想的话，应该是为了提高存取、缓存效率

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_41737478293eb4de1b5616dafd5a2535.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_41737478293eb4de1b5616dafd5a2535.jpg" alt="" /></a>

优点：利用率高，管理简单，碎片小（按照 4k 来分配，一个大内存程序一般只会在最后的一个页出现碎片）
缺点：增加系统消耗，抖动

如何由页号表、逻辑地址算出物理地址呢？

<ul>
<li>根据块大小，推算出页号和页内地址占多少位</li>
<li>页内地址部分不变，把页号在页号表内找到其物理块号，替换即可，注意进制转换</li>
</ul>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_9b0b77b479ae5a7edf46f610faa52820.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_9b0b77b479ae5a7edf46f610faa52820.jpg" alt="" /></a>

页面置换算法（主存和辅存间的分配算法）：进程空间有很多页面，但内存有限，可能同一时间只能有部分页面能被加载，以便进程任务能顺利进行，<strong>置换的意思就是把主存满了的时候，里边存在的部分页被移除，部分辅存被加进来</strong>。
缺页表示进程执行过程中发现页未被加载到内存中，就需要往辅存中取，<strong>缺页率越高，效率越低。</strong>

几种实现方法：

<ul>
<li>最优算法 OPT，选择未来最长时间不被使用的页进行置换</li>
<li>先进先出 FIFO，问题比较大</li>
<li>最近最少使用 LRU，目前比较好的解决方案</li>
</ul>

页表是逻辑块号和物理块之间的映射关系，<strong>快表就是把这些关系存起来放到Cache中，慢表是把映射关系存内存里</strong>，所以慢表需要查两次内存，而快表是在 Cache 中查也关系的，所以需要查一次 cache，在查一次内存。

<h4>段式存储</h4>

段页式存储：先分段再分页，段页表结构中段表部分包含 段号、段基址、段长，段表还对应了一个页表

优点：结合上面两种存放的优点，利用率高碎片少，而且程序逻辑完整
缺点：数据结构复杂，逻辑复杂，开销大，速度慢

<h4>文件结构</h4>

<strong>对单个文件的存放索引</strong>，共有十三个索引节点，0-9为直接索引，10、11、12 分别为一级间接索引，二级间接索引，三级间接索引

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_c28b92a149ae0e6ac0ab1cee017cca02.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_c28b92a149ae0e6ac0ab1cee017cca02.jpg" alt="" /></a>

假设物理盘块大小为 4kb，物理盘块地址 4B
直接索引就直接存内容，这里直接对应 4kb 的数据
间接索引的意思就是，不直接存物理盘块，而是存物理盘块的地址，所以 4k 的大小可以存 1024 个地址

一级间接索引存了 1024 个地址，所以就对应了 1024 * 4kb 的数据
二级间接索引同理，可对应 1024 * 1024 * 4kb 的数据
三级同理，1024 * 1024 * 4kb 数据

<strong>位视图法表示空闲空间</strong>是重点

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_b5f88ce5940e72307f1e63036e31aae8.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_b5f88ce5940e72307f1e63036e31aae8.jpg" alt="" /></a>

<h4>虚设备</h4>

虚设备就是虚拟设备，SPOLLING 技术就是把类似打印机这种互斥资源，前面加一个队列，让调用者不会因为打印机被占用而报错，对每个进程的角度来讲，看起来就像是每个进程都有一个自己的打印机（物理设备虚拟化，共用互斥资源）。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_727f6775edbf77e57e9d452dace8ba19.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_727f6775edbf77e57e9d452dace8ba19.jpg" alt="" /></a>

<h4>磁盘寻道算法</h4>

这里说的是机械硬盘才会有的寻道和扇区，如果是固态的话，可以根据预先布线直接定位到数据，所以快很多，参考链接：https://www.zhihu.com/question/58752580

机械硬盘是由很多双面扇片组成的，每个盘面都有很多同心圆，一个同心圆又有多个扇区，数据就存在扇区上，从硬盘中找到数据分为寻道时间和等待扇区时间，其中寻道时间消耗较长。

寻道时间算法

<ul>
<li>FCFS 先来先服务，速度最慢</li>
<li>SSTF 最短寻道优先，可能远处的磁盘数据永远都拿不到</li>
<li>SCAN 扫描/电梯算法，一定是从内到外或者从外到内扫，如果有读取需求就读取</li>
<li>CSCAN 单向扫描，固定的从内到外或者从外到内，平均读取时间更稳定</li>
</ul>

<h4>微内核</h4>

微内核只实现基本功能，优点是内核小，缺点是功能少，需要不停的切换用户态和核心态，影响效率

单体内核，优点是功能多，缺点是庞大

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_a4dc3814ce788cf0c72e53b981476c50.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_a4dc3814ce788cf0c72e53b981476c50.jpg" alt="" /></a>

嵌入式操作系统的特点是，微型化设计、实时性强

<h2>总结</h2>

这个章节里边的计算和 PV 以及概念挺多，教材上比较复杂，但应试的话跟着视频的重点走+刷题即可，里边很多细节视频都不求甚解，还需要自己去扩展了解。]]></content:encoded>
		<excerpt:encoded><![CDATA[操作系统部分的重点是进程状态变化以及文件存储部分，对工作和考是来说还是挺重要的，信号量 PV 的操作是重点中的重点]]></excerpt:encoded>
		<wp:post_id>724</wp:post_id>
		<wp:post_date><![CDATA[2022-04-10 10:33:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-04-10 02:33:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%bd%af%e8%80%83%e7%9f%a5%e8%af%86%e6%80%bb%e7%bb%93%e3%80%91%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86"><![CDATA[基础知识]]></category>
		<category domain="post_tag" nicename="%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f"><![CDATA[操作系统]]></category>
		<category domain="post_tag" nicename="%e8%bd%af%e8%80%83"><![CDATA[软考]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[725]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【软考知识总结】数据库</title>
		<link>https://blog.wj2015.com/2022/04/10/%e3%80%90%e8%bd%af%e8%80%83%e7%9f%a5%e8%af%86%e6%80%bb%e7%bb%93%e3%80%91%e6%95%b0%e6%8d%ae%e5%ba%93/</link>
		<pubDate>Sun, 10 Apr 2022 07:34:01 +0000</pubDate>
		<dc:creator><![CDATA[Jie]]></dc:creator>
		<guid isPermaLink="false">https://blog.wj2015.com/?p=730</guid>
		<description></description>
		<content:encoded><![CDATA[[toc]

<h2>前言</h2>

作为后端工作者，数据库可以说是平时接触最多的中间件之一了，所以 SQL 使用和实践一般都无甚问题，但是软考里边考的不只是 SQL 应用，还有范式、模式、依赖等等概念化的东西，所以这一章也不能掉以轻心。

<h2>正文</h2>

<h3>模式和映像（重点）</h3>

三级模式

<ul>
<li>内模式，数据库的底层文件存储</li>
<li>概念模式，可以理解为表</li>
<li>外模式，数据输出给用户前做的一些包装和处理，可以理解为视图</li>
</ul>

两级映像

<ul>
<li>外模式->概念模式，视图到表的映像，比如表数据修改了，那么修改此映像即可，无需更改视图或者更高层级的东西</li>
<li>模式概念->内模式，表到存储的映像，比如修改了表的存储结构，那么修改此映像即可，无需更高更高层级的东西</li>
</ul>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_24213535b989932b0f11869057fc3dff.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_24213535b989932b0f11869057fc3dff.jpg" alt="" /></a>

<h3>数据库设计</h3>

从上到下，从抽象到具体

需求分析：数据流图、数据字典、需求说明书
概念结构设计：E-R 图，实体属性关系
逻辑结构设计：将 E-R 图转为实际的表和列，这里涉及范式
物理设计：实际的表结构生成具体的数据库

<h3>模型及其运算</h3>

数据模型三要素，数据结构（数据类型集合），数据操作（数据可执行操作集合），数据约束

ER图转关系模型的三种情况

<ul>
<li>1对1，直接在某个表内加入另一个表的属性</li>
<li>1对N，在对应N的表内加入属性，也可以做联系表</li>
<li>M对N，联系表，M和N联合主键</li>
</ul>

关系模型的并交差代数运算：

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_ee9ee68ff22a55c33e194b5ae0c0a7c9.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_ee9ee68ff22a55c33e194b5ae0c0a7c9.jpg" alt="" /></a>

笛卡尔积 S1 X S2 运算后，属性列的数量是两个表的属性数量相加，数据条目是两个表的行数相乘
投影 Π 1, 2 (S1)，取某一个表的某几个字段
选择 ρ no003 (S1)，选表中的一条记录（一行）
自然连接的结果是两个表全部的属性列，但相同的属性只显示一次（列相同，值相同）不满足匹配条件的行移除，符号为两个三角。

笛卡尔积与自然连接有转换关系，利用投影和选择来筛选列和行

<h3>函数依赖（重点）</h3>

依赖是怎么来的呢，我们拿到 X 就能确定 Y，那么 X 就能确认 Y， 也就是 Y 依赖 X，比如 Y=X*X 这个函数。

函数依赖有两种

<ul>
<li>部分函数依赖，当拿到 A 之后就可以通过 A 找到 C，那么在一个 (A, B) 的关系中的其中一部分（A）可以确定 C，那么就称为部分函数依赖（A 可以推导 A，C 依赖于 A）</li>
<li>传递函数依赖，A 与 B 不等价，但 A 可以确认 B，B 可以确认 C，那么 A 就可以确认 C，这个过程就是传递函数依赖（C 依赖 A）</li>
</ul>

<h3>键和约束（重点）</h3>

<h4>数据库键的分类和约束</h4>

数据库的键分为如下几种：

<ul>
<li>超键，可以唯一标识一条数据的属性的集合</li>
<li>候选键，从超键中去掉冗余的属性，剩余的即为候选键</li>
<li>主键，候选键中选一个</li>
<li>外键，其他表的主键</li>
<li>主属性，候选键集合包含过的属性为主属性，其他的为非主属性</li>
</ul>

三个约束

<ul>
<li>实体完整性约束，主键约束，主键唯一不为空且不能重复</li>
<li>参照完整性约束，外键需要为其他表已存在的值，或空</li>
<li>用户自定义完整性约束，比如某个属性的取值范围</li>
</ul>

<h4>范式（重点）</h4>

第一范式 1NF，所有属性不可分割
第二范式 2NF，满足 1NF 的前提下，每一个非主属性都完全依赖主键，<strong>不存在部分函数依赖</strong>（<strong>都依赖主键而不是候选键</strong>，所以单属性候选键不会违反 2NF），目的是去除部分依赖。
第三范式 3NF，满足 2NF 的前提下，没有非主属属性传递依赖候选键，目的是<strong>去除传递依赖</strong>，通过主键去唯一确认非主属性，而非通过候选键去间接确认非主属性。
BC 范式 BCNF，依赖集中的每个决定因素的集合（依赖集的左侧）必须在候选码集合内

<blockquote>
  参考博客：<a class="wp-editor-md-post-content-link" href="https://www.cnblogs.com/studyzy/p/5823224.html">https://www.cnblogs.com/studyzy/p/5823224.html</a>
</blockquote>

反范式，本质就是增加冗余，增加查询速度

比如依赖集 F = {SJ->T, T->J}

候选键： (S, T) (S, J)
主属性：S,T,J
非主属性：空
1NF：满足
2NF：满足，因为没有非主属性
3NF：满足，没有非主属性
BCNF：不满足，因为决定因素 (T) 不在候选键的集合中

依赖集题型的解法，从入度为0的依赖属性开始扩散，直到拥有的信息集合能把整个图遍历出来

<h4>模式分解</h4>

模式分解分两种

<ul>
<li>保持依赖的分解，比如一个 F={A->B, B->C, A->C} 的依赖表，就可以拆为 {A-B} {B->C} 两个依赖表，{A->C} 是冗余的，无需独立</li>
<li>无损分解，如果从分解后的关系模式可还原出原关系模式（所有列都能推出来），就是无损的，反之有损</li>
</ul>

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_64fad68760721808a95e16ded6720128.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_64fad68760721808a95e16ded6720128.jpg" alt="" /></a>

无损分解定理：关系模式 R 分解为 p={R1, R2}，F 为 R 满足的函数依赖集合，无损分解的充要条件是 R1∩R2 可推到出 R1-R2 或 R2-R1。

这里为啥要 ∩ 呢，因为交集代表两个表可以关联上的查询条件，如果根据这个查询条件能把 R1 表比 R2 表多的字段（或者 R2 表比 R1 表多的字段）都遍历出来，那么就能把这个表所有的字段都遍历出来，于是乎无损的，反之有损。

<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_30f8b763072ea62d368039a98af4876d.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_30f8b763072ea62d368039a98af4876d.jpg" alt="" /></a>

<h3>事务（重点）</h3>

事务的四个特性

<ul>
<li>操作原子性，全做/全部做</li>
<li>数据一致性，发生后数据变化是一致的</li>
<li>执行隔离性，多个事务执行不会串</li>
<li>改变持续性，持久化的意思</li>
</ul>

并发控制中存在的三个问题

<ul>
<li>脏写，违反数据一致性，事务 A 改完但未提交，事务 B 也对同一条记录做了更改覆盖</li>
<li>不可重复读，同样的读取条件读取数据，事务进行中两次读取不一样</li>
<li>脏读，事务未提交数据被读取</li>
<li>幻读，同样的读取条件读取数据，新增的数据会被读取到</li>
</ul>

三级封锁协议

排他锁 X，共享锁 S

一级封锁：事务修改数据时，加 X 锁，其他事务需要操作这条数据时必须等待数据修改完才可进行，解决脏写
二级封锁：一级封锁基础上，在事务查询数据时，加 S 锁，查完就释放，解决脏写脏读问题
三级封锁：一级封锁基础上，事务查询数据时，加 S 锁，直到事务结束释放，解决脏写脏读以及不可重复读的问题

<h3>备份</h3>

数据库备份方式：

完全备份：备份所有数据
差量备份：上一次完全备份后变化的数据
增量备份：上一次备份后变化的数据
日志文件：精确到每一步操作，可回滚

<h3>分布式</h3>

分片模式

<ul>
<li>水平，每一条行记录拆开放在不同的数据库上</li>
<li>垂直，不同的列拆开放到不同的数据库上</li>
</ul>

分布透明性

<ul>
<li>分片透明性，用户不需要知道数据存在哪里</li>
<li>位置透明性，用户不需要知道数据在哪</li>
<li>逻辑透明性，用户不需要知道每一个局部机器用的什么数据模型</li>
<li>复制透明性，用户不需要知道数据库复制的数据从何而来</li>
</ul>

<h3>数据仓库</h3>

数据仓库是一种特殊的数据库，比如存放过时的数据，用于做数据分析和挖掘

特点

<ul>
<li>不面向应用，面向主题</li>
<li>会集成不同的表</li>
<li>相对稳定，一般不做更改</li>
<li>拥有比较大量的插入，反应数据历史的变化</li>
</ul>

分析方法

<ul>
<li>关联分析，不同事件间的关联性，事件 A 发生后，另一个事件也经常发生</li>
<li>序列分析，不同事件间隔内接连发生的事件</li>
<li>分类分析，分析不同类别的样本特点</li>
<li>聚类分析，没有类别的样本聚为不同的组，并对这些组做描述</li>
</ul>

商业智能系统四个阶段：数据预处理，建立数据仓库，数据分析和数据展现

数据预处理和仓库建立：抽取、转化、加载

数据分析：联机分析处理（OLAP）和数据挖掘

<h3>SQL</h3>

sql 方面了解一个例题即可，注意认符号，Π是列选择，rou 是行筛选条件，循环符号表示自然连接，推断 where 条件时需要注意自然连接自带条件（重复数据不展现）
<a class="wp-editor-md-post-content-link" href="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_bff3697cbccfb363b7ef5ec93b692228.jpg"><img src="https://blog.wj2015.com/wp-content/uploads/2022/04/wp_editor_md_bff3697cbccfb363b7ef5ec93b692228.jpg" alt="" /></a>

<h2>总结</h2>

多掌握概念即可，实际工作中怎样设计表，怎样拆分实体，怎样用好冗余字段，都需要根据需求而定，而考试中的内容更接近纯理论，能有个参照。]]></content:encoded>
		<excerpt:encoded><![CDATA[作为后端工作者，数据库可以说是平时接触最多的中间件之一了，所以 SQL 使用和实践一般都无甚问题，但是软考里边考的不只是 SQL 应用，还有范式、模式、依赖等等概念化的东西，所以这一章也不能掉以轻心。]]></excerpt:encoded>
		<wp:post_id>730</wp:post_id>
		<wp:post_date><![CDATA[2022-04-10 15:34:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-04-10 07:34:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%bd%af%e8%80%83%e7%9f%a5%e8%af%86%e6%80%bb%e7%bb%93%e3%80%91%e6%95%b0%e6%8d%ae%e5%ba%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86"><![CDATA[基础知识]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e6%8d%ae%e5%ba%93"><![CDATA[数据库]]></category>
		<category domain="post_tag" nicename="%e8%bd%af%e8%80%83"><![CDATA[软考]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[725]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[bot_views]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
